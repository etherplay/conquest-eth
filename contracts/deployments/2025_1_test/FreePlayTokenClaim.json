{
  "address": "0xE5dB7f47bA5e3C6498d4a94Bd4Be682734E85B64",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        },
        {
          "internalType": "contract PlayToken",
          "name": "underlyingToken",
          "type": "address"
        },
        {
          "internalType": "contract FreePlayToken",
          "name": "freePlayToekn",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct FreePlayTokenClaim.Claim[]",
          "name": "claims",
          "type": "tuple[]"
        }
      ],
      "name": "mintMultipleViaNativeToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintViaNativeToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawUnderlyingToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xba1e2e6f5d481acfad8b5e226fe14ee8fa67acc79511a29705167b4a0da7e66a",
  "receipt": {
    "to": null,
    "from": "0xbE19B59E8C588d68f475A407C7BA5fE813AEb792",
    "contractAddress": "0xE5dB7f47bA5e3C6498d4a94Bd4Be682734E85B64",
    "transactionIndex": 7,
    "gasUsed": "1022410",
    "logsBloom": "0x
    "blockHash": "0xedac4dac2ec20fd76a189ffefe34271e656b11c9cdc6e4c6f9d4e0c22562ebf1",
    "transactionHash": "0xba1e2e6f5d481acfad8b5e226fe14ee8fa67acc79511a29705167b4a0da7e66a",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 38221369,
        "transactionHash": "0xba1e2e6f5d481acfad8b5e226fe14ee8fa67acc79511a29705167b4a0da7e66a",
        "address": "0xE5dB7f47bA5e3C6498d4a94Bd4Be682734E85B64",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000be19b59e8c588d68f475a407c7ba5fe813aeb792"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0xedac4dac2ec20fd76a189ffefe34271e656b11c9cdc6e4c6f9d4e0c22562ebf1"
      }
    ],
    "blockNumber": 38221369,
    "cumulativeGasUsed": "1582999",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbE19B59E8C588d68f475A407C7BA5fE813AEb792",
    "0x1874F6326eEbcCe664410a93a5217741a977D14A",
    "0x8d82B1900bc77fACdf6f2209869E4f816E4fbcB2"
  ],
  "numDeployments": 1,
  "solcInputHash": "55061344d0184db49f57a95ccc370eab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"contract PlayToken\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"contract FreePlayToken\",\"name\":\"freePlayToekn\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct FreePlayTokenClaim.Claim[]\",\"name\":\"claims\",\"type\":\"tuple[]\"}],\"name\":\"mintMultipleViaNativeToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintViaNativeToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUnderlyingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/conquest_token/FreePlayTokenClaim.sol\":\"FreePlayTokenClaim\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaceeafeeaf0d200ca3942d8bf14c1c4f787a77f79cc87c08bb668e65acdee29\",\"license\":\"MIT\"},\"src/base/erc20/ERC20BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\nabstract contract ERC20BaseInternal {\\n    function _approveFor(\\n        address owner,\\n        address target,\\n        uint256 amount\\n    ) internal virtual;\\n\\n    function name() public virtual returns (string memory);\\n\\n    function _mint(address to, uint256 amount) internal virtual;\\n\\n    function _burnFrom(address from, uint256 amount) internal virtual;\\n\\n    function _internal_totalSupply() internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xe99f2bd62fca5ffa2a50281621dc512e62277aa6cfc3f739dd6ef76c60e23e8c\",\"license\":\"AGPL-3.0\"},\"src/base/erc20/UsingERC20Base.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./ERC20BaseInternal.sol\\\";\\nimport \\\"../../libraries/Constants.sol\\\";\\n\\ninterface IBurnReceiver {\\n    function onTokenBurn(\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external returns (bool);\\n}\\n\\ninterface ITransferReceiver {\\n    function onTokenTransfer(\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external returns (bool);\\n}\\n\\ninterface IPaidForReceiver {\\n    function onTokenPaidFor(\\n        address payer,\\n        address forAddress,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\\ninterface IApprovalReceiver {\\n    function onTokenApproval(\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external returns (bool);\\n}\\n\\nabstract contract UsingERC20Base is IERC20, ERC20BaseInternal {\\n    using Address for address;\\n\\n    uint256 internal _totalSupply;\\n    mapping(address => uint256) internal _balances;\\n    mapping(address => mapping(address => uint256)) internal _allowances;\\n\\n    function _internal_totalSupply() internal view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function totalSupply() external view override returns (uint256) {\\n        return _internal_totalSupply();\\n    }\\n\\n    function balanceOf(address owner) external view override returns (uint256) {\\n        return _balances[owner];\\n    }\\n\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        if (owner == address(this)) {\\n            // see transferFrom: address(this) allows anyone\\n            return Constants.UINT256_MAX;\\n        }\\n        return _allowances[owner][spender];\\n    }\\n\\n    function decimals() external pure virtual returns (uint8) {\\n        return uint8(18);\\n    }\\n\\n    function transfer(address to, uint256 amount) external override returns (bool) {\\n        _transfer(msg.sender, to, amount);\\n        return true;\\n    }\\n\\n    function transferAlongWithETH(address payable to, uint256 amount) external payable returns (bool) {\\n        _transfer(msg.sender, to, amount);\\n        to.transfer(msg.value);\\n        return true;\\n    }\\n\\n    function distributeAlongWithETH(address payable[] calldata tos, uint256 totalAmount)\\n        external\\n        payable\\n        returns (bool)\\n    {\\n        uint256 val = msg.value / tos.length;\\n        require(msg.value == val * tos.length, \\\"INVALID_MSG_VALUE\\\");\\n        uint256 amount = totalAmount / tos.length;\\n        require(totalAmount == amount * tos.length, \\\"INVALID_TOTAL_AMOUNT\\\");\\n        for (uint256 i = 0; i < tos.length; i++) {\\n            _transfer(msg.sender, tos[i], amount);\\n            tos[i].transfer(val);\\n        }\\n        return true;\\n    }\\n\\n    function distributeVariousAmountsAlongWithETH(address payable[] calldata tos, uint256[] calldata amounts)\\n        external\\n        payable\\n        returns (bool)\\n    {\\n        uint256 val = msg.value / tos.length;\\n        require(msg.value == val * tos.length, \\\"INVALID_MSG_VALUE\\\");\\n        require(tos.length == amounts.length, \\\"NOT_SAME_LENGTH\\\");\\n        for (uint256 i = 0; i < tos.length; i++) {\\n            _transfer(msg.sender, tos[i], amounts[i]);\\n            tos[i].transfer(val);\\n        }\\n        return true;\\n    }\\n\\n    function distributeVariousAmountsOfTokenAndETH(\\n        address payable[] calldata tos,\\n        uint256[] calldata tokenAmounts,\\n        uint256[] calldata etherAmounts\\n    ) external payable returns (bool) {\\n        uint256 totalETHSent = 0;\\n        require(tos.length == tokenAmounts.length, \\\"TOKEN_NOT_SAME_LENGTH\\\");\\n        require(tos.length == etherAmounts.length, \\\"ETH_NOT_SAME_LENGTH\\\");\\n        for (uint256 i = 0; i < tos.length; i++) {\\n            if (tokenAmounts[i] != 0) {\\n                _transfer(msg.sender, tos[i], tokenAmounts[i]);\\n            }\\n            if (etherAmounts[i] != 0) {\\n                tos[i].transfer(etherAmounts[i]);\\n                totalETHSent += etherAmounts[i];\\n            }\\n        }\\n        require(msg.value == totalETHSent, \\\"INVALID_MSG_VALUE\\\");\\n        return true;\\n    }\\n\\n    function transferAndCall(\\n        address to,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool) {\\n        _transfer(msg.sender, to, amount);\\n        return ITransferReceiver(to).onTokenTransfer(msg.sender, amount, data);\\n    }\\n\\n    function transferFromAndCall(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool) {\\n        _transferFrom(from, to, amount);\\n        return ITransferReceiver(to).onTokenTransfer(from, amount, data);\\n    }\\n\\n    function payForAndCall(\\n        address forAddress,\\n        address to,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool) {\\n        _transfer(msg.sender, to, amount);\\n        return IPaidForReceiver(to).onTokenPaidFor(msg.sender, forAddress, amount, data);\\n    }\\n\\n    // TODO ?\\n    // function transferFromForAndCall(\\n    //     address forAddress,\\n    //     address from,\\n    //     address to,\\n    //     uint256 amount,\\n    //     bytes calldata data\\n    // ) external returns (bool) {\\n    //     _transferFrom(from, to, amount);\\n    //     return ITransferForReceiver(to).onTokenTransferFor(from, forAddress, amount, data);\\n    // }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        _transferFrom(from, to, amount);\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        // TODO support metatx ?\\n        _approveFor(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function approveAndCall(\\n        address spender,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool) {\\n        _approveFor(msg.sender, spender, amount);\\n        return IApprovalReceiver(spender).onTokenApproval(msg.sender, amount, data);\\n    }\\n\\n    function _approveFor(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal override {\\n        require(owner != address(0) && spender != address(0), \\\"INVALID_ZERO_ADDRESS\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        // anybody can transfer from this\\n        // this allow mintAndApprovedCall without gas overhead\\n        if (msg.sender != from && from != address(this)) {\\n            uint256 currentAllowance = _allowances[from][msg.sender];\\n            if (currentAllowance != Constants.UINT256_MAX) {\\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\\n                require(currentAllowance >= amount, \\\"NOT_AUTHOIZED_ALLOWANCE\\\");\\n                _allowances[from][msg.sender] = currentAllowance - amount;\\n            }\\n        }\\n        _transfer(from, to, amount);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(to != address(0), \\\"INVALID_ZERO_ADDRESS\\\");\\n        require(to != address(this), \\\"INVALID_THIS_ADDRESS\\\");\\n        uint256 currentBalance = _balances[from];\\n        require(currentBalance >= amount, \\\"NOT_ENOUGH_TOKENS\\\");\\n        _balances[from] = currentBalance - amount;\\n        _balances[to] += amount;\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    function _transferAllIfAny(address from, address to) internal {\\n        uint256 balanceLeft = _balances[from];\\n        if (balanceLeft > 0) {\\n            _balances[from] = 0;\\n            _balances[to] += balanceLeft;\\n            emit Transfer(from, to, balanceLeft);\\n        }\\n    }\\n\\n    function _mint(address to, uint256 amount) internal override {\\n        _totalSupply += amount;\\n        _balances[to] += amount;\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burnFrom(address from, uint256 amount) internal override {\\n        uint256 currentBalance = _balances[from];\\n        require(currentBalance >= amount, \\\"NOT_ENOUGH_TOKENS\\\");\\n        _balances[from] = currentBalance - amount;\\n        _totalSupply -= amount;\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0xa33bf9f40607c0c4c316c2027d8c0ec1bcf362c9f6c58844816552f304f25066\",\"license\":\"AGPL-3.0\"},\"src/base/erc20/WithPermitAndFixedDomain.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"./ERC20BaseInternal.sol\\\";\\nimport \\\"../../interfaces/IERC2612Standalone.sol\\\";\\n\\nabstract contract WithPermitAndFixedDomain is ERC20BaseInternal, IERC2612Standalone {\\n    bytes32 internal constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    bytes32 public immutable override DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) internal _nonces;\\n\\n    constructor(string memory version) {\\n        if (bytes(version).length == 0) {\\n            version = \\\"1\\\";\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,address verifyingContract)\\\"),\\n                keccak256(bytes(name())),\\n                keccak256(bytes(version)),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function nonces(address owner) external view override returns (uint256) {\\n        return _nonces[owner];\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        require(owner != address(0), \\\"INVALID_ZERO_ADDRESS\\\");\\n\\n        uint256 currentNonce = _nonces[owner];\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentNonce, deadline))\\n            )\\n        );\\n        require(owner == ecrecover(digest, v, r, s), \\\"INVALID_SIGNATURE\\\");\\n        require(deadline == 0 || block.timestamp <= deadline, \\\"TOO_LATE\\\");\\n\\n        _nonces[owner] = currentNonce + 1;\\n        _approveFor(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0xf0b3d7c51a0b71477ef63eee5fa21ea9f32d424b40480ab3b5343a16a0e4afbc\",\"license\":\"AGPL-3.0\"},\"src/base/utils/UsingOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../interfaces/IERC165.sol\\\";\\n\\ncontract UsingOwner is IERC165 {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    address public owner;\\n\\n    constructor(address _owner) {\\n        _transferOwnership(_owner);\\n    }\\n\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) external pure virtual override returns (bool) {\\n        return interfaceID == 0x7f5828d0 || interfaceID == 0x01ffc9a7;\\n    }\\n\\n    function _transferOwnership(address newOwner) internal {\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x91cf6d246ec85f9b6083d73c27b7efe7805f7b772ae7e8a30eb831339c5c014e\",\"license\":\"MIT\"},\"src/conquest_token/FreePlayToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"./IFreePlayToken.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../base/erc20/UsingERC20Base.sol\\\";\\nimport \\\"../base/erc20/WithPermitAndFixedDomain.sol\\\";\\nimport \\\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\\\";\\nimport \\\"./PlayToken.sol\\\";\\n\\ncontract FreePlayToken is UsingERC20Base, IFreePlayToken, WithPermitAndFixedDomain, Proxied {\\n    using Address for address;\\n    using SafeERC20 for PlayToken;\\n\\n    uint256 internal constant DECIMALS_18 = 1000000000000000000;\\n\\n    event Burner(address burner, bool enabled);\\n    event Minter(address burner, bool enabled);\\n    event Admin(address account);\\n\\n    PlayToken internal immutable _underlyingToken;\\n\\n    mapping(address => bool) public minters;\\n    mapping(address => bool) public burners;\\n\\n    address public admin;\\n\\n    constructor(PlayToken underlyingToken, address initialAdmin) WithPermitAndFixedDomain(\\\"1\\\") {\\n        _underlyingToken = underlyingToken;\\n        _postUpgrade(underlyingToken, initialAdmin);\\n    }\\n\\n    function postUpgrade(PlayToken underlyingToken, address initialAdmin) external onlyProxyAdmin {\\n        _postUpgrade(underlyingToken, initialAdmin);\\n    }\\n\\n    function _postUpgrade(PlayToken, address initialAdmin) internal {\\n        if (admin != initialAdmin) {\\n            admin = initialAdmin;\\n            emit Admin(initialAdmin);\\n        }\\n    }\\n\\n    string public constant symbol = \\\"FPLAY\\\";\\n\\n    function name() public pure override returns (string memory) {\\n        return \\\"Free Play\\\";\\n    }\\n\\n    function setMinter(address minter, bool enabled) external {\\n        require(msg.sender == admin, \\\"NOT_ALLOWED_ADMIN\\\");\\n        minters[minter] = enabled;\\n        emit Minter(minter, enabled);\\n    }\\n\\n    function setAdmin(address newAdmin) external {\\n        require(msg.sender == admin, \\\"NOT_ALLOWED_ADMIN\\\");\\n        admin = newAdmin;\\n        emit Admin(newAdmin);\\n    }\\n\\n    function mintViaNativeToken(address to, uint256 amount) external payable {\\n        require(minters[msg.sender], \\\"NOT_ALLOWED_MINTER\\\");\\n        _underlyingToken.mint{value: msg.value}(address(this), amount);\\n        _mint(to, amount);\\n    }\\n\\n    function mintViaNativeTokenPlusSendExtraNativeTokens(address payable to, uint256 amount) external payable {\\n        require(minters[msg.sender], \\\"NOT_ALLOWED_MINTER\\\");\\n        uint256 valueExpected = (amount * DECIMALS_18) / _underlyingToken.numTokensPerNativeTokenAt18Decimals();\\n        _underlyingToken.mint{value: valueExpected}(address(this), amount);\\n        _mint(to, amount);\\n        if (msg.value > valueExpected) {\\n            to.transfer(msg.value - valueExpected);\\n        }\\n    }\\n\\n    function mintMultipleViaNativeTokenPlusSendExtraNativeTokens(\\n        address payable[] calldata tos,\\n        uint256[] calldata amounts,\\n        uint256[] calldata nativeTokenAmounts\\n    ) external payable {\\n        require(minters[msg.sender], \\\"NOT_ALLOWED_MINTER\\\");\\n        for (uint256 i = 0; i < tos.length; i++) {\\n            uint256 valueExpected = (amounts[i] * DECIMALS_18) / _underlyingToken.numTokensPerNativeTokenAt18Decimals();\\n            _underlyingToken.mint{value: valueExpected}(address(this), amounts[i]);\\n            _mint(tos[i], amounts[i]);\\n            if (nativeTokenAmounts[i] > 0) {\\n                tos[i].transfer(nativeTokenAmounts[i]);\\n            }\\n        }\\n    }\\n\\n    function mint(address from, address to, uint256 amount) external {\\n        require(minters[msg.sender], \\\"NOT_ALLOWED_MINTER\\\");\\n        _underlyingToken.safeTransferFrom(from, address(this), amount);\\n        _mint(to, amount);\\n    }\\n\\n    function burn(address from, address to, uint256 amount) external {\\n        require(burners[msg.sender], \\\"NOT_ALLOWED_BURNER\\\");\\n        _underlyingToken.safeTransfer(to, amount);\\n        _burnFrom(from, amount);\\n    }\\n\\n    function burnMultiple(BurnFrom[] calldata list, address to) external {\\n        require(burners[msg.sender], \\\"NOT_ALLOWED_BURNER\\\");\\n        uint256 total = 0;\\n        for (uint256 i = 0; i < list.length; i++) {\\n            total += list[i].amount;\\n            _burnFrom(list[i].from, list[i].amount);\\n        }\\n        _underlyingToken.safeTransfer(to, total);\\n    }\\n}\\n\",\"keccak256\":\"0x1ac9b62616eb0ab6f498e658c30f9b441753c955d3b08ffed1d18b2f1d990bd1\",\"license\":\"AGPL-3.0\"},\"src/conquest_token/FreePlayTokenClaim.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../base/utils/UsingOwner.sol\\\";\\nimport \\\"./PlayToken.sol\\\";\\nimport \\\"./FreePlayToken.sol\\\";\\n\\ncontract FreePlayTokenClaim is IERC20, UsingOwner {\\n    uint256 internal _totalSupply;\\n    mapping(address => uint256) internal _balances;\\n\\n    PlayToken immutable _underlyingToken;\\n    FreePlayToken immutable _freePlayToken;\\n\\n    constructor(address initialOwner, PlayToken underlyingToken, FreePlayToken freePlayToekn) UsingOwner(initialOwner) {\\n        _underlyingToken = underlyingToken;\\n        _freePlayToken = freePlayToekn;\\n    }\\n\\n    string public constant symbol = \\\"CLAIM\\\";\\n\\n    function name() public pure returns (string memory) {\\n        return \\\"Free Play Claim\\\";\\n    }\\n\\n    function totalSupply() external view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address owner) external view override returns (uint256) {\\n        return _balances[owner];\\n    }\\n\\n    function allowance(address, address) external pure override returns (uint256) {\\n        return 0;\\n    }\\n\\n    function decimals() external pure virtual returns (uint8) {\\n        return uint8(18);\\n    }\\n\\n    function transfer(address, uint256) external returns (bool) {\\n        revert(\\\"NON_TRANSFERABLE\\\");\\n    }\\n\\n    function approve(address, uint256) external returns (bool) {\\n        revert(\\\"NON_TRANSFERABLE\\\");\\n    }\\n\\n    function transferFrom(address, address, uint256) external returns (bool) {\\n        revert(\\\"NON_TRANSFERABLE\\\");\\n    }\\n\\n    // --------------------------------------------------------------------------------------------\\n\\n    function mintViaNativeToken(address to, uint256 amount) external payable {\\n        _underlyingToken.mint{value: msg.value}(address(this), amount);\\n\\n        // we increase the balance ( + total supply)\\n        _totalSupply = _totalSupply + amount;\\n        _balances[to] = _balances[to] + amount;\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    struct Claim {\\n        address to;\\n        uint256 amount;\\n    }\\n\\n    function mintMultipleViaNativeToken(Claim[] calldata claims) external payable {\\n        uint256 numClaims = claims.length;\\n        uint256 totalAmount = 0;\\n        for (uint256 i = 0; i < numClaims; i++) {\\n            uint256 amount = claims[i].amount;\\n            address to = claims[i].to;\\n\\n            totalAmount += amount;\\n            _balances[to] = _balances[to] + amount;\\n            emit Transfer(address(0), to, amount);\\n        }\\n        _underlyingToken.mint{value: msg.value}(address(this), totalAmount);\\n        _totalSupply = _totalSupply + totalAmount;\\n    }\\n\\n    function claim(address to, uint256 amount) external {\\n        address from = msg.sender;\\n        require(_balances[from] >= amount, \\\"INSUFFICIENT_BALANCE\\\");\\n\\n        // we reduce the balance (+ total supply)\\n        _totalSupply = _totalSupply - amount;\\n        _balances[from] = _balances[from] - amount;\\n        emit Transfer(from, address(0), amount);\\n\\n        // we approve _freePlayToken to transfer token\\n        _underlyingToken.approve(address(_freePlayToken), amount);\\n        // we then ask freePlayToken to be minted from the underlying token\\n        _freePlayToken.mint(address(this), to, amount);\\n    }\\n\\n    function withdrawUnderlyingToken(address from, address to, uint256 amount) external {\\n        require(msg.sender == owner, \\\"NOT_AUTHORIZED\\\");\\n        require(_balances[from] >= amount, \\\"INSUFFICIENT_BALANCE\\\");\\n\\n        // we reduce the balance (+ total supply)\\n        _totalSupply = _totalSupply - amount;\\n        _balances[from] = _balances[from] - amount;\\n        emit Transfer(from, address(0), amount);\\n\\n        _underlyingToken.transfer(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xa91579a21dd214e9ebcc0461430d3013df2e769c901a0736444dac7e050987f4\",\"license\":\"AGPL-3.0\"},\"src/conquest_token/IFreePlayToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IFreePlayToken is IERC20 {\\n    function mintViaNativeToken(address to, uint256 amount) external payable;\\n\\n    function mintViaNativeTokenPlusSendExtraNativeTokens(address payable to, uint256 amount) external payable;\\n\\n    function mintMultipleViaNativeTokenPlusSendExtraNativeTokens(\\n        address payable[] calldata tos,\\n        uint256[] calldata amounts,\\n        uint256[] calldata nativeTokenAmounts\\n    ) external payable;\\n\\n    function mint(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function burn(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    struct BurnFrom {\\n        address from;\\n        uint256 amount;\\n    }\\n\\n    function burnMultiple(BurnFrom[] calldata list, address to) external;\\n}\\n\",\"keccak256\":\"0x873abb11be35fec3bbe377aea68dfdcccc180058c7a7d268f3ed4f47dfaa04e2\",\"license\":\"AGPL-3.0\"},\"src/conquest_token/PlayToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../base/erc20/UsingERC20Base.sol\\\";\\nimport \\\"../base/erc20/WithPermitAndFixedDomain.sol\\\";\\nimport \\\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\\\";\\n\\ninterface SavingsXDaiAdapter {\\n    function depositXDAI(address receiver) external payable returns (uint256);\\n\\n    function withdrawXDAI(uint256 assets, address receiver) external payable returns (uint256);\\n}\\n\\ninterface SDAI is IERC20 {\\n    function deposit(uint256 assets, address receiver) external returns (uint256);\\n\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256);\\n\\n    function maxWithdraw(address owner) external view returns (uint256);\\n}\\n\\ncontract PlayToken is UsingERC20Base, WithPermitAndFixedDomain, Proxied {\\n    uint256 internal constant DECIMALS_18 = 1000000000000000000;\\n    uint256 public immutable numTokensPerNativeTokenAt18Decimals;\\n\\n    SavingsXDaiAdapter public immutable sdaiAdapter;\\n    SDAI public immutable sdai;\\n\\n    constructor(\\n        address initialRedeemer,\\n        uint256 _numTokensPerNativeTokenAt18Decimals,\\n        SDAI _sdai,\\n        SavingsXDaiAdapter _sdaiAdapter\\n    ) WithPermitAndFixedDomain(\\\"1\\\") {\\n        numTokensPerNativeTokenAt18Decimals = _numTokensPerNativeTokenAt18Decimals;\\n        sdai = _sdai;\\n        sdaiAdapter = _sdaiAdapter;\\n        _postUpgrade(initialRedeemer, numTokensPerNativeTokenAt18Decimals, _sdai, _sdaiAdapter);\\n    }\\n\\n    function postUpgrade(\\n        address initialRedeemer,\\n        uint256 _numTokensPerNativeTokenAt18Decimals,\\n        SDAI _sdai,\\n        SavingsXDaiAdapter _sdaiAdapter\\n    ) external onlyProxyAdmin {\\n        _postUpgrade(initialRedeemer, _numTokensPerNativeTokenAt18Decimals, _sdai, _sdaiAdapter);\\n    }\\n\\n    function _postUpgrade(address initialRedeemer, uint256, SDAI, SavingsXDaiAdapter) internal {\\n        if (_redeemer() != initialRedeemer) {\\n            assembly {\\n                // keccak256(\\\"play.redeemer\\\") - 1\\n                sstore(0xa38643e3ed511bdab6502b0aaa1583180356304eba44dc9c3bbd0d9bf66e67f9, initialRedeemer)\\n            }\\n            emit Redeemer(initialRedeemer);\\n        }\\n\\n        if (address(sdai) != address(0) && address(sdaiAdapter) != address(0)) {\\n            sdai.approve(address(sdaiAdapter), type(uint256).max);\\n            uint256 xdaiAmount = address(this).balance;\\n            sdaiAdapter.depositXDAI{value: xdaiAmount}(address(this));\\n        }\\n    }\\n\\n    string public constant symbol = \\\"PLAY\\\";\\n\\n    function name() public pure override returns (string memory) {\\n        return \\\"Play\\\";\\n    }\\n\\n    function mint(address to, uint256 amount) external payable {\\n        uint256 xdaiAmount = msg.value;\\n        require((xdaiAmount * numTokensPerNativeTokenAt18Decimals) / DECIMALS_18 == amount, \\\"INVALID_AMOUNT\\\");\\n\\n        if (address(sdai) != address(0) && address(sdaiAdapter) != address(0)) {\\n            sdaiAdapter.depositXDAI{value: xdaiAmount}(address(this));\\n        }\\n\\n        _mint(to, amount);\\n    }\\n\\n    function burn(address payable to, uint256 amount) external {\\n        _burnFrom(msg.sender, amount);\\n        uint256 xDaiAmount = (amount * DECIMALS_18) / numTokensPerNativeTokenAt18Decimals;\\n\\n        if (address(sdai) != address(0) && address(sdaiAdapter) != address(0)) {\\n            sdaiAdapter.withdrawXDAI(xDaiAmount, to);\\n        } else {\\n            to.transfer(xDaiAmount);\\n        }\\n    }\\n\\n    function redeemInterest(address payable to) external returns (uint256) {\\n        require(msg.sender == _redeemer(), \\\"NOT_AUTHORIZED\\\");\\n        if (address(sdai) != address(0) && address(sdaiAdapter) != address(0)) {\\n            uint256 expectedTotalAmount = (_totalSupply * DECIMALS_18) / numTokensPerNativeTokenAt18Decimals;\\n\\n            uint256 maxXDaiAmount = sdai.maxWithdraw(address(this));\\n            if (maxXDaiAmount > expectedTotalAmount) {\\n                uint256 totalToWithdraw = maxXDaiAmount - expectedTotalAmount;\\n                sdaiAdapter.withdrawXDAI(totalToWithdraw, to);\\n                return totalToWithdraw;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function interestAvailableToRedeem() external view returns (uint256) {\\n        if (address(sdai) != address(0) && address(sdaiAdapter) != address(0)) {\\n            uint256 expectedTotalAmount = (_totalSupply * DECIMALS_18) / numTokensPerNativeTokenAt18Decimals;\\n            uint256 maxXDaiAmount = sdai.maxWithdraw(address(this));\\n            if (maxXDaiAmount > expectedTotalAmount) {\\n                uint256 totalToWithdraw = maxXDaiAmount - expectedTotalAmount;\\n                return totalToWithdraw;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    event Redeemer(address newRedeemer);\\n\\n    function _redeemer() internal view returns (address redeemerAddress) {\\n        assembly {\\n            // keccak256(\\\"play.redeemer\\\") - 1\\n            redeemerAddress := sload(0xa38643e3ed511bdab6502b0aaa1583180356304eba44dc9c3bbd0d9bf66e67f9)\\n        }\\n    }\\n\\n    function setRedeemer(address newRedeemer) external {\\n        require(msg.sender == _redeemer(), \\\"NOT_AUTHORIZED\\\");\\n        assembly {\\n            // keccak256(\\\"play.redeemer\\\") - 1\\n            sstore(0xa38643e3ed511bdab6502b0aaa1583180356304eba44dc9c3bbd0d9bf66e67f9, newRedeemer)\\n        }\\n        emit Redeemer(newRedeemer);\\n    }\\n}\\n\",\"keccak256\":\"0x0923174c3ef44fb84d4c9ebf84ab274e1c393b8555fcfdcc4a814eec6ed858f7\",\"license\":\"AGPL-3.0\"},\"src/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc8ed57515045cd0041bc5bf2feb54ba346bd6a24cc054ffa48fb522751778ce7\",\"license\":\"MIT\"},\"src/interfaces/IERC2612Standalone.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\ninterface IERC2612Standalone {\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x98537db7e0bc17ff1c0676d75f2a00c4e95c38cec97510c4778aa98449e7dd45\",\"license\":\"AGPL-3.0\"},\"src/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nlibrary Constants {\\n    uint256 internal constant UINT256_MAX = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n    uint256 internal constant DECIMALS_18 = 1000000000000000000;\\n    uint256 internal constant DECIMALS_14 = 100000000000000;\\n}\\n\",\"keccak256\":\"0x90c9efbfce3d12774196ae69984a23431b94307e71aa4d44e6a96ca3edf901ef\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c806370a082311161008a578063aad3ec9611610059578063aad3ec96146102f8578063cb9b7c5d14610318578063dd62ed3e14610338578063f2fde38b1461035b57600080fd5b806370a082311461021a5780638da5cb5b1461025d57806395d89b41146102af578063a9059cbb1461017c57600080fd5b806323b872dd116100c657806323b872dd146101bb578063313ce567146101d65780635c5113d8146101f25780635ecb2d3f1461020757600080fd5b806301ffc9a7146100f857806306fdde031461012d578063095ea7b31461017c57806318160ddd1461019c575b600080fd5b34801561010457600080fd5b50610118610113366004610dfb565b61037b565b60405190151581526020015b60405180910390f35b34801561013957600080fd5b5060408051808201909152600f81527f4672656520506c617920436c61696d000000000000000000000000000000000060208201525b6040516101249190610e44565b34801561018857600080fd5b50610118610197366004610ee0565b610414565b3480156101a857600080fd5b506001545b604051908152602001610124565b3480156101c757600080fd5b50610118610197366004610f0a565b3480156101e257600080fd5b5060405160128152602001610124565b610205610200366004610f46565b61047e565b005b610205610215366004610ee0565b610650565b34801561022657600080fd5b506101ad610235366004610fbb565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205490565b34801561026957600080fd5b5060005461028a9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610124565b3480156102bb57600080fd5b5061016f6040518060400160405280600581526020017f434c41494d00000000000000000000000000000000000000000000000000000081525081565b34801561030457600080fd5b50610205610313366004610ee0565b6107a4565b34801561032457600080fd5b50610205610333366004610f0a565b610a5e565b34801561034457600080fd5b506101ad610353366004610fd6565b600092915050565b34801561036757600080fd5b50610205610376366004610fbb565b610ce1565b60007f7f5828d0000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316148061040e57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4e4f4e5f5452414e5346455241424c450000000000000000000000000000000060448201526000906064015b60405180910390fd5b806000805b8281101561059057600085858381811061049f5761049f611009565b90506040020160200135905060008686848181106104bf576104bf611009565b6104d59260206040909202019081019150610fbb565b90506104e18285611067565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260026020526040902054909450610515908390611067565b73ffffffffffffffffffffffffffffffffffffffff82166000818152600260205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906105739086815260200190565b60405180910390a3505080806105889061107f565b915050610483565b506040517f40c10f19000000000000000000000000000000000000000000000000000000008152306004820152602481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906340c10f199034906044016000604051808303818588803b15801561062057600080fd5b505af1158015610634573d6000803e3d6000fd5b5050505050806001546106479190611067565b60015550505050565b6040517f40c10f19000000000000000000000000000000000000000000000000000000008152306004820152602481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906340c10f199034906044016000604051808303818588803b1580156106df57600080fd5b505af11580156106f3573d6000803e3d6000fd5b5050505050806001546107069190611067565b60015573ffffffffffffffffffffffffffffffffffffffff821660009081526002602052604090205461073a908290611067565b73ffffffffffffffffffffffffffffffffffffffff83166000818152600260205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906107989085815260200190565b60405180910390a35050565b3360008181526002602052604090205482111561081d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e53554646494349454e545f42414c414e43450000000000000000000000006044820152606401610475565b8160015461082b91906110b8565b60015573ffffffffffffffffffffffffffffffffffffffff811660009081526002602052604090205461085f9083906110b8565b73ffffffffffffffffffffffffffffffffffffffff82166000818152600260205260408082209390935591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906108ba9086815260200190565b60405180910390a36040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b390604401602060405180830381600087803b15801561097257600080fd5b505af1158015610986573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109aa91906110cf565b506040517fc6c3bbe600000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8481166024830152604482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c6c3bbe690606401600060405180830381600087803b158015610a4157600080fd5b505af1158015610a55573d6000803e3d6000fd5b50505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610adf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610475565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260026020526040902054811115610b6e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e53554646494349454e545f42414c414e43450000000000000000000000006044820152606401610475565b80600154610b7c91906110b8565b60015573ffffffffffffffffffffffffffffffffffffffff8316600090815260026020526040902054610bb09082906110b8565b73ffffffffffffffffffffffffffffffffffffffff84166000818152600260205260408082209390935591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610c0b9085815260200190565b60405180910390a36040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b158015610ca357600080fd5b505af1158015610cb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdb91906110cf565b50505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610d62576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610475565b610d6b81610d6e565b50565b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600060208284031215610e0d57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610e3d57600080fd5b9392505050565b600060208083528351808285015260005b81811015610e7157858101830151858201604001528201610e55565b81811115610e83576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610edb57600080fd5b919050565b60008060408385031215610ef357600080fd5b610efc83610eb7565b946020939093013593505050565b600080600060608486031215610f1f57600080fd5b610f2884610eb7565b9250610f3660208501610eb7565b9150604084013590509250925092565b60008060208385031215610f5957600080fd5b823567ffffffffffffffff80821115610f7157600080fd5b818501915085601f830112610f8557600080fd5b813581811115610f9457600080fd5b8660208260061b8501011115610fa957600080fd5b60209290920196919550909350505050565b600060208284031215610fcd57600080fd5b610e3d82610eb7565b60008060408385031215610fe957600080fd5b610ff283610eb7565b915061100060208401610eb7565b90509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561107a5761107a611038565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156110b1576110b1611038565b5060010190565b6000828210156110ca576110ca611038565b500390565b6000602082840312156110e157600080fd5b81518015158114610e3d57600080fdfea26469706673582212202428a9b251f681ff3ec2d58053b35eb55fb5b85094d6c656482fad77b9586b9e64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "totalSupply()": {
        "details": "Returns the amount of tokens in existence."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1751,
        "contract": "src/conquest_token/FreePlayTokenClaim.sol:FreePlayTokenClaim",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2311,
        "contract": "src/conquest_token/FreePlayTokenClaim.sol:FreePlayTokenClaim",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2315,
        "contract": "src/conquest_token/FreePlayTokenClaim.sol:FreePlayTokenClaim",
        "label": "_balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}