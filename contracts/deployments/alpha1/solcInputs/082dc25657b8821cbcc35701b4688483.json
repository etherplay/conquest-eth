{
  "language": "Solidity",
  "sources": {
    "src/Test/TestCompound.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.7.5;\n\nimport \"../Interfaces/ICompoundERC20.sol\";\nimport \"../PlayToken/Base.sol\";\nimport \"../Libraries/Constants.sol\";\n\ncontract TestCompound is Base, ICompoundERC20 {\n    constructor() {}\n\n    function name() public pure override returns (string memory) {\n        return \"CTOKEN\";\n    }\n\n    function mint(uint256) external override returns (uint256) {\n        return 0; // TODO\n    }\n\n    function exchangeRateCurrent() external view override returns (uint256) {\n        return Constants.DECIMALS_18;\n    }\n\n    function supplyRatePerBlock() external view override returns (uint256) {\n        return 0; // TODO\n    }\n\n    function redeem(uint256) external override returns (uint256) {\n        return 0; // TODO\n    }\n\n    function redeemUnderlying(uint256) external override returns (uint256) {\n        return 0; // TODO\n    }\n}\n"
    },
    "src/Interfaces/ICompoundERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\n\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface ICompoundERC20 is IERC20 {\n    function mint(uint256) external returns (uint256);\n\n    function exchangeRateCurrent() external view returns (uint256);\n\n    function supplyRatePerBlock() external view returns (uint256);\n\n    function redeem(uint256) external returns (uint256);\n\n    function redeemUnderlying(uint256) external returns (uint256);\n}\n"
    },
    "src/PlayToken/Base.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"./BaseInternal.sol\";\nimport \"../Libraries/Constants.sol\";\n\ninterface IBurnReceiver {\n    function onTokenBurn(\n        address,\n        uint256,\n        bytes calldata\n    ) external returns (bool);\n}\n\ninterface ITransferReceiver {\n    function onTokenTransfer(\n        address,\n        uint256,\n        bytes calldata\n    ) external returns (bool);\n}\n\ninterface IPaidForReceiver {\n    function onTokenPaidFor(\n        address payer,\n        address forAddress,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool);\n}\n\ninterface IApprovalReceiver {\n    function onTokenApproval(\n        address,\n        uint256,\n        bytes calldata\n    ) external returns (bool);\n}\n\nabstract contract Base is IERC20, BaseInternal {\n    using Address for address;\n\n    uint256 internal _totalSupply;\n    mapping(address => uint256) internal _balances;\n    mapping(address => mapping(address => uint256)) internal _allowances;\n\n    function _internal_totalSupply() internal view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function totalSupply() external view override returns (uint256) {\n        return _internal_totalSupply();\n    }\n\n    function balanceOf(address owner) external view override returns (uint256) {\n        return _balances[owner];\n    }\n\n    function allowance(address owner, address spender) external view override returns (uint256) {\n        if (owner == address(this)) {\n            // see transferFrom: address(this) allows anyone\n            return Constants.UINT256_MAX;\n        }\n        return _allowances[owner][spender];\n    }\n\n    function decimals() external pure virtual returns (uint8) {\n        return uint8(18);\n    }\n\n    function transfer(address to, uint256 amount) external override returns (bool) {\n        _transfer(msg.sender, to, amount);\n        return true;\n    }\n\n    function transferAlongWithETH(address payable to, uint256 amount) external payable returns (bool) {\n        _transfer(msg.sender, to, amount);\n        to.transfer(msg.value);\n        return true;\n    }\n\n    function distributeAlongWithETH(address payable[] calldata tos, uint256 totalAmount)\n        external\n        payable\n        returns (bool)\n    {\n        uint256 val = msg.value / tos.length;\n        require(msg.value == val * tos.length, \"INVALID_MSG_VALUE\");\n        uint256 amount = totalAmount / tos.length;\n        require(totalAmount == amount * tos.length, \"INVALID_TOTAL_AMOUNT\");\n        for (uint256 i = 0; i < tos.length; i++) {\n            _transfer(msg.sender, tos[i], amount);\n            tos[i].transfer(val);\n        }\n        return true;\n    }\n\n    function distributeVariousAmountsAlongWithETH(address payable[] calldata tos, uint256[] calldata amounts)\n        external\n        payable\n        returns (bool)\n    {\n        uint256 val = msg.value / tos.length;\n        require(msg.value == val * tos.length, \"INVALID_MSG_VALUE\");\n        require(tos.length == amounts.length, \"NOT_SAME_LENGTH\");\n        for (uint256 i = 0; i < tos.length; i++) {\n            _transfer(msg.sender, tos[i], amounts[i]);\n            tos[i].transfer(val);\n        }\n        return true;\n    }\n\n    function transferAndCall(\n        address to,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool) {\n        _transfer(msg.sender, to, amount);\n        return ITransferReceiver(to).onTokenTransfer(msg.sender, amount, data);\n    }\n\n    function transferFromAndCall(\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool) {\n        _transferFrom(from, to, amount);\n        return ITransferReceiver(to).onTokenTransfer(from, amount, data);\n    }\n\n    function payForAndCall(\n        address forAddress,\n        address to,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool) {\n        _transfer(msg.sender, to, amount);\n        return IPaidForReceiver(to).onTokenPaidFor(msg.sender, forAddress, amount, data);\n    }\n\n    // TODO ?\n    // function transferFromForAndCall(\n    //     address forAddress,\n    //     address from,\n    //     address to,\n    //     uint256 amount,\n    //     bytes calldata data\n    // ) external returns (bool) {\n    //     _transferFrom(from, to, amount);\n    //     return ITransferForReceiver(to).onTokenTransferFor(from, forAddress, amount, data);\n    // }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external override returns (bool) {\n        _transferFrom(from, to, amount);\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) external override returns (bool) {\n        // TODO support metatx ?\n        _approveFor(msg.sender, spender, amount);\n        return true;\n    }\n\n    function approveAndCall(\n        address spender,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool) {\n        _approveFor(msg.sender, spender, amount);\n        return IApprovalReceiver(spender).onTokenApproval(msg.sender, amount, data);\n    }\n\n    function _approveFor(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal override {\n        require(owner != address(0) && spender != address(0), \"INVALID_ZERO_ADDRESS\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        // anybody can transfer from this\n        // this allow mintAndApprovedCall without gas overhead\n        if (msg.sender != from && from != address(this)) {\n            uint256 currentAllowance = _allowances[from][msg.sender];\n            if (currentAllowance != Constants.UINT256_MAX) {\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\n                require(currentAllowance >= amount, \"NOT_AUTHOIZED_ALLOWANCE\");\n                _allowances[from][msg.sender] = currentAllowance - amount;\n            }\n        }\n        _transfer(from, to, amount);\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(to != address(0), \"INVALID_ZERO_ADDRESS\");\n        require(to != address(this), \"INVALID_THIS_ADDRESS\");\n        uint256 currentBalance = _balances[from];\n        require(currentBalance >= amount, \"NOT_ENOUGH_TOKENS\");\n        _balances[from] = currentBalance - amount;\n        _balances[to] += amount;\n        emit Transfer(from, to, amount);\n    }\n\n    function _transferAllIfAny(address from, address to) internal {\n        uint256 balanceLeft = _balances[from];\n        if (balanceLeft > 0) {\n            _balances[from] = 0;\n            _balances[to] += balanceLeft;\n            emit Transfer(from, to, balanceLeft);\n        }\n    }\n\n    function _mint(address to, uint256 amount) internal override {\n        _totalSupply += amount;\n        _balances[to] += amount;\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burnFrom(address from, uint256 amount) internal override {\n        uint256 currentBalance = _balances[from];\n        require(currentBalance >= amount, \"NOT_ENOUGH_TOKENS\");\n        _balances[from] = currentBalance - amount;\n        _totalSupply -= amount;\n        emit Transfer(from, address(0), amount);\n    }\n}\n"
    },
    "src/Libraries/Constants.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\n\npragma solidity 0.7.5;\n\nlibrary Constants {\n    uint256 internal constant UINT256_MAX = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n    uint256 internal constant DECIMALS_18 = 1000000000000000000;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "src/PlayToken/BaseInternal.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.7.5;\n\nabstract contract BaseInternal {\n    function _approveFor(\n        address owner,\n        address target,\n        uint256 amount\n    ) internal virtual;\n\n    function name() public virtual returns (string memory);\n\n    function _mint(address to, uint256 amount) internal virtual;\n\n    function _burnFrom(address from, uint256 amount) internal virtual;\n\n    function _internal_totalSupply() internal view virtual returns (uint256);\n}\n"
    },
    "src/PlayToken/matic/PlayMaticChildToken.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"../Base.sol\";\nimport \"../WithPermitAndFixedDomain.sol\";\n\ncontract PlayMaticChildToken is Base, WithPermitAndFixedDomain {\n    constructor() WithPermitAndFixedDomain(\"1\") {}\n\n    string public constant symbol = \"M ETHERPLAY\";\n\n    function name() public pure override returns (string memory) {\n        return \"Matic Etherplay\";\n    }\n\n    // TODO Matic specific\n}\n"
    },
    "src/PlayToken/WithPermitAndFixedDomain.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.7.5;\n\nimport \"./BaseInternal.sol\";\nimport \"../Interfaces/IERC2612Standalone.sol\";\n\nabstract contract WithPermitAndFixedDomain is BaseInternal, IERC2612Standalone {\n    bytes32 internal constant PERMIT_TYPEHASH = keccak256(\n        \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n    );\n\n    bytes32 public immutable override DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) internal _nonces;\n\n    constructor(string memory version) {\n        if (bytes(version).length == 0) {\n            version = \"1\";\n        }\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,address verifyingContract)\"),\n                keccak256(bytes(name())),\n                keccak256(bytes(version)),\n                address(this)\n            )\n        );\n    }\n\n    function nonces(address owner) external view override returns (uint256) {\n        return _nonces[owner];\n    }\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external override {\n        require(owner != address(0), \"INVALID_ZERO_ADDRESS\");\n\n        uint256 currentNonce = _nonces[owner];\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentNonce, deadline))\n            )\n        );\n        require(owner == ecrecover(digest, v, r, s), \"INVALID_SIGNATURE\");\n        require(deadline == 0 || block.timestamp <= deadline, \"TOO_LATE\");\n\n        _nonces[owner] = currentNonce + 1;\n        _approveFor(owner, spender, value);\n    }\n}\n"
    },
    "src/Interfaces/IERC2612Standalone.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\n\npragma solidity 0.7.5;\n\ninterface IERC2612Standalone {\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function nonces(address owner) external view returns (uint256);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "src/PlayToken/Play.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"../Interfaces/ITokenManager.sol\";\nimport \"./Base.sol\";\nimport \"./WithPermitAndFixedDomain.sol\";\nimport \"./CompoundAdapter.sol\";\nimport \"hardhat-deploy/solc_0.7/proxy/Proxied.sol\";\n\ncontract Play is Base, WithPermitAndFixedDomain, CompoundAdapter, Proxied {\n    using Address for address;\n\n    address internal _owner; // TODO ownership as extension\n\n    constructor(\n        IERC20 underlyingToken,\n        ICompoundERC20 cToken,\n        address owner\n    ) WithPermitAndFixedDomain(\"1\") CompoundAdapter(underlyingToken, cToken) {\n        postUpgrade(underlyingToken, cToken, owner);\n    }\n\n    function postUpgrade(\n        IERC20,\n        ICompoundERC20,\n        address owner\n    ) public {\n        // 2 first arguments used as immutable in CompoundAdapter\n        _owner = owner;\n    }\n\n    string public constant symbol = \"ETHERPLAY\";\n\n    function name() public pure override returns (string memory) {\n        return \"Etherplay\";\n    }\n\n    // function mintApproveAndCall(\n    //     uint256 amount,\n    //     address target,\n    //     bytes calldata data\n    // ) external {\n    //     // TODO support metatx ?\n    //     // TODO support permit or transfer gateways\n    //     // support ERC20 permit as appended calldata\n    //     address sender = msg.sender;\n    //     _wrappedToken.transferFrom(sender, address(this), amount);\n    //     _mint(address(this), amount);\n    //     if (_allowances[address(this)][target] < amount) {\n    //         // this is the only function that will let address(this) owns some token\n    //         // and it ensure it never keep it\n    //         // as such we can approve it all\n    //         _approveFor(address(this), target, UINT256_MAX);\n    //     }\n    //     target.functionCall(data);\n    //     _transferAllIfAny(address(this), sender);\n    //     // _approveFor(address(this), target, 0); // not necessary\n    // }\n\n    function mintAndApprovedCall(\n        uint256 maxAmount,\n        address target,\n        bytes calldata data\n    ) external {\n        // TODO support metatx ?\n        // TODO support permit or transfer gateways\n        // support ERC20 permit as appended calldata\n        address sender = msg.sender;\n        uint256 actualAmount = _use(maxAmount, sender);\n        _mint(sender, actualAmount);\n        target.functionCall(data); // target can only assume the sender is the contract and will thus refund it if any\n        _transferAllIfAny(address(this), sender);\n    }\n\n    function mintAndCall(\n        uint256 maxAmount,\n        address target,\n        bool requireFullAmount,\n        bytes calldata data\n    ) external returns (uint256) {\n        // TODO support metatx ?\n        // TODO support permit or transfer gateways\n        // support ERC20 permit as appended calldata\n        address sender = msg.sender;\n        uint256 actualAmount = _use(maxAmount, sender);\n        if (requireFullAmount) {\n            require(actualAmount == maxAmount, \"COULD_NOT_MINT_REQUESTED_AMOUNT\");\n        }\n        _mint(sender, actualAmount);\n        ITransferReceiver(target).onTokenTransfer(sender, actualAmount, data);\n        // in this case the target will know the original sender and so refund will go to sender, no need to transfer any bacl afterward\n        // but in case :\n        _transferAllIfAny(address(this), sender);\n        return actualAmount;\n    }\n\n    function mint(uint256 maxAmount) external returns (uint256) {\n        // TODO support permit or transfer gateways\n        // support ERC20 permit as appended calldata\n        address sender = msg.sender;\n        uint256 actualAmount = _use(maxAmount, sender);\n        _mint(sender, actualAmount);\n        return actualAmount;\n    }\n\n    function burn(uint256 maxAmount) external returns (uint256) {\n        address sender = msg.sender;\n        uint256 amountBurnt = _takeBack(maxAmount, sender);\n        _burnFrom(sender, amountBurnt);\n        return amountBurnt;\n    }\n\n    function burnTo(uint256 maxAmount, address to) external returns (uint256) {\n        address sender = msg.sender;\n        uint256 amountBurnt = _takeBack(maxAmount, to);\n        _burnFrom(sender, amountBurnt);\n        return amountBurnt;\n    }\n\n    function burnToAndCall(\n        uint256 maxAmount,\n        address target,\n        bool requireFullAmount,\n        bytes calldata data\n    ) external returns (uint256) {\n        address sender = msg.sender;\n        uint256 amountBurnt = _takeBack(maxAmount, target);\n        if (requireFullAmount) {\n            require(amountBurnt == maxAmount, \"COULD_NOT_BURN_REQUESTED_AMOUNT\");\n        }\n        _burnFrom(sender, amountBurnt);\n        IBurnReceiver(target).onTokenBurn(sender, amountBurnt, data);\n        return amountBurnt;\n    }\n\n    function withdraw(uint256 maxAmount, address to) external returns (uint256) {\n        require(msg.sender == _owner, \"NOT_AUTHORIZED\");\n        return _withdrawInterest(maxAmount, to);\n    }\n\n    // can be used to render user full in case of lack of underlying token\n    // this does not create token in return\n    function depositWithoutReturn(uint256 maxAmount) external returns (uint256) {\n        address sender = msg.sender;\n        return _use(maxAmount, sender);\n    }\n}\n"
    },
    "src/Interfaces/ITokenManager.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\n\npragma solidity 0.7.5;\n\ninterface ITokenManager {\n    function takeBack(uint256 amount) external;\n}\n"
    },
    "src/PlayToken/CompoundAdapter.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"../Interfaces/ICompoundERC20.sol\";\nimport \"./BaseInternal.sol\";\nimport \"../Libraries/Constants.sol\";\n\nabstract contract CompoundAdapter is BaseInternal {\n    using SafeERC20 for IERC20;\n\n    ICompoundERC20 immutable _cToken;\n    IERC20 immutable _underlyingToken;\n\n    constructor(IERC20 underlyingToken, ICompoundERC20 cToken) {\n        _underlyingToken = underlyingToken;\n        _cToken = cToken;\n        underlyingToken.approve(address(cToken), Constants.UINT256_MAX);\n    }\n\n    function _use(uint256 maxAmount, address from) internal returns (uint256) {\n        if (from != address(this)) {\n            _underlyingToken.safeTransferFrom(from, address(this), maxAmount);\n        }\n        require(_cToken.mint(maxAmount) == 0, \"ERROR_MINT\");\n        return maxAmount; //TODO check ?\n    }\n\n    function _takeBack(uint256 maxAmount, address to) internal returns (uint256) {\n        require(_cToken.redeemUnderlying(maxAmount) == 0, \"ERROR_REDEEM_UNDERLYING\");\n        _underlyingToken.safeTransfer(to, maxAmount);\n        return maxAmount;\n    }\n\n    function _withdrawInterest(uint256 maxAmount, address to) internal returns (uint256) {\n        uint256 totalUnderlying = _underlyingTokenAvailable();\n        uint256 availableToWithdraw = totalUnderlying - _internal_totalSupply();\n        if (maxAmount > availableToWithdraw) {\n            maxAmount = availableToWithdraw;\n        }\n        require(_cToken.redeemUnderlying(maxAmount) == 0, \"ERROR_REDEEM_UNDERLYING\");\n        _underlyingToken.safeTransfer(to, maxAmount);\n        return maxAmount;\n    }\n\n    function _underlyingTokenAvailable() internal view returns (uint256) {\n        uint256 compoundBalance = _cToken.balanceOf(address(this));\n        uint256 exchangeRateMantissa = _cToken.exchangeRateCurrent();\n        return (compoundBalance * exchangeRateMantissa) / Constants.DECIMALS_18;\n    }\n}\n"
    },
    "hardhat-deploy/solc_0.7/proxy/Proxied.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nabstract contract Proxied {\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\n    /// It also allows these functions to be called inside a contructor\n    /// even if the contract is meant to be used without proxy\n    modifier proxied() {\n        address proxyAdminAddress = _proxyAdmin();\n        // With hardhat-deploy proxies\n        // the proxyAdminAddress is zero only for the implementation contract\n        // if the implementation contract want to be used as a standalone/immutable contract\n        // it simply has to execute the `proxied` function\n        // This ensure the proxyAdminAddress is never zero post deployment\n        // And allow you to keep the same code for both proxied contract and immutable contract\n        if (proxyAdminAddress == address(0)) {\n            // ensure can not be called twice when used outside of proxy : no admin\n            // solhint-disable-next-line security/no-inline-assembly\n            assembly {\n                sstore(\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n                )\n            }\n        } else {\n            require(msg.sender == proxyAdminAddress);\n        }\n        _;\n    }\n\n    modifier onlyProxyAdmin() {\n        require(msg.sender == _proxyAdmin(), \"NOT_AUTHORIZED\");\n        _;\n    }\n\n    function _proxyAdmin() internal view returns (address ownerAddress) {\n        // solhint-disable-next-line security/no-inline-assembly\n        assembly {\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "src/OuterSpace.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\n\npragma solidity 0.7.5;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./Libraries/Extraction.sol\";\nimport \"./Libraries/Math.sol\";\nimport \"hardhat-deploy/solc_0.7/proxy/Proxied.sol\";\n\ncontract OuterSpace is Proxied {\n    using Extraction for bytes32;\n\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n    // CONSTANTS\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n    uint256 internal constant DECIMALS_18 = 1e18;\n    uint32 internal constant ACTIVE_MASK = 2**31;\n    int256 internal constant UINT32_MAX = 2**32 - 1;\n    uint256 internal constant FRONT_RUNNING_DELAY = 30 * 60; // 30 min // TODO make it configurable in the constructor\n\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n    // CONFIGURATION / IMMUTABLE\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n    bytes32 internal immutable _genesis;\n    IERC20 internal immutable _stakingToken;\n    uint256 internal immutable _resolveWindow;\n    uint256 internal immutable _timePerDistance;\n    uint256 internal immutable _exitDuration;\n    uint32 internal immutable _acquireNumSpaceships;\n    uint32 internal immutable _productionSpeedUp;\n\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n    // STORAGE\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n    mapping(uint256 => Planet) internal _planets;\n    mapping(uint256 => Fleet) internal _fleets;\n\n    mapping(address => uint256) internal _stakeReadyToBeWithdrawn;\n\n    mapping(address => mapping(address => bool)) internal _operators;\n\n    // front running protection : FRONT_RUNNING_DELAY / 2 slots\n    struct InFlight {\n        uint64 flying;\n        uint64 destroyed;\n    }\n    // TODO make it namespaces per user, currently it is possible (though unlikely) for 2 users to share a slot if one attack another and quickly send away spaceships\n    mapping(uint256 => mapping(uint256 => InFlight)) internal _inFlight;\n\n    struct Discovered {\n        uint32 minX;\n        uint32 maxX;\n        uint32 minY;\n        uint32 maxY;\n    }\n\n    Discovered internal _discovered;\n\n    struct Planet {\n        address owner;\n        uint32 exitTime;\n        uint32 numSpaceships; // uint31 + first bit => active\n        uint32 lastUpdated; // also used as native-destruction indicator\n    }\n\n    struct Fleet {\n        address owner;\n        uint32 launchTime;\n        uint32 quantity;\n        // TODO uint32 delay\n    }\n\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n    // EVENTS\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n    event PlanetStake(address indexed acquirer, uint256 indexed location, uint32 numSpaceships, uint256 stake);\n    event FleetSent(\n        address indexed fleetOwner,\n        uint256 indexed from,\n        uint256 fleet,\n        uint32 quantity,\n        uint32 newNumSpaceships\n    );\n    event FleetArrived(\n        uint256 indexed fleet,\n        address indexed fleetOwner,\n        address indexed destinationOwner,\n        uint256 destination,\n        uint32 fleetLoss,\n        uint32 planetLoss,\n        uint32 inFlightFleetLoss,\n        uint32 inFlightPlanetLoss,\n        bool won,\n        uint32 newNumspaceships\n    );\n\n    event PlanetExit(address indexed owner, uint256 indexed location);\n\n    event ExitComplete(address indexed owner, uint256 indexed location, uint256 stake);\n\n    event StakeToWithdraw(address indexed owner, uint256 newStake);\n\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n    // CONSTRUCTOR / INITIALIZATION\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n    constructor(\n        IERC20 stakingToken,\n        bytes32 genesis,\n        uint32 resolveWindow,\n        uint32 timePerDistance,\n        uint32 exitDuration,\n        uint32 acquireNumSpaceships,\n        uint32 productionSpeedUp\n    ) {\n        uint32 t = timePerDistance / 4; // the coordinates space is 4 times bigger\n        require(t * 4 == timePerDistance, \"TIME_PER_DIST_NOT_DIVISIBLE_4\");\n\n        _stakingToken = stakingToken;\n        _genesis = genesis;\n        _resolveWindow = resolveWindow;\n        _timePerDistance = t;\n        _exitDuration = exitDuration;\n        _acquireNumSpaceships = acquireNumSpaceships;\n        _productionSpeedUp = productionSpeedUp;\n\n        postUpgrade(\n            stakingToken,\n            genesis,\n            resolveWindow,\n            timePerDistance,\n            exitDuration,\n            acquireNumSpaceships,\n            productionSpeedUp\n        );\n    }\n\n    function postUpgrade(\n        IERC20,\n        bytes32,\n        uint32,\n        uint32,\n        uint32,\n        uint32,\n        uint32\n    ) public proxied {\n        if (_discovered.minX == 0) {\n            _discovered = Discovered({minX: 12, maxX: 12, minY: 12, maxY: 12});\n        }\n    }\n\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n    // STAKING / PRODUCTION CAPTURE\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n    function onTokenTransfer(\n        address,\n        uint256 amount,\n        bytes calldata data\n    ) public returns (bool) {\n        require(msg.sender == address(_stakingToken), \"INVALID_ERC20\");\n        (address acquirer, uint256 location) = abi.decode(data, (address, uint256));\n        _acquire(acquirer, amount, location); // we do not care of who the payer is\n        return true;\n    }\n\n    function onTokenPaidFor(\n        address,\n        address forAddress,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool) {\n        require(msg.sender == address(_stakingToken), \"INVALID_ERC20\");\n        uint256 location = abi.decode(data, (uint256));\n        _acquire(forAddress, amount, location); // we do not care of who the payer is\n        return true;\n    }\n\n    function acquireViaTransferFrom(uint256 location, uint256 amount) public {\n        address sender = _msgSender();\n        _acquire(sender, amount, location);\n        _stakingToken.transferFrom(sender, address(this), amount);\n    }\n\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n    // EXIT / WITHDRAWALS\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n    function exitFor(address owner, uint256 location) external {\n        Planet storage planet = _getPlanet(location);\n        require(owner == planet.owner, \"NOT_OWNER\");\n        require(planet.exitTime == 0, \"EXITING_ALREADY\"); // if you own the planet again, you ll need to first withdraw\n        planet.exitTime = uint32(block.timestamp);\n        emit PlanetExit(owner, location);\n    }\n\n    function fetchAndWithdrawFor(address owner, uint256[] calldata locations) external {\n        uint256 addedStake = 0;\n        for (uint256 i = 0; i < locations.length; i++) {\n            Planet storage planet = _getPlanet(locations[i]);\n            if (_hasJustExited(planet.exitTime)) {\n                require(owner == planet.owner, \"NOT_OWNER\");\n                addedStake += _setPlanetAfterExitWithoutUpdatingStake(locations[i], owner, planet, address(0), 0); // no need of event as exitTime passed basically mean owner zero and spaceships zero\n            }\n        }\n        uint256 newStake = _stakeReadyToBeWithdrawn[owner] + addedStake;\n        _withdrawAll(owner, newStake);\n    }\n\n    function balanceToWithdraw(address owner) external view returns (uint256) {\n        return _stakeReadyToBeWithdrawn[owner];\n    }\n\n    function withdrawFor(address owner) external {\n        uint256 amount = _stakeReadyToBeWithdrawn[owner];\n        _withdrawAll(owner, amount);\n    }\n\n    function _withdrawAll(address owner, uint256 amount) internal {\n        _updateStake(owner, 0);\n        require(_stakingToken.transfer(owner, amount), \"FAILED_TRANSFER\"); // TODO FundManager\n    }\n\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n    // FLEET RESOLUTION, ATTACK / REINFORCEMENT\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n    function resolveFleet(\n        uint256 fleetId,\n        uint256 from,\n        uint256 to,\n        uint256 distance,\n        bytes32 secret\n    ) external {\n        _resolveFleet(fleetId, from, to, distance, secret);\n    }\n\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n    // FLEET SENDING\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n    function send(\n        uint256 from,\n        uint32 quantity,\n        bytes32 toHash\n    ) external {\n        _sendFor(_msgSender(), from, quantity, toHash);\n    }\n\n    function sendFor(\n        address owner,\n        uint256 from,\n        uint32 quantity,\n        bytes32 toHash\n    ) external {\n        address sender = _msgSender();\n        if (sender != owner) {\n            require(_operators[owner][sender], \"NOT_AUTHORIZED\");\n        }\n        _sendFor(_msgSender(), from, quantity, toHash);\n    }\n\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n    // GETTERS\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n    function getFleet(uint256 fleetId, uint256 from)\n        external\n        view\n        returns (\n            address owner,\n            uint32 launchTime,\n            uint32 quantity,\n            uint64 flyingAtLaunch, // can be more than quantity if multiple fleet were launched around the same time from the same planet\n            uint64 destroyedAtLaunch\n        )\n    {\n        launchTime = _fleets[fleetId].launchTime;\n        quantity = _fleets[fleetId].quantity;\n        owner = _fleets[fleetId].owner;\n\n        uint256 timeSlot = launchTime / (FRONT_RUNNING_DELAY / 2);\n        destroyedAtLaunch = _inFlight[from][timeSlot].destroyed;\n        flyingAtLaunch = _inFlight[from][timeSlot].flying;\n    }\n\n    function getGeneisHash() external view returns (bytes32) {\n        return _genesis;\n    }\n\n    struct PlanetStats {\n        int8 subX;\n        int8 subY;\n        uint16 stake;\n        uint16 production;\n        uint16 attack;\n        uint16 defense;\n        uint16 speed;\n        uint16 natives;\n    }\n\n    struct ExternalPlanet {\n        address owner;\n        uint32 exitTime;\n        uint32 numSpaceships;\n        uint32 lastUpdated;\n        bool active;\n    }\n\n    function getPlanet(uint256 location) external view returns (ExternalPlanet memory state, PlanetStats memory stats) {\n        Planet storage planet = _getPlanet(location);\n        (bool active, uint32 numSpaceships) = _activeNumSpaceships(planet.numSpaceships);\n        state = ExternalPlanet({\n            owner: planet.owner,\n            exitTime: planet.exitTime,\n            numSpaceships: numSpaceships,\n            lastUpdated: planet.lastUpdated,\n            active: active\n        });\n        stats = _getPlanetStats(location);\n    }\n\n    function getPlanetStates(uint256[] calldata locations)\n        external\n        view\n        returns (ExternalPlanet[] memory planetStates, Discovered memory discovered)\n    {\n        planetStates = new ExternalPlanet[](locations.length);\n        for (uint256 i = 0; i < locations.length; i++) {\n            Planet storage planet = _getPlanet(locations[i]);\n            (bool active, uint32 numSpaceships) = _activeNumSpaceships(planet.numSpaceships);\n            planetStates[i] = ExternalPlanet({\n                owner: planet.owner,\n                exitTime: planet.exitTime,\n                numSpaceships: numSpaceships,\n                lastUpdated: planet.lastUpdated,\n                active: active\n            });\n        }\n        discovered = _discovered;\n    }\n\n    function getDiscovered() external view returns (Discovered memory) {\n        return _discovered;\n    }\n\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n    // ERC721 : // TODO\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n    function setApprovalForAll(address operator, bool approved) external {\n        address sender = _msgSender();\n        _operators[sender][operator] = approved;\n        emit ApprovalForAll(sender, operator, approved);\n    }\n\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n    // INTERNALS\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n    // function _actualiseExit(uint256 location) internal {\n    //     Planet storage planet = _getPlanet(location);\n    //     if (planet.exitTime > 0 && block.timestamp > planet.exitTime + _exitDuration) {\n    //         uint16 stake = _stake(location);\n    //         address owner = planet.owner;\n    //         planet.exitTime = 0;\n    //         planet.owner = address(0); // This is fine as long as _actualiseExit is called on every move\n    //         planet.numSpaceships = 0; // This is fine as long as _actualiseExit is called on every move\n    //         planet.lastUpdated = uint32(block.timestamp); // This is fine as long as _actualiseExit is called on every move\n    //         _stakeReadyToBeWithdrawn[owner] += stake * DECIMALS_18;\n    //     }\n    // }\n\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n    // STAKING / PRODUCTION CAPTURE\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n    function _acquire(\n        address sender,\n        uint256 stake,\n        uint256 location\n    ) internal {\n        // console.logBytes32(bytes32(location));\n        bytes32 data = _planetData(location);\n        require(stake == uint256(_stake(data)) * (DECIMALS_18), \"INVALID_AMOUNT\");\n\n        uint32 numSpaceships = _handleSpaceships(sender, location, data);\n        _handleDiscovery(location);\n        emit PlanetStake(sender, location, numSpaceships, stake);\n    }\n\n    function _handleSpaceships(\n        address sender,\n        uint256 location,\n        bytes32 data\n    ) internal returns (uint32) {\n        Planet storage planet = _getPlanet(location);\n        Planet memory mplanet = planet;\n\n        (bool active, uint32 currentNumSpaceships) = _getCurrentNumSpaceships(\n            mplanet.numSpaceships,\n            mplanet.lastUpdated,\n            _production(data)\n        );\n\n        bool justExited;\n        uint32 defense;\n        if (mplanet.lastUpdated == 0) {\n            defense = _natives(data);\n        } else {\n            if (mplanet.exitTime != 0) {\n                require(_hasJustExited(mplanet.exitTime), \"STILL_EXITING\");\n                justExited = true;\n            } else {\n                require(!active, \"STILL_ACTIVE\");\n\n                // Do not allow staking over occupied planets\n                require(mplanet.owner == sender || currentNumSpaceships == 0, \"OCCUPIED\");\n                // used to be the following (but this gave too many cons to send spaceships to non-active planets):\n                // if (mplanet.owner != sender) {\n                //     defense = currentNumSpaceships;\n                // } else {\n                //     defense = 0;\n                // }\n            }\n        }\n        if (justExited) {\n            currentNumSpaceships = _acquireNumSpaceships;\n            _setPlanetAfterExit(\n                location,\n                mplanet.owner,\n                planet,\n                sender,\n                _setActiveNumSpaceships(true, currentNumSpaceships)\n            );\n        } else {\n            planet.owner = sender;\n            if (defense != 0) {\n                (uint32 attackerLoss, ) = _computeFight(_acquireNumSpaceships, defense, 10000, _defense(data)); // attacker alwasy win as defense (and stats.native) is restricted to 3500\n                require(attackerLoss < _acquireNumSpaceships, \"FAILED_CAPTURED\");\n                currentNumSpaceships = _acquireNumSpaceships - attackerLoss;\n            } else {\n                currentNumSpaceships += _acquireNumSpaceships;\n            }\n\n            // planet.exitTime = 0; // should not be needed : // TODO actualiseExit\n            planet.numSpaceships = _setActiveNumSpaceships(true, currentNumSpaceships);\n            planet.lastUpdated = uint32(block.timestamp);\n        }\n        return currentNumSpaceships;\n    }\n\n    // solhint-disable-next-line code-complexity\n    function _handleDiscovery(uint256 location) internal {\n        Discovered memory discovered = _discovered;\n        int256 x = int256(int128(location & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\n        int256 y = int256(int128(location >> 128));\n        bool changes = false;\n        if (x < 0) {\n            require(-x <= discovered.minX, \"NOT_REACHABLE_YET_MINX\");\n            x = -x + 6;\n            if (x > UINT32_MAX) {\n                x = UINT32_MAX;\n            }\n            if (discovered.minX < uint32(x)) {\n                discovered.minX = uint32(x);\n                changes = true;\n            }\n        } else {\n            require(x <= discovered.maxX, \"NOT_REACHABLE_YET_MAXX\");\n            x = x + 6;\n            if (x > UINT32_MAX) {\n                x = UINT32_MAX;\n            }\n            if (discovered.maxX < uint32(x)) {\n                discovered.maxX = uint32(x);\n                changes = true;\n            }\n        }\n\n        if (y < 0) {\n            require(-y <= discovered.minY, \"NOT_REACHABLE_YET_MINY\");\n            y = -y + 6;\n            if (y > UINT32_MAX) {\n                y = UINT32_MAX;\n            }\n            if (discovered.minY < uint32(y)) {\n                discovered.minY = uint32(y);\n                changes = true;\n            }\n        } else {\n            require(y <= discovered.maxY, \"NOT_REACHABLE_YET_MAXY\");\n            y = y + 6;\n            if (y > UINT32_MAX) {\n                y = UINT32_MAX;\n            }\n            if (discovered.maxY < uint32(y)) {\n                discovered.maxY = uint32(y);\n                changes = true;\n            }\n        }\n        if (changes) {\n            _discovered = discovered;\n        }\n    }\n\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n    // EXITS / WITHDRAWALS\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n    function _hasJustExited(uint32 exitTime) internal view returns (bool) {\n        return exitTime > 0 && block.timestamp > exitTime + _exitDuration;\n    }\n\n    function _setPlanetAfterExit(\n        uint256 location,\n        address owner,\n        Planet storage planet,\n        address newOwner,\n        uint32 spaceshipsData\n    ) internal {\n        uint256 addedStake = _setPlanetAfterExitWithoutUpdatingStake(location, owner, planet, newOwner, spaceshipsData);\n        _updateStake(owner, _stakeReadyToBeWithdrawn[owner] + addedStake);\n    }\n\n    function _updateStake(address owner, uint256 newStake) internal {\n        _stakeReadyToBeWithdrawn[owner] = newStake;\n        emit StakeToWithdraw(owner, newStake);\n    }\n\n    function _setPlanetAfterExitWithoutUpdatingStake(\n        uint256 location,\n        address owner,\n        Planet storage planet,\n        address newOwner,\n        uint32 spaceshipsData\n    ) internal returns (uint256) {\n        bytes32 data = _planetData(location);\n        uint256 stake = uint256(_stake(data)) * (DECIMALS_18);\n        emit ExitComplete(planet.owner, location, stake);\n        planet.exitTime = 0;\n        planet.owner = newOwner; // This is fine as long as _actualiseExit is called on every move\n        planet.lastUpdated = uint32(block.timestamp); // This is fine as long as _actualiseExit is called on every move\n        planet.numSpaceships = spaceshipsData;\n        return stake;\n    }\n\n    /*\n    uint256 newStake = _stakeReadyToBeWithdrawn[owner] + stake * DECIMALS_18;\n    _stakeReadyToBeWithdrawn[owner] = newStake;\n    emit StakeToWithdraw(owner, newStake);\n    */\n\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n    // FLEET SENDING\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n    function _sendFor(\n        address owner,\n        uint256 from,\n        uint32 quantity,\n        bytes32 toHash\n    ) internal {\n        Planet storage planet = _getPlanet(from);\n\n        require(planet.exitTime == 0, \"PLANET_EXIT\");\n        require(owner == planet.owner, \"NOT_OWNER\");\n\n        bytes32 data = _planetData(from);\n        uint16 production = _production(data);\n\n        (bool active, uint32 currentNumSpaceships) = _getCurrentNumSpaceships(\n            planet.numSpaceships,\n            planet.lastUpdated,\n            production\n        );\n        require(currentNumSpaceships >= quantity, \"SPACESHIPS_NOT_ENOUGH\");\n\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\n        // record flying fleets (to prevent front-running, see resolution)\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\n        uint256 timeSlot = block.timestamp / (FRONT_RUNNING_DELAY / 2);\n        uint64 flying = _inFlight[from][timeSlot].flying;\n        flying = flying + quantity;\n        require(flying >= quantity, \"OVERFLOW\"); // unlikely to ever happen, would need a hug amount of spaceships to be received and each in turn being sent\n        _inFlight[from][timeSlot].flying = flying;\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\n\n        uint32 launchTime = uint32(block.timestamp); // TODO allow delay : launchTime in future\n        uint32 numSpaceships = currentNumSpaceships - quantity;\n        planet.numSpaceships = _setActiveNumSpaceships(active, numSpaceships);\n        planet.lastUpdated = launchTime;\n\n        uint256 fleetId = uint256(keccak256(abi.encodePacked(toHash, from)));\n        _fleets[fleetId] = Fleet({launchTime: launchTime, owner: owner, quantity: quantity});\n\n        emit FleetSent(owner, from, fleetId, quantity, numSpaceships);\n    }\n\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n    // FLEET RESOLUTION, ATTACK / REINFORCEMENT\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n    struct FleetResult {\n        uint32 inFlightPlanetLoss;\n        uint32 attackerLoss;\n        uint32 defenderLoss;\n        bool won;\n        uint32 numSpaceships;\n    }\n\n    function _resolveFleet(\n        uint256 fleetId,\n        uint256 from,\n        uint256 to,\n        uint256 distance,\n        bytes32 secret\n    ) internal {\n        Fleet memory fleet = _fleets[fleetId];\n        (uint32 quantity, uint32 inFlightFleetLoss) = _checkFleetAndComputeQuantityLeft(\n            fleet,\n            fleetId,\n            from,\n            to,\n            distance,\n            secret\n        );\n        Planet memory toPlanet = _getPlanet(to);\n        emit_fleet_arrived(\n            fleet.owner,\n            fleetId,\n            _hasJustExited(toPlanet.exitTime) ? address(0) : toPlanet.owner,\n            to,\n            _performResolution(fleet, from, toPlanet, to, quantity),\n            inFlightFleetLoss\n        );\n        _fleets[fleetId].quantity = 0; // TODO reset all to get gas refund? // TODO ensure frontend can still easily check fleet status\n    }\n\n    function _performResolution(\n        Fleet memory fleet,\n        uint256 from,\n        Planet memory toPlanet,\n        uint256 to,\n        uint32 quantity\n    ) internal returns (FleetResult memory result) {\n        if (toPlanet.owner == fleet.owner) {\n            return _performReinforcement(fleet.owner, toPlanet, to, quantity);\n        } else {\n            return _performAttack(fleet.owner, from, toPlanet, to, quantity);\n        }\n    }\n\n    function _checkFleetAndComputeQuantityLeft(\n        Fleet memory fleet,\n        uint256 fleetId,\n        uint256 from,\n        uint256 to,\n        uint256 distance,\n        bytes32 secret\n    ) internal returns (uint32 quantity, uint32 inFlightFleetLoss) {\n        require(\n            uint256(keccak256(abi.encodePacked(keccak256(abi.encodePacked(secret, to)), from))) == fleetId,\n            \"INVALID_FLEET_DATA_OR_SECRET'\"\n        );\n\n        quantity = fleet.quantity;\n        require(quantity > 0, \"FLEET_DO_NOT_EXIST\");\n\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\n        // check if fleet was attacked while departing (used to prevent front-running, see fleet sending)\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\n        quantity = _fleet_flying_at_origin(quantity, from, fleet.launchTime);\n        inFlightFleetLoss = fleet.quantity - quantity;\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\n\n        _checkDistance(distance, from, to);\n        _checkTime(distance, from, fleet.launchTime);\n    }\n\n    function emit_fleet_arrived(\n        address fleetOwner,\n        uint256 fleetID,\n        address toOwner,\n        uint256 to,\n        FleetResult memory result,\n        uint32 inFlightFleetLoss\n    ) internal {\n        emit FleetArrived(\n            fleetID,\n            fleetOwner,\n            toOwner,\n            to,\n            result.attackerLoss,\n            result.defenderLoss,\n            inFlightFleetLoss,\n            result.inFlightPlanetLoss,\n            result.won,\n            result.numSpaceships\n        );\n    }\n\n    function _fleet_flying_at_origin(\n        uint32 quantity,\n        uint256 from,\n        uint32 launchTime\n    ) internal returns (uint32) {\n        uint256 timeSlot = launchTime / (FRONT_RUNNING_DELAY / 2);\n        uint64 destroyed = _inFlight[from][timeSlot].destroyed;\n        if (destroyed < quantity) {\n            quantity -= uint32(destroyed);\n            _inFlight[from][timeSlot].destroyed = 0;\n        } else {\n            quantity = 0;\n            _inFlight[from][timeSlot].destroyed = destroyed - quantity;\n        }\n        return quantity;\n    }\n\n    function _performAttack(\n        address attacker,\n        uint256 from,\n        Planet memory toPlanet,\n        uint256 to,\n        uint32 numAttack\n    ) internal returns (FleetResult memory result) {\n        if (toPlanet.lastUpdated == 0) {\n            // Planet was never touched (previous attack could have failed to succeed attack on natives)\n            bytes32 toPlanetData = _planetData(to);\n            return _nativeAttack(attacker, from, to, toPlanetData, numAttack);\n        } else if (_hasJustExited(toPlanet.exitTime)) {\n            return _fleetAfterExit(to, toPlanet.owner, _planets[to], attacker, numAttack);\n        } else {\n            bytes32 toPlanetData = _planetData(to);\n            uint16 attack = _attack(_planetData(from));\n            uint16 defense = _defense(toPlanetData);\n            uint16 production = _production(toPlanetData);\n            return _actualAttack(attacker, attack, defense, toPlanet, to, production, numAttack);\n        }\n    }\n\n    function _fleetAfterExit(\n        uint256 to,\n        address owner,\n        Planet storage planet,\n        address attacker,\n        uint32 numAttack\n    ) internal returns (FleetResult memory result) {\n        _setPlanetAfterExit(to, owner, planet, numAttack > 0 ? attacker : address(0), numAttack);\n        result.numSpaceships = numAttack;\n        result.won = numAttack > 0;\n    }\n\n    function _nativeAttack(\n        address attacker,\n        uint256 from,\n        uint256 to,\n        bytes32 toData,\n        uint32 numAttack\n    ) internal returns (FleetResult memory result) {\n        uint16 attack = _attack(_planetData(from));\n        uint16 defense = _defense(toData);\n        uint16 natives = _natives(toData);\n        (uint32 attackerLoss, uint32 defenderLoss) = _computeFight(numAttack, natives, attack, defense);\n        result.attackerLoss = attackerLoss;\n        if (defenderLoss == natives && numAttack > attackerLoss) {\n            result.numSpaceships = numAttack - attackerLoss;\n            _planets[to].numSpaceships = _setActiveNumSpaceships(false, result.numSpaceships);\n            _planets[to].lastUpdated = uint32(block.timestamp);\n            _planets[to].owner = attacker;\n            result.defenderLoss = defenderLoss;\n            result.won = true;\n        }\n    }\n\n    function _actualAttack(\n        address attacker,\n        uint16 attack,\n        uint16 defense,\n        Planet memory toPlanet,\n        uint256 to,\n        uint16 production,\n        uint32 numAttack\n    ) internal returns (FleetResult memory result) {\n        PreCombatState memory state = _getPlanetPreCombatState(toPlanet, to, production);\n\n        if (state.numDefense == 0 && numAttack > 0) {\n            _planets[to].owner = attacker;\n            _planets[to].exitTime = 0;\n            _planets[to].numSpaceships = _setActiveNumSpaceships(state.active, numAttack);\n            _planets[to].lastUpdated = uint32(block.timestamp);\n            result.won = true;\n            result.numSpaceships = numAttack;\n            return result;\n        }\n\n        return _completeCombatResult(state, attacker, to, numAttack, attack, defense);\n    }\n\n    struct PreCombatState {\n        bool active;\n        uint32 currentNumSpaceships;\n        uint32 numDefense;\n        uint64 flying1;\n        uint64 destroyed1;\n        uint64 flying2;\n        uint64 destroyed2;\n    }\n\n    function _getPlanetPreCombatState(\n        Planet memory toPlanet,\n        uint256 to,\n        uint16 production\n    ) internal view returns (PreCombatState memory state) {\n        (bool active, uint32 currentNumSpaceships) = _getCurrentNumSpaceships(\n            toPlanet.numSpaceships,\n            toPlanet.lastUpdated,\n            production\n        );\n\n        (\n            uint32 numDefense,\n            uint64 flying1,\n            uint64 destroyed1,\n            uint64 flying2,\n            uint64 destroyed2\n        ) = computeDefenseWithInFlightFleets(currentNumSpaceships, to);\n        state.active = active;\n        state.currentNumSpaceships = currentNumSpaceships;\n        state.numDefense = numDefense;\n        state.flying1 = flying1;\n        state.destroyed1 = destroyed1;\n        state.flying2 = flying2;\n        state.destroyed2 = destroyed2;\n    }\n\n    function computeDefenseWithInFlightFleets(uint32 numSpaceships, uint256 to)\n        internal\n        view\n        returns (\n            uint32 numDefense,\n            uint64 flying1,\n            uint64 destroyed1,\n            uint64 flying2,\n            uint64 destroyed2\n        )\n    {\n        numDefense = numSpaceships;\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\n        // consider fleets that just departed from the planet (used to prevent front-running, see fleet sending)\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\n        uint256 timeSlot = block.timestamp / (FRONT_RUNNING_DELAY / 2);\n        flying1 = _inFlight[to][timeSlot - 1].flying;\n        destroyed1 = _inFlight[to][timeSlot - 1].flying;\n        flying2 = _inFlight[to][timeSlot].flying;\n        destroyed2 = _inFlight[to][timeSlot].destroyed;\n        numDefense = uint32(Math.min(flying1 + flying2 + numDefense, 2**32 - 1));\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\n    }\n\n    function _completeCombatResult(\n        PreCombatState memory state,\n        address attacker,\n        uint256 to,\n        uint32 numAttack,\n        uint16 attack,\n        uint16 defense\n    ) internal returns (FleetResult memory result) {\n        (uint32 attackerLoss, uint32 defenderLoss) = _computeFight(numAttack, state.numDefense, attack, defense);\n        result.attackerLoss = attackerLoss;\n        result.defenderLoss = defenderLoss;\n\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\n        // consider fleets that just departed from the planet (used to prevent front-running, see fleet sending)\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\n        if (result.defenderLoss > state.currentNumSpaceships) {\n            result.inFlightPlanetLoss = defenderLoss - state.currentNumSpaceships;\n            result.defenderLoss = state.currentNumSpaceships;\n            if (state.flying1 >= result.inFlightPlanetLoss) {\n                state.flying1 -= result.inFlightPlanetLoss;\n                state.destroyed1 += result.inFlightPlanetLoss;\n            } else {\n                state.destroyed1 += state.flying1;\n                uint64 extra = (result.inFlightPlanetLoss - state.flying1);\n                if (state.flying2 >= extra) {\n                    state.flying2 -= extra;\n                    state.destroyed2 += extra;\n                } else {\n                    state.destroyed2 += state.flying2;\n                    state.flying2 = 0; // should never reach minus but let simply set it to zero\n                }\n                state.flying1 = 0;\n            }\n            _inFlight[to][block.timestamp / (FRONT_RUNNING_DELAY / 2) - 1].flying = state.flying1;\n            _inFlight[to][block.timestamp / (FRONT_RUNNING_DELAY / 2) - 1].destroyed = state.destroyed1;\n            _inFlight[to][block.timestamp / (FRONT_RUNNING_DELAY / 2)].flying = state.flying2;\n            _inFlight[to][block.timestamp / (FRONT_RUNNING_DELAY / 2)].destroyed = state.destroyed2;\n        }\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\n        if (numAttack > 0 && result.defenderLoss == state.currentNumSpaceships) {\n            result.numSpaceships = numAttack - attackerLoss;\n            result.won = true;\n            _planets[to].owner = attacker;\n            _planets[to].exitTime = 0;\n            _planets[to].numSpaceships = _setActiveNumSpaceships(state.active, result.numSpaceships);\n            _planets[to].lastUpdated = uint32(block.timestamp);\n        } else if (result.attackerLoss == numAttack) {\n            result.numSpaceships = state.currentNumSpaceships - defenderLoss;\n            _planets[to].numSpaceships = _setActiveNumSpaceships(state.active, result.numSpaceships);\n            _planets[to].lastUpdated = uint32(block.timestamp);\n        } else {\n            assert(false); // should not happen\n        }\n    }\n\n    function _performReinforcement(\n        address sender,\n        Planet memory toPlanet,\n        uint256 to,\n        uint32 quantity\n    ) internal returns (FleetResult memory result) {\n        if (_hasJustExited(toPlanet.exitTime)) {\n            return _fleetAfterExit(to, toPlanet.owner, _planets[to], quantity > 0 ? sender : address(0), quantity);\n        } else {\n            bytes32 toPlanetData = _planetData(to);\n            uint16 production = _production(toPlanetData);\n            (bool active, uint32 currentNumSpaceships) = _getCurrentNumSpaceships(\n                toPlanet.numSpaceships,\n                toPlanet.lastUpdated,\n                production\n            );\n            uint256 newNumSpaceships = currentNumSpaceships + quantity;\n            if (newNumSpaceships >= ACTIVE_MASK) {\n                newNumSpaceships = ACTIVE_MASK - 1;\n            }\n            _planets[to].numSpaceships = _setActiveNumSpaceships(active, uint32(newNumSpaceships));\n            result.numSpaceships = uint32(newNumSpaceships);\n        }\n    }\n\n    function _computeFight(\n        uint256 numAttack,\n        uint256 numDefense,\n        uint256 attack,\n        uint256 defense\n    ) internal pure returns (uint32 attackerLoss, uint32 defenderLoss) {\n        if (numAttack == 0 || numDefense == 0) {\n            return (0, 0);\n        }\n        uint256 attackPower = (numAttack * attack);\n        uint256 defensePower = (numDefense * defense);\n\n        uint256 numAttackRound = (numDefense * 100000000) / attackPower;\n        if (numAttackRound * attackPower < (numDefense * 100000000)) {\n            numAttackRound++;\n        }\n        uint256 numDefenseRound = (numAttack * 100000000) / defensePower;\n        if (numDefenseRound * defensePower < (numAttack * 100000000)) {\n            numDefenseRound++;\n        }\n\n        uint256 numRound = Math.min(numAttackRound, numDefenseRound);\n        attackerLoss = uint32(Math.min((numRound * defensePower) / 100000000, numAttack));\n        defenderLoss = uint32(Math.min((numRound * attackPower) / 100000000, numDefense));\n    }\n\n    function _checkDistance(\n        uint256 distance,\n        uint256 from,\n        uint256 to\n    ) internal view {\n        (int8 fromSubX, int8 fromSubY) = _subLocation(_planetData(from));\n        (int8 toSubX, int8 toSubY) = _subLocation(_planetData(to));\n        // check input instead of compute sqrt\n        uint256 distanceSquared = uint256( // check input instead of compute sqrt\n            ((int128(to & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) * 4 + toSubX) -\n                (int128(from & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) * 4 + fromSubX)) **\n                2 +\n                ((int128(to >> 128) * 4 + toSubY) - (int128(from >> 128) * 4 + fromSubY))**2\n        );\n        require(distance**2 <= distanceSquared && distanceSquared < (distance + 1)**2, \"wrong distance\");\n    }\n\n    function _checkTime(\n        uint256 distance,\n        uint256 from,\n        uint32 launchTime\n    ) internal view {\n        uint256 reachTime = launchTime + (distance * (_timePerDistance * 10000)) / _speed(_planetData(from));\n        require(block.timestamp >= reachTime, \"too early\");\n        require(block.timestamp < reachTime + _resolveWindow, \"too late, your spaceships are lost in space\");\n    }\n\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n    // PLANET STATS\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n    function _planetData(uint256 location) internal view returns (bytes32) {\n        return keccak256(abi.encodePacked(_genesis, location));\n    }\n\n    function _subLocation(bytes32 data) internal pure returns (int8 subX, int8 subY) {\n        subX = int8(1 - data.value8Mod(0, 3));\n        subY = int8(1 - data.value8Mod(2, 3));\n    }\n\n    // 4,5,5,10,10,15,15, 20, 20, 30,30,40,40,80,80,100\n    bytes32 constant stakeRange = 0x000400050005000A000A000F000F00140014001E001E00280028005000500064;\n\n    function _stake(bytes32 data) internal pure returns (uint16) {\n        // return data.normal16(4, 0x000400050005000A000A000F000F00140014001E001E00280028005000500064);\n        uint8 productionIndex = data.normal8(12); // production affect the stake value\n        uint16 offset = data.normal16(4, 0x0000000100010002000200030003000400040005000500060006000700070008);\n        uint16 stakeIndex = productionIndex + offset;\n        if (stakeIndex < 4) {\n            stakeIndex = 0;\n        } else if (stakeIndex > 19) {\n            stakeIndex = 15;\n        } else {\n            stakeIndex -= 4;\n        }\n        return uint16(uint8(stakeRange[stakeIndex * 2 + 1])); // skip stakeIndex * 2 + 0 as it is always zero in stakeRange\n    }\n\n    function _production(bytes32 data) internal pure returns (uint16) {\n        // TODO TRY : 1800,2100,2400,2700,3000,3300,3600, 3600, 3600, 3600,4000,4400,4800,5400,6200,7200 ?\n\n        // 1800,2100,2400,2700,3000,3300,3600, 3600, 3600, 3600,4200,5400,6600,7800,9000,12000\n        // 0x0708083409600a8c0bb80ce40e100e100e100e101068151819c81e7823282ee0\n        return data.normal16(12, 0x0708083409600a8c0bb80ce40e100e100e100e101068151819c81e7823282ee0); // per hour\n    }\n\n    function _attack(bytes32 data) internal pure returns (uint16) {\n        return 4000 + data.normal8(20) * 400; // 4,000 - 7,000 - 10,000\n    }\n\n    function _defense(bytes32 data) internal pure returns (uint16) {\n        return 4000 + data.normal8(28) * 400; // 4,000 - 7,000 - 10,000\n    }\n\n    function _speed(bytes32 data) internal pure returns (uint16) {\n        return 5005 + data.normal8(36) * 333; // 5,005 - 7,502.5 - 10,000\n    }\n\n    function _natives(bytes32 data) internal pure returns (uint16) {\n        return 15000 + data.normal8(44) * 3000; // 15,000 - 37,500 - 60,000\n    }\n\n    function _exists(bytes32 data) internal pure returns (bool) {\n        return data.value8Mod(52, 16) == 1; // 16 => 36 so : 1 planet per 6 (=24 min unit) square\n        // also:\n        // 20000 average starting numSpaceships (or max?)\n        // speed of min unit = 30 min ( 1 hour per square)\n        // production : 20000 per 6 hours\n        // exit : 3 days ? => 72 distance\n    }\n\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n    // GETTERS\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n    function _getPlanet(uint256 location) internal view returns (Planet storage) {\n        return _planets[location];\n    }\n\n    function _getPlanetStats(uint256 location) internal view returns (PlanetStats memory) {\n        bytes32 data = _planetData(location);\n        require(_exists(data), \"no planet in this location\");\n\n        (int8 subX, int8 subY) = _subLocation(data);\n        return\n            PlanetStats({\n                subX: subX,\n                subY: subY,\n                stake: _stake(data),\n                production: _production(data),\n                attack: _attack(data),\n                defense: _defense(data),\n                speed: _speed(data),\n                natives: _natives(data)\n            });\n    }\n\n    function _getCurrentNumSpaceships(\n        uint32 numSpaceshipsData,\n        uint256 lastUpdated,\n        uint16 production\n    ) internal view returns (bool active, uint32 currentNumSpaceships) {\n        (active, currentNumSpaceships) = _activeNumSpaceships(numSpaceshipsData);\n        if (active) {\n            uint256 timePassed = block.timestamp - lastUpdated;\n            uint256 newSpaceships = uint256(currentNumSpaceships) +\n                (timePassed * uint256(production) * _productionSpeedUp) /\n                1 hours;\n            if (newSpaceships >= ACTIVE_MASK) {\n                newSpaceships = ACTIVE_MASK - 1;\n            }\n            currentNumSpaceships = uint32(newSpaceships);\n        }\n    }\n\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n    // UTILS\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n    function _activeNumSpaceships(uint32 numSpaceshipsData) internal pure returns (bool active, uint32 numSpaceships) {\n        active = (numSpaceshipsData & ACTIVE_MASK) == ACTIVE_MASK;\n        numSpaceships = numSpaceshipsData % (ACTIVE_MASK);\n    }\n\n    function _setActiveNumSpaceships(bool active, uint32 numSpaceships) internal pure returns (uint32) {\n        return uint32((active ? ACTIVE_MASK : 0) + numSpaceships);\n    }\n\n    function _msgSender() internal view returns (address) {\n        return msg.sender; // TODO metatx\n    }\n}\n"
    },
    "src/Libraries/Extraction.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\n\npragma solidity 0.7.5;\n\n// TODO remove\nimport \"hardhat/console.sol\";\n\nlibrary Extraction {\n    function value(\n        bytes32 data,\n        uint8 leastSignificantBit,\n        uint8 size\n    ) internal pure returns (uint256) {\n        return uint256((data >> leastSignificantBit)) % 2**size;\n    }\n\n    function value8Mod(\n        bytes32 data,\n        uint8 leastSignificantBit,\n        uint8 mod\n    ) internal pure returns (uint8) {\n        return uint8(uint256((data >> leastSignificantBit)) % mod);\n    }\n\n    function value8(bytes32 data, uint8 leastSignificantBit) internal pure returns (uint8) {\n        return uint8(uint256((data >> leastSignificantBit)) % 2**8);\n    }\n\n    // 1+1+2+3+4+6+7+8+8+7+6+4+3+2+1+1 // aproximation of normal distribution with mean=7.5 and standard deviation=3 for 16 values\n    bytes32 constant n_m7_5_sd3 = 0x01223334444555555666666677777777888888889999999AAAAAABBBBCCCDDEF;\n\n    function normal8(bytes32 data, uint8 leastSignificantBit) internal pure returns (uint8) {\n        uint8 index = value8Mod(data, leastSignificantBit, 64);\n        uint8 first = index / 2;\n        uint8 second = index % 2;\n        uint8 slot = uint8(n_m7_5_sd3[first]);\n        if (second == 0) {\n            return slot >> 4;\n        } else {\n            return slot % 16;\n        }\n    }\n\n    function normal16(\n        bytes32 data,\n        uint8 leastSignificantBit,\n        bytes32 selection\n    ) internal pure returns (uint16) {\n        uint8 index = normal8(data, leastSignificantBit);\n        return uint16(uint8(selection[index * 2])) * 2**8 + uint16(uint8(selection[index * 2 + 1]));\n    }\n}\n"
    },
    "src/Libraries/Math.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\n\npragma solidity 0.7.5;\n\nlibrary Math {\n    function mul(\n        uint256 a,\n        uint256 b,\n        string memory overflowError\n    ) internal pure returns (uint256 c) {\n        require(b == 0 || a == 0 || ((c = a * b) / b) == a, overflowError);\n    }\n\n    function add(\n        uint256 a,\n        uint256 b,\n        string memory overflowError\n    ) internal pure returns (uint256 c) {\n        require((c = a + b) >= a, overflowError);\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory underflowError\n    ) internal pure returns (uint256 c) {\n        require((c = a - b) <= a, underflowError);\n    }\n\n    function mul18(\n        uint256 a18,\n        uint256 b18,\n        string memory overflowError\n    ) internal pure returns (uint256) {\n        return mul(a18, b18, overflowError) / 10**18;\n    }\n\n    function div18(\n        uint256 a18,\n        uint256 b18,\n        string memory overflowError\n    ) internal pure returns (uint256) {\n        return mul(a18, 10**18, overflowError) / b18;\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a <= b ? a : b;\n    }\n\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function smin(int256 a, int256 b) internal pure returns (int256) {\n        return a <= b ? a : b;\n    }\n\n    function smax(int256 a, int256 b) internal pure returns (int256) {\n        return a >= b ? a : b;\n    }\n\n    function sqrt(uint256 a) internal pure returns (uint256 c) {\n        uint256 tmp = (a + 1) / 2;\n        c = a;\n        while (tmp < c) {\n            c = tmp;\n            tmp = ((a / tmp) + tmp) / 2;\n        }\n    }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "src/PlayToken/l2/PlayL2.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"../../Interfaces/ITokenManager.sol\";\nimport \"../Base.sol\";\nimport \"../WithPermitAndFixedDomain.sol\";\n\ncontract PlayL2 is Base, WithPermitAndFixedDomain {\n    using Address for address;\n\n    address internal _l2Messenger; // TODO proper birdging\n\n    constructor(address l2Messenger) WithPermitAndFixedDomain(\"1\") {\n        postUpgrade(l2Messenger);\n    }\n\n    function postUpgrade(address l2Messenger) public {\n        _l2Messenger = l2Messenger;\n    }\n\n    string public constant symbol = \"ETHERPLAY\"; // TODO rename for l2?\n\n    function name() public pure override returns (string memory) {\n        return \"Etherplay\"; // TODO rename for l2?\n    }\n\n    function fromL1(address to, uint256 amount) external {\n        require(msg.sender == _l2Messenger);\n        _mint(to, amount);\n    }\n\n    // ----------------------------------------------------------------------\n    // TODO remove\n    // ----------------------------------------------------------------------\n    mapping(address => bool) public authorized;\n    bool public requireAuthorization;\n    mapping(address => bool) public touched;\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        require(!requireAuthorization || authorized[from] || authorized[to] || !touched[to], \"NOT_AUTHORIZED_TRANSFER\");\n        super._transfer(from, to, amount);\n        touched[to] = true;\n    }\n\n    function anyNotAuthorized(address[] memory accounts) external view returns (bool) {\n        for (uint256 i = 0; i < accounts.length; i++) {\n            if (!authorized[accounts[i]]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function authorize(address[] memory accounts, bool auth) public {\n        require(msg.sender == _admin(), \"NOT_ADMIN\");\n        for (uint256 i = 0; i < accounts.length; i++) {\n            authorized[accounts[i]] = auth;\n        }\n    }\n\n    function enableRequireAuthorization(address[] calldata accounts) external {\n        require(msg.sender == _admin(), \"NOT_ADMIN\");\n        setRequireAuthorization(true);\n        authorize(accounts, true);\n    }\n\n    function setRequireAuthorization(bool req) public {\n        require(msg.sender == _admin(), \"NOT_ADMIN\");\n        requireAuthorization = req;\n    }\n\n    function _admin() internal view returns (address adminAddress) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            adminAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\n        }\n    }\n    // ----------------------------------------------------------------------\n}\n"
    },
    "src/PlayToken/l2/Reserve.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"../Play.sol\";\nimport \"ethereum-transfer-gateway/src/solc_0.7/BaseERC20TransferRecipient.sol\";\n\ncontract Reserve is BaseERC20TransferRecipient {\n    using SafeERC20 for IERC20;\n\n    Play internal immutable _playToken;\n    IERC20 internal immutable _dai;\n    IERC20 internal immutable _usdc;\n    address internal immutable _owner;\n\n    constructor(\n        Play token,\n        IERC20 dai,\n        IERC20 usdc,\n        address owner,\n        address gateway\n    ) BaseERC20TransferRecipient(gateway) {\n        _playToken = token;\n        _owner = owner;\n        _dai = dai;\n        _usdc = usdc;\n        // TODO pre_approve\n    }\n\n    function approved_payInDAI(\n        uint256 amount,\n        address to,\n        bytes calldata data\n    ) external {\n        _payInViaTransferFrom(msg.sender, _dai, amount, to, data); // TODO decimal compatibility\n    }\n\n    function approved_payInUSDC(\n        uint256 amount,\n        address to,\n        bytes calldata data\n    ) external {\n        _payInViaTransferFrom(msg.sender, _usdc, amount, to, data); // TODO decimal compatibility\n    }\n\n    function payViaGateway(address to, bytes calldata data) external {\n        (address token, uint256 amount, address sender) = _getTokenTransfer(); // TODO import transfer-gateway repo\n        require(IERC20(token) == _dai || IERC20(token) == _usdc, \"INVALID_PAYMENT_TOKEN\");\n        // TODO decimal compatibility\n        _payIn(sender, amount, to, data);\n    }\n\n    function withdraw(\n        IERC20 token,\n        uint256 amount,\n        address to\n    ) external {\n        require(msg.sender == _owner, \"NOT_AUTHORIZED\");\n        token.safeTransfer(to, amount);\n    }\n\n    // ----------------------------------------------------------\n    //                        INTERNALS\n    // ----------------------------------------------------------\n\n    function _payInViaTransferFrom(\n        address payer,\n        IERC20 payToken,\n        uint256 amount,\n        address to,\n        bytes memory data\n    ) internal {\n        payToken.safeTransferFrom(payer, address(this), amount);\n        _payIn(payer, amount, to, data);\n    }\n\n    function _payIn(\n        address payer,\n        uint256 amount,\n        address to,\n        bytes memory data\n    ) internal {\n        if (data.length > 0) {\n            _playToken.payForAndCall(payer, to, amount, data);\n        } else {\n            _playToken.transfer(to, amount);\n        }\n    }\n}\n"
    },
    "ethereum-transfer-gateway/src/solc_0.7/BaseERC20TransferRecipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nabstract contract BaseERC20TransferRecipient {\n    address internal immutable _erc20TransferGateway;\n\n    constructor(address erc20TransferGateway) {\n        _erc20TransferGateway = erc20TransferGateway;\n    }\n\n    function _getTokenTransfer()\n        internal\n        view\n        returns (\n            address token,\n            uint256 amount,\n            address sender\n        )\n    {\n        sender = msg.sender;\n        if (sender == _erc20TransferGateway) {\n            return _extractTokenTransfer(msg.data);\n        }\n    }\n\n    function _extractTokenTransfer(bytes memory data)\n        internal\n        pure\n        returns (\n            address token,\n            uint256 amount,\n            address sender\n        )\n    {\n        uint256 length = data.length;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sender := mload(sub(add(data, length), 0x0))\n            amount := mload(sub(add(data, length), 0x20))\n            token := mload(sub(add(data, length), 0x40))\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}