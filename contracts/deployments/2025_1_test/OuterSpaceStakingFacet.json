{
  "address": "0xf504D457e41904c8b1309327e3C2AEfa24EC0541",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract StakingToken",
              "name": "stakingToken",
              "type": "address"
            },
            {
              "internalType": "contract IFreePlayToken",
              "name": "freeStakingToken",
              "type": "address"
            },
            {
              "internalType": "contract AllianceRegistry",
              "name": "allianceRegistry",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "genesis",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "resolveWindow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timePerDistance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exitDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "acquireNumSpaceships",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "productionSpeedUp",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "frontrunningDelay",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "productionCapAsDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upkeepProductionDecreaseRatePer10000th",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fleetSizeFactor6",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "initialSpaceExpansion",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "expansionDelta",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "giftTaxPer10000",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "stakeRange",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "stakeMultiplier10000th",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bootstrapSessionEndTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "infinityStartTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct OuterSpaceFacetBase.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "block",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "BlockTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        }
      ],
      "name": "ExitComplete",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fleet",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fleetOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "destinationOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "destination",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "gift",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "won",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "newNumspaceships",
              "type": "uint32"
            },
            {
              "internalType": "int40",
              "name": "newTravelingUpkeep",
              "type": "int40"
            },
            {
              "internalType": "uint32",
              "name": "newOverflow",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "numSpaceshipsAtArrival",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "taxLoss",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "fleetLoss",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "planetLoss",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "inFlightFleetLoss",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "inFlightPlanetLoss",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "accumulatedDefenseAdded",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "accumulatedAttackAdded",
              "type": "uint32"
            }
          ],
          "indexed": false,
          "internalType": "struct ImportingOuterSpaceEvents.ArrivalData",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "FleetArrived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fleetSender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fleetOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fleet",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "quantity",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newNumSpaceships",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "int40",
          "name": "newTravelingUpkeep",
          "type": "int40"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newOverflow",
          "type": "uint32"
        }
      ],
      "name": "FleetSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newGeneratorAdmin",
          "type": "address"
        }
      ],
      "name": "GeneratorAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newGenerator",
          "type": "address"
        }
      ],
      "name": "GeneratorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "genesis",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "resolveWindow",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timePerDistance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exitDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "acquireNumSpaceships",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "productionSpeedUp",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "frontrunningDelay",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "productionCapAsDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "upkeepProductionDecreaseRatePer10000th",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fleetSizeFactor6",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "initialSpaceExpansion",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "expansionDelta",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "giftTaxPer10000",
          "type": "uint256"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        }
      ],
      "name": "PlanetExit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        }
      ],
      "name": "PlanetReset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "acquirer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "numSpaceships",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "int40",
          "name": "travelingUpkeep",
          "type": "int40"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "overflow",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "freegift",
          "type": "bool"
        }
      ],
      "name": "PlanetStake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newNumspaceships",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "int40",
          "name": "newTravelingUpkeep",
          "type": "int40"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newOverflow",
          "type": "uint32"
        }
      ],
      "name": "PlanetTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "giver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardId",
          "type": "uint256"
        }
      ],
      "name": "RewardSetup",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "rewardId",
          "type": "uint256"
        }
      ],
      "name": "RewardToWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "freegift",
          "type": "bool"
        }
      ],
      "name": "StakeToWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "origin",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fleet",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newNumspaceships",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "int40",
          "name": "newTravelingUpkeep",
          "type": "int40"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newOverflow",
          "type": "uint32"
        }
      ],
      "name": "TravelingUpkeepRefund",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "locations",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "amountToMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "acquireMultipleViaNativeTokenAndStakingToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "acquireViaFreeTokenTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountToMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "acquireViaNativeTokenAndStakingToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "acquireViaTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceToWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        }
      ],
      "name": "exitFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "locations",
          "type": "uint256[]"
        }
      ],
      "name": "exitMultipleFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "locations",
          "type": "uint256[]"
        }
      ],
      "name": "fetchAndWithdrawFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "forAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onTokenPaidFor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onTokenTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdrawFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x267b23f0ff482fe9fa06ac1b756d60cb68ff953eee455a5aab230831f595e445",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xbE19B59E8C588d68f475A407C7BA5fE813AEb792",
    "contractAddress": null,
    "transactionIndex": 10,
    "gasUsed": "3912482",
    "logsBloom": "0x
    "blockHash": "0x761e37ec369de6f60e854a16b3430c892e742b5a56403145899ce172b0810d7e",
    "transactionHash": "0x267b23f0ff482fe9fa06ac1b756d60cb68ff953eee455a5aab230831f595e445",
    "logs": [],
    "blockNumber": 38289883,
    "cumulativeGasUsed": "5466832",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "stakingToken": "0x1874F6326eEbcCe664410a93a5217741a977D14A",
      "freeStakingToken": "0x8d82B1900bc77fACdf6f2209869E4f816E4fbcB2",
      "allianceRegistry": "0x7E254360C1b9f0c1903dcb6800eEED2500504940",
      "genesis": "0x2E8844C4BE4BB08968BF024167442FF346C1277CFA814ADCE21207B6A4BCD005",
      "resolveWindow": 1728,
      "timePerDistance": 72,
      "exitDuration": 2592,
      "acquireNumSpaceships": 100000,
      "productionSpeedUp": 100,
      "frontrunningDelay": 18,
      "productionCapAsDuration": 259200,
      "upkeepProductionDecreaseRatePer10000th": 5000,
      "fleetSizeFactor6": 500000,
      "initialSpaceExpansion": 12,
      "expansionDelta": 6,
      "giftTaxPer10000": 2000,
      "stakeRange": "0x0064008200aa00c800f0010e012c014a014a017201900212029e032003a204b0",
      "stakeMultiplier10000th": 100,
      "bootstrapSessionEndTime": 1738162800,
      "infinityStartTime": 1738164600
    }
  ],
  "numDeployments": 4,
  "linkedData": {
    "genesisHash": "0x2E8844C4BE4BB08968BF024167442FF346C1277CFA814ADCE21207B6A4BCD005",
    "resolveWindow": 1728,
    "timePerDistance": 72,
    "exitDuration": 2592,
    "acquireNumSpaceships": 100000,
    "productionSpeedUp": 100,
    "chainGenesisHash": "",
    "frontrunningDelay": 18,
    "productionCapAsDuration": 259200,
    "upkeepProductionDecreaseRatePer10000th": 5000,
    "fleetSizeFactor6": 500000,
    "initialSpaceExpansion": 12,
    "expansionDelta": 6,
    "giftTaxPer10000": 2000,
    "stakeRange": "0x0064008200aa00c800f0010e012c014a014a017201900212029e032003a204b0",
    "stakeMultiplier10000th": 100,
    "bootstrapSessionEndTime": 1738162800,
    "infinityStartTime": 1738164600,
    "deploymentTimestamp": 1738078599
  },
  "solcInputHash": "02282026b82788901280a3e7fe160df8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"contract StakingToken\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"contract IFreePlayToken\",\"name\":\"freeStakingToken\",\"type\":\"address\"},{\"internalType\":\"contract AllianceRegistry\",\"name\":\"allianceRegistry\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"genesis\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"resolveWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timePerDistance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exitDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"acquireNumSpaceships\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"productionSpeedUp\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"frontrunningDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productionCapAsDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upkeepProductionDecreaseRatePer10000th\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fleetSizeFactor6\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"initialSpaceExpansion\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expansionDelta\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"giftTaxPer10000\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"stakeRange\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"stakeMultiplier10000th\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bootstrapSessionEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"infinityStartTime\",\"type\":\"uint256\"}],\"internalType\":\"struct OuterSpaceFacetBase.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BlockTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"ExitComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fleet\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fleetOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destinationOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destination\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"gift\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"newNumspaceships\",\"type\":\"uint32\"},{\"internalType\":\"int40\",\"name\":\"newTravelingUpkeep\",\"type\":\"int40\"},{\"internalType\":\"uint32\",\"name\":\"newOverflow\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numSpaceshipsAtArrival\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"taxLoss\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fleetLoss\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"planetLoss\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"inFlightFleetLoss\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"inFlightPlanetLoss\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"accumulatedDefenseAdded\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"accumulatedAttackAdded\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct ImportingOuterSpaceEvents.ArrivalData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"FleetArrived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fleetSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fleetOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fleet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"quantity\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newNumSpaceships\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int40\",\"name\":\"newTravelingUpkeep\",\"type\":\"int40\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newOverflow\",\"type\":\"uint32\"}],\"name\":\"FleetSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGeneratorAdmin\",\"type\":\"address\"}],\"name\":\"GeneratorAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGenerator\",\"type\":\"address\"}],\"name\":\"GeneratorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"genesis\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"resolveWindow\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timePerDistance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"acquireNumSpaceships\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"productionSpeedUp\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"frontrunningDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"productionCapAsDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upkeepProductionDecreaseRatePer10000th\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fleetSizeFactor6\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"initialSpaceExpansion\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"expansionDelta\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"giftTaxPer10000\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"}],\"name\":\"PlanetExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"}],\"name\":\"PlanetReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"acquirer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numSpaceships\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int40\",\"name\":\"travelingUpkeep\",\"type\":\"int40\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"overflow\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"freegift\",\"type\":\"bool\"}],\"name\":\"PlanetStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newNumspaceships\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int40\",\"name\":\"newTravelingUpkeep\",\"type\":\"int40\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newOverflow\",\"type\":\"uint32\"}],\"name\":\"PlanetTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"giver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"}],\"name\":\"RewardSetup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"}],\"name\":\"RewardToWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"freegift\",\"type\":\"bool\"}],\"name\":\"StakeToWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"origin\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fleet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newNumspaceships\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int40\",\"name\":\"newTravelingUpkeep\",\"type\":\"int40\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newOverflow\",\"type\":\"uint32\"}],\"name\":\"TravelingUpkeepRefund\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"locations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amountToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"acquireMultipleViaNativeTokenAndStakingToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"acquireViaFreeTokenTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"acquireViaNativeTokenAndStakingToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"acquireViaTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"}],\"name\":\"exitFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"locations\",\"type\":\"uint256[]\"}],\"name\":\"exitMultipleFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"locations\",\"type\":\"uint256[]\"}],\"name\":\"fetchAndWithdrawFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onTokenPaidFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdrawFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/outerspace/facets/OuterSpaceStakingFacet.sol\":\"OuterSpaceStakingFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaceeafeeaf0d200ca3942d8bf14c1c4f787a77f79cc87c08bb668e65acdee29\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"},\"src/alliances/AllianceRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\\\";\\nimport \\\"../interfaces/IAlliance.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract AllianceRegistry is Proxied {\\n    using ECDSA for bytes32;\\n\\n    uint8 internal constant MAX_NUM_ALLIANCES = 4;\\n\\n    mapping(address => mapping(IAlliance => uint256)) internal _allianceNonces;\\n    struct AllianceRow {\\n        IAlliance alliance;\\n        uint96 joinTime;\\n    }\\n    struct Alliances {\\n        AllianceRow alliance0;\\n        AllianceRow alliance1;\\n        AllianceRow alliance2;\\n        AllianceRow alliance3;\\n    }\\n    mapping(address => Alliances) internal _alliances;\\n\\n    event AllianceLink(IAlliance indexed alliance, address indexed player, bool joining);\\n\\n    function getAllianceDataAtSlot(address player, uint8 slot)\\n        external\\n        view\\n        returns (\\n            IAlliance alliance,\\n            uint96 joinTime,\\n            uint256 nonce\\n        )\\n    {\\n        Alliances storage alliances = _alliances[player];\\n        if (slot == 0) {\\n            alliance = alliances.alliance0.alliance;\\n            joinTime = alliances.alliance0.joinTime;\\n        } else if (slot == 1) {\\n            alliance = alliances.alliance1.alliance;\\n            joinTime = alliances.alliance1.joinTime;\\n        } else if (slot == 2) {\\n            alliance = alliances.alliance2.alliance;\\n            joinTime = alliances.alliance2.joinTime;\\n        } else if (slot == 3) {\\n            alliance = alliances.alliance3.alliance;\\n            joinTime = alliances.alliance3.joinTime;\\n        }\\n\\n        nonce = _allianceNonces[player][alliance];\\n    }\\n\\n    function getAllianceData(address player, IAlliance alliance) public view returns (uint96 joinTime, uint256 nonce) {\\n        nonce = _allianceNonces[player][alliance];\\n\\n        Alliances storage alliances = _alliances[player];\\n        if (alliances.alliance0.alliance == alliance) {\\n            joinTime = alliances.alliance0.joinTime;\\n        } else if (alliances.alliance1.alliance == alliance) {\\n            joinTime = alliances.alliance1.joinTime;\\n        } else if (alliances.alliance2.alliance == alliance) {\\n            joinTime = alliances.alliance2.joinTime;\\n        } else if (alliances.alliance3.alliance == alliance) {\\n            joinTime = alliances.alliance3.joinTime;\\n        }\\n    }\\n\\n    function havePlayersAnAllianceInCommon(\\n        address player1,\\n        address player2,\\n        uint256 timestamp\\n    ) external view returns (IAlliance alliance, uint96 joinTime) {\\n        Alliances storage p1Alliances = _alliances[player1];\\n        Alliances storage p2Alliances = _alliances[player2];\\n\\n        AllianceRow[4] memory player1Alliances;\\n        AllianceRow[4] memory player2Alliances;\\n        uint256 num1 = 0;\\n        uint256 num2 = 0;\\n\\n        for (uint256 i = 0; i < 4; i++) {\\n            if (i == num1) {\\n                AllianceRow memory allianceRow;\\n                if (i == 0) {\\n                    allianceRow = p1Alliances.alliance0;\\n                } else if (i == 1) {\\n                    allianceRow = p1Alliances.alliance1;\\n                } else if (i == 2) {\\n                    allianceRow = p1Alliances.alliance2;\\n                } else if (i == 3) {\\n                    allianceRow = p1Alliances.alliance3;\\n                }\\n                if (address(allianceRow.alliance) == address(0)) {\\n                    // console.log(\\\"p1 exhausted\\\");\\n                    return (alliance, joinTime); // the alliance leave ensure that there is no gap // TODO\\n                }\\n                player1Alliances[num1++] = allianceRow;\\n            }\\n            for (uint256 j = 0; j < 4; j++) {\\n                if (j == num2) {\\n                    AllianceRow memory allianceRow;\\n                    if (j == 0) {\\n                        allianceRow = p2Alliances.alliance0;\\n                    } else if (j == 1) {\\n                        allianceRow = p2Alliances.alliance1;\\n                    } else if (j == 2) {\\n                        allianceRow = p2Alliances.alliance2;\\n                    } else if (j == 3) {\\n                        allianceRow = p2Alliances.alliance3;\\n                    }\\n                    if (address(allianceRow.alliance) == address(0)) {\\n                        // console.log(\\\"p2 exhausted\\\");\\n                        // return (alliance, joinTime); // the alliance leave ensure that there is no gap // TODO\\n                        break;\\n                    }\\n                    player2Alliances[num2++] = allianceRow;\\n                }\\n\\n                if (player1Alliances[i].alliance == player2Alliances[j].alliance) {\\n                    if (player1Alliances[i].joinTime >= player2Alliances[j].joinTime) {\\n                        if (player1Alliances[i].joinTime < timestamp) {\\n                            return (player1Alliances[i].alliance, player1Alliances[i].joinTime);\\n                        } else {\\n                            // TODO check greater ?\\n                            alliance = player1Alliances[i].alliance;\\n                            joinTime = player1Alliances[i].joinTime;\\n                        }\\n                    } else {\\n                        if (player2Alliances[j].joinTime < timestamp) {\\n                            return (player2Alliances[j].alliance, player2Alliances[j].joinTime);\\n                        } else {\\n                            // TODO check greater ?\\n                            alliance = player2Alliances[j].alliance;\\n                            joinTime = player2Alliances[j].joinTime;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        // console.log(address(alliance));\\n        // console.log(joinTime);\\n    }\\n\\n    // -----------------------------------------------------------------------------------------------------\\n    // FROM PLAYER\\n    // -----------------------------------------------------------------------------------------------------\\n\\n    function joinAlliance(IAlliance alliance, bytes calldata data) external returns (bool joined) {\\n        Alliances storage alliances = _alliances[msg.sender];\\n        uint256 slot = 0;\\n        if (address(alliances.alliance0.alliance) != address(0)) {\\n            slot++;\\n        }\\n        if (address(alliances.alliance1.alliance) != address(0)) {\\n            slot++;\\n        }\\n        if (address(alliances.alliance2.alliance) != address(0)) {\\n            slot++;\\n        }\\n        require(address(alliances.alliance3.alliance) == address(0), \\\"MAX_NUM_ALLIANCES_REACHED\\\");\\n\\n        joined = alliance.requestToJoin(msg.sender, data);\\n        if (joined) {\\n            if (slot == 0) {\\n                alliances.alliance0.alliance = alliance;\\n                alliances.alliance0.joinTime = uint96(block.timestamp);\\n            } else if (slot == 1) {\\n                alliances.alliance1.alliance = alliance;\\n                alliances.alliance1.joinTime = uint96(block.timestamp);\\n            } else if (slot == 2) {\\n                alliances.alliance2.alliance = alliance;\\n                alliances.alliance2.joinTime = uint96(block.timestamp);\\n            } else if (slot == 3) {\\n                alliances.alliance3.alliance = alliance;\\n                alliances.alliance3.joinTime = uint96(block.timestamp);\\n            }\\n\\n            emit AllianceLink(alliance, msg.sender, true);\\n        }\\n    }\\n\\n    function leaveAlliance(IAlliance alliance) external {\\n        _leaveAlliance(msg.sender, alliance);\\n        try alliance.playerHasLeft(msg.sender) {} catch {}\\n        // TODO ensure callback not failed due to low gas (1/64 rule)\\n    }\\n\\n    // -----------------------------------------------------------------------------------------------------\\n    // FROM ALLIANCE\\n    // -----------------------------------------------------------------------------------------------------\\n\\n    function addPlayerToAlliance(\\n        address player,\\n        uint32 nonce,\\n        bytes calldata signature\\n    ) external {\\n        _addPlayerToAlliance(player, nonce, signature);\\n    }\\n\\n    struct PlayerSubmission {\\n        address addr;\\n        uint32 nonce;\\n        bytes signature;\\n    }\\n\\n    function addMultiplePlayersToAlliance(PlayerSubmission[] calldata playerSubmissions) external {\\n        for (uint256 i = 0; i < playerSubmissions.length; i++) {\\n            _addPlayerToAlliance(playerSubmissions[i].addr, playerSubmissions[i].nonce, playerSubmissions[i].signature);\\n        }\\n    }\\n\\n    function ejectPlayerFromAlliance(address player) external {\\n        _leaveAlliance(player, IAlliance(msg.sender));\\n    }\\n\\n    // -----------------------------------------------------------------------------------------------------\\n    // INTERNAL\\n    // -----------------------------------------------------------------------------------------------------\\n\\n    function _addPlayerToAlliance(\\n        address player,\\n        uint32 nonce,\\n        bytes calldata signature\\n    ) internal {\\n        IAlliance alliance = IAlliance(msg.sender);\\n\\n        Alliances storage alliances = _alliances[player];\\n        uint256 slot = 0;\\n        if (address(alliances.alliance0.alliance) != address(0)) {\\n            require(alliances.alliance0.alliance != alliance, \\\"ALREADY_JOINED\\\");\\n            slot++;\\n        }\\n        if (address(alliances.alliance1.alliance) != address(0)) {\\n            require(alliances.alliance1.alliance != alliance, \\\"ALREADY_JOINED\\\");\\n            slot++;\\n        }\\n        if (address(alliances.alliance2.alliance) != address(0)) {\\n            require(alliances.alliance2.alliance != alliance, \\\"ALREADY_JOINED\\\");\\n            slot++;\\n        }\\n        require(alliances.alliance3.alliance != alliance, \\\"ALREADY_JOINED\\\");\\n        require(address(alliances.alliance3.alliance) == address(0), \\\"MAX_NUM_ALLIANCES_REACHED\\\");\\n\\n        uint256 currentNonce = _allianceNonces[player][alliance];\\n        require(currentNonce == nonce, \\\"INVALID_NONCE\\\");\\n\\n        bytes memory message;\\n        if (nonce == 0) {\\n            message = abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n56\\\",\\n                \\\"Join Alliance 0x0000000000000000000000000000000000000000\\\"\\n            );\\n            _writeUintAsHex(message, 28 + 55, uint160(msg.sender));\\n        } else {\\n            message = abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n76\\\",\\n                \\\"Join Alliance 0x0000000000000000000000000000000000000000 (nonce:          0)\\\"\\n            );\\n            _writeUintAsHex(message, 28 + 55, uint160(msg.sender));\\n            _writeUintAsDecimal(message, 28 + 74, nonce);\\n        }\\n\\n        // console.log(string(message));\\n\\n        bytes32 digest = keccak256(message);\\n\\n        address signer = digest.recover(signature);\\n        require(player == signer, \\\"INVALID_SIGNATURE\\\");\\n\\n        if (slot == 0) {\\n            alliances.alliance0.alliance = alliance;\\n            alliances.alliance0.joinTime = uint96(block.timestamp);\\n        } else if (slot == 1) {\\n            alliances.alliance1.alliance = alliance;\\n            alliances.alliance1.joinTime = uint96(block.timestamp);\\n        } else if (slot == 2) {\\n            alliances.alliance2.alliance = alliance;\\n            alliances.alliance2.joinTime = uint96(block.timestamp);\\n        } else if (slot == 3) {\\n            alliances.alliance3.alliance = alliance;\\n            alliances.alliance3.joinTime = uint96(block.timestamp);\\n        }\\n        _allianceNonces[player][alliance] = nonce + 1;\\n\\n        emit AllianceLink(alliance, player, true);\\n\\n        _checkERC1155AndCallSafeTransfer(msg.sender, address(0), player, uint256(uint160(address(alliance))), 1);\\n        emit TransferSingle(msg.sender, address(0), player, uint256(uint160(address(alliance))), 1);\\n    }\\n\\n    bytes internal constant hexAlphabet = \\\"0123456789abcdef\\\";\\n    bytes internal constant decimalAlphabet = \\\"0123456789\\\";\\n\\n    function _writeUintAsHex(\\n        bytes memory data,\\n        uint256 endPos,\\n        uint256 num\\n    ) internal pure {\\n        while (num != 0) {\\n            data[endPos--] = bytes1(hexAlphabet[num % 16]);\\n            num /= 16;\\n        }\\n    }\\n\\n    function _writeUintAsDecimal(\\n        bytes memory data,\\n        uint256 endPos,\\n        uint256 num\\n    ) internal pure {\\n        while (num != 0) {\\n            data[endPos--] = bytes1(decimalAlphabet[num % 10]);\\n            num /= 10;\\n        }\\n    }\\n\\n    function _leaveAlliance(address player, IAlliance alliance) internal {\\n        Alliances storage alliances = _alliances[player];\\n\\n        IAlliance lastSlotAlliance;\\n        uint96 lastSlotJoinTime;\\n\\n        require(address(alliances.alliance0.alliance) != address(0), \\\"NOT_PART_OF_ANY_ALLIANCE\\\");\\n\\n        if (address(alliances.alliance1.alliance) == address(0)) {\\n            lastSlotAlliance = alliances.alliance0.alliance;\\n            lastSlotJoinTime = alliances.alliance0.joinTime;\\n            alliances.alliance0.alliance = IAlliance(address(0));\\n            alliances.alliance0.joinTime = 0;\\n        } else {\\n            if (address(alliances.alliance2.alliance) == address(0)) {\\n                lastSlotAlliance = alliances.alliance1.alliance;\\n                lastSlotJoinTime = alliances.alliance1.joinTime;\\n                alliances.alliance1.alliance = IAlliance(address(0));\\n                alliances.alliance1.joinTime = 0;\\n            } else {\\n                if (address(alliances.alliance3.alliance) == address(0)) {\\n                    lastSlotAlliance = alliances.alliance2.alliance;\\n                    lastSlotJoinTime = alliances.alliance2.joinTime;\\n                    alliances.alliance2.alliance = IAlliance(address(0));\\n                    alliances.alliance2.joinTime = 0;\\n                } else {\\n                    lastSlotAlliance = alliances.alliance3.alliance;\\n                    lastSlotJoinTime = alliances.alliance3.joinTime;\\n                    alliances.alliance3.alliance = IAlliance(address(0));\\n                    alliances.alliance3.joinTime = 0;\\n                }\\n            }\\n        }\\n\\n        if (alliance != lastSlotAlliance) {\\n            if (alliances.alliance0.alliance == alliance) {\\n                alliances.alliance0.alliance = lastSlotAlliance;\\n                alliances.alliance0.joinTime = lastSlotJoinTime;\\n            } else if (alliances.alliance1.alliance == alliance) {\\n                alliances.alliance1.alliance = lastSlotAlliance;\\n                alliances.alliance1.joinTime = lastSlotJoinTime;\\n            } else if (alliances.alliance2.alliance == alliance) {\\n                alliances.alliance2.alliance = lastSlotAlliance;\\n                alliances.alliance2.joinTime = lastSlotJoinTime;\\n            } else {\\n                revert(\\\"NOT_PART_OF_THE_ALLIANCE\\\");\\n            }\\n        }\\n\\n        emit AllianceLink(alliance, player, false);\\n        emit TransferSingle(msg.sender, player, address(0), uint256(uint160(address(alliance))), 1);\\n    }\\n\\n    function _msgSender() internal view returns (address) {\\n        return msg.sender; // TODO metatx\\n    }\\n\\n    // ---------------------------------------------------------------------\\n    // Support For ERC-1155\\n    // ---------------------------------------------------------------------\\n\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    function balanceOf(address owner, uint256 id) external view returns (uint256 balance) {\\n        require(id == uint160(id), \\\"INVALID_ID\\\");\\n        (uint96 joinTime, ) = getAllianceData(owner, IAlliance(address(uint160(id))));\\n        if (joinTime > 0) {\\n            return 1;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory balances)\\n    {\\n        balances = new uint256[](owners.length);\\n        for (uint256 i = 0; i < owners.length; i++) {\\n            require(ids[i] == uint160(ids[i]), \\\"INVALID_ID\\\");\\n            (uint96 joinTime, ) = getAllianceData(owners[i], IAlliance(address(uint160(ids[i]))));\\n            if (joinTime > 0) {\\n                balances[i] = 1;\\n            } else {\\n                balances[i] = 0;\\n            }\\n        }\\n    }\\n\\n    function isApprovedForAll(address, address) external pure returns (bool) {\\n        return false;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool) {\\n        return interfaceID == 0xd9b67a26 || interfaceID == 0x01ffc9a7;\\n    }\\n\\n    function _checkERC1155AndCallSafeTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value\\n    ) internal returns (bool) {\\n        if (!Address.isContract(to)) {\\n            return true;\\n        }\\n\\n        return ERC1155TokenReceiver(to).onERC1155Received(operator, from, id, value, \\\"\\\") == 0xf23a6e61;\\n    }\\n}\\n\\ninterface ERC1155TokenReceiver {\\n    function onERC1155Received(\\n        address _operator,\\n        address _from,\\n        uint256 _id,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x15b20d9532d077a0ebb513370a71601a569f277bce663e93c090565882c9e1bb\",\"license\":\"AGPL-3.0\"},\"src/conquest_token/IFreePlayToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IFreePlayToken is IERC20 {\\n    function mintViaNativeToken(address to, uint256 amount) external payable;\\n\\n    function mintViaNativeTokenPlusSendExtraNativeTokens(address payable to, uint256 amount) external payable;\\n\\n    function mintMultipleViaNativeTokenPlusSendExtraNativeTokens(\\n        address payable[] calldata tos,\\n        uint256[] calldata amounts,\\n        uint256[] calldata nativeTokenAmounts\\n    ) external payable;\\n\\n    function mint(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function burn(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    struct BurnFrom {\\n        address from;\\n        uint256 amount;\\n    }\\n\\n    function burnMultiple(BurnFrom[] calldata list, address to) external;\\n}\\n\",\"keccak256\":\"0x873abb11be35fec3bbe377aea68dfdcccc180058c7a7d268f3ed4f47dfaa04e2\",\"license\":\"AGPL-3.0\"},\"src/interfaces/IAlliance.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\ninterface IAlliance {\\n    function requestToJoin(address player, bytes calldata data) external returns (bool);\\n\\n    function playerHasLeft(address player) external;\\n}\\n\",\"keccak256\":\"0x56331cf35f0c52161d22a1094809e4e55b6be6dff3f7c18a3070b325e1afced8\",\"license\":\"AGPL-3.0\"},\"src/libraries/Extraction.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\n// TODO remove\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary Extraction {\\n    function value(\\n        bytes32 data,\\n        uint8 leastSignificantBit,\\n        uint8 size\\n    ) internal pure returns (uint256) {\\n        return uint256((data >> leastSignificantBit)) % 2**size;\\n    }\\n\\n    function value8Mod(\\n        bytes32 data,\\n        uint8 leastSignificantBit,\\n        uint8 mod\\n    ) internal pure returns (uint8) {\\n        return uint8(uint256((data >> leastSignificantBit)) % mod);\\n    }\\n\\n    function value8(bytes32 data, uint8 leastSignificantBit) internal pure returns (uint8) {\\n        return uint8(uint256((data >> leastSignificantBit)) % 2**8);\\n    }\\n\\n    // 1+1+2+3+4+6+7+8+8+7+6+4+3+2+1+1 // aproximation of normal distribution with mean=7.5 and standard deviation=3 for 16 values\\n    bytes32 constant n_m7_5_sd3 = 0x01223334444555555666666677777777888888889999999AAAAAABBBBCCCDDEF;\\n\\n    function normal8(bytes32 data, uint8 leastSignificantBit) internal pure returns (uint8) {\\n        uint8 index = value8Mod(data, leastSignificantBit, 64);\\n        uint8 first = index / 2;\\n        uint8 second = index % 2;\\n        uint8 slot = uint8(n_m7_5_sd3[first]);\\n        if (second == 0) {\\n            return slot >> 4;\\n        } else {\\n            return slot % 16;\\n        }\\n    }\\n\\n    function normal16(\\n        bytes32 data,\\n        uint8 leastSignificantBit,\\n        bytes32 selection\\n    ) internal pure returns (uint16) {\\n        uint8 index = normal8(data, leastSignificantBit);\\n        return uint16(uint8(selection[index * 2])) * 2**8 + uint16(uint8(selection[index * 2 + 1]));\\n    }\\n}\\n\",\"keccak256\":\"0x4264ffbd03c4be49f317ed019abbe0594051606df36e7a707d74456b49130c86\",\"license\":\"AGPL-3.0\"},\"src/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nlibrary Math {\\n    function mul(\\n        uint256 a,\\n        uint256 b,\\n        string memory overflowError\\n    ) internal pure returns (uint256 c) {\\n        require(b == 0 || a == 0 || ((c = a * b) / b) == a, overflowError);\\n    }\\n\\n    function add(\\n        uint256 a,\\n        uint256 b,\\n        string memory overflowError\\n    ) internal pure returns (uint256 c) {\\n        require((c = a + b) >= a, overflowError);\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory underflowError\\n    ) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, underflowError);\\n    }\\n\\n    function mul18(\\n        uint256 a18,\\n        uint256 b18,\\n        string memory overflowError\\n    ) internal pure returns (uint256) {\\n        return mul(a18, b18, overflowError) / 10**18;\\n    }\\n\\n    function div18(\\n        uint256 a18,\\n        uint256 b18,\\n        string memory overflowError\\n    ) internal pure returns (uint256) {\\n        return mul(a18, 10**18, overflowError) / b18;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a <= b ? a : b;\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function smin(int256 a, int256 b) internal pure returns (int256) {\\n        return a <= b ? a : b;\\n    }\\n\\n    function smax(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function sqrt(uint256 a) internal pure returns (uint256 c) {\\n        uint256 tmp = (a + 1) / 2;\\n        c = a;\\n        while (tmp < c) {\\n            c = tmp;\\n            tmp = ((a / tmp) + tmp) / 2;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2d7dff3199295e64e0b6361f8533fb093bfdbd6a60154cadd1d4f6619281260\",\"license\":\"AGPL-3.0\"},\"src/outerspace/base/ImportingOuterSpaceConstants.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\ncontract ImportingOuterSpaceConstants {\\n    uint256 internal constant DECIMALS_18 = 1e18;\\n    uint256 internal constant DECIMALS_14 = 1e14;\\n    uint32 internal constant ACTIVE_MASK = 2**31;\\n    int256 internal constant UINT32_MAX = 2**32 - 1;\\n    int256 internal constant UINT32_MIN = -2147483648;\\n}\\n\",\"keccak256\":\"0x3b5937f8eb83cb02cdffc9935c6ae11a890489aaf80c1bf447295bf28c909e38\",\"license\":\"AGPL-3.0\"},\"src/outerspace/base/UsingOuterSpaceDataLayout.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"../types/ImportingOuterSpaceTypes.sol\\\";\\n\\ncontract UsingOuterSpaceDataLayout is ImportingOuterSpaceTypes {\\n    mapping(uint256 => Planet) internal _planets;\\n    mapping(uint256 => Fleet) internal _fleets;\\n\\n    mapping(address => uint256) internal _stakeReadyToBeWithdrawn;\\n\\n    mapping(address => mapping(address => bool)) internal _operators;\\n\\n    // Note: make it namespaces per user, currently it is possible (though unlikely) for 2 users to share a slot if one attack another and quickly send away spaceships\\n    mapping(uint256 => mapping(uint256 => InFlight)) internal _inFlight;\\n\\n    Discovered internal _discovered;\\n    // rewards\\n    mapping(address => uint256) internal _prevRewardIds;\\n    mapping(uint256 => uint256) internal _rewards;\\n    mapping(address => mapping(uint256 => bool)) internal _rewardsToWithdraw;\\n\\n    // This adds 20,000 gas to all resolution\\n    mapping(uint256 => mapping(address => mapping(uint256 => AccumulatedAttack))) internal _attacks;\\n\\n    mapping(address => uint256) internal _freeStakeReadyToBeWithdrawn;\\n    mapping(uint256 => uint256) internal _planetFlagged;\\n}\\n\",\"keccak256\":\"0xc021f1439a1066151e9862c99c2a6687eb9caf7cb9cc10ac6a4f12248718f0fd\",\"license\":\"AGPL-3.0\"},\"src/outerspace/events/ImportingOuterSpaceEvents.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\ninterface ImportingOuterSpaceEvents {\\n    event BlockTime(uint256 block, uint256 timestamp);\\n    event PlanetStake(\\n        address indexed acquirer,\\n        uint256 indexed location,\\n        uint32 numSpaceships,\\n        int40 travelingUpkeep,\\n        uint32 overflow,\\n        uint256 stake,\\n        bool freegift\\n    );\\n    event FleetSent(\\n        address indexed fleetSender,\\n        address indexed fleetOwner,\\n        uint256 indexed from,\\n        address operator,\\n        uint256 fleet,\\n        uint32 quantity,\\n        uint32 newNumSpaceships,\\n        int40 newTravelingUpkeep,\\n        uint32 newOverflow\\n    );\\n\\n    struct ArrivalData {\\n        uint32 newNumspaceships;\\n        int40 newTravelingUpkeep;\\n        uint32 newOverflow;\\n        uint32 numSpaceshipsAtArrival;\\n        uint32 taxLoss;\\n        uint32 fleetLoss;\\n        uint32 planetLoss;\\n        uint32 inFlightFleetLoss;\\n        uint32 inFlightPlanetLoss;\\n        uint32 accumulatedDefenseAdded;\\n        uint32 accumulatedAttackAdded;\\n    }\\n\\n    event FleetArrived(\\n        uint256 indexed fleet,\\n        address indexed fleetOwner,\\n        address indexed destinationOwner,\\n        uint256 destination,\\n        bool gift,\\n        bool won,\\n        ArrivalData data\\n    );\\n\\n    event TravelingUpkeepRefund(\\n        uint256 indexed origin,\\n        uint256 indexed fleet,\\n        uint32 newNumspaceships,\\n        int40 newTravelingUpkeep,\\n        uint32 newOverflow\\n    );\\n\\n    event PlanetTransfer(\\n        address indexed previousOwner,\\n        address indexed newOwner,\\n        uint256 indexed location,\\n        uint32 newNumspaceships,\\n        int40 newTravelingUpkeep,\\n        uint32 newOverflow\\n    );\\n\\n    event PlanetReset(uint256 indexed location);\\n\\n    event PlanetExit(address indexed owner, uint256 indexed location);\\n\\n    event ExitComplete(address indexed owner, uint256 indexed location, uint256 stake);\\n\\n    event RewardSetup(uint256 indexed location, address indexed giver, uint256 rewardId);\\n    event RewardToWithdraw(address indexed owner, uint256 indexed location, uint256 indexed rewardId);\\n\\n    event StakeToWithdraw(address indexed owner, uint256 newStake, bool freegift);\\n\\n    event Initialized(\\n        bytes32 genesis,\\n        uint256 resolveWindow,\\n        uint256 timePerDistance,\\n        uint256 exitDuration,\\n        uint32 acquireNumSpaceships,\\n        uint32 productionSpeedUp,\\n        uint256 frontrunningDelay,\\n        uint256 productionCapAsDuration,\\n        uint256 upkeepProductionDecreaseRatePer10000th,\\n        uint256 fleetSizeFactor6,\\n        uint32 initialSpaceExpansion,\\n        uint32 expansionDelta,\\n        uint256 giftTaxPer10000\\n    );\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 indexed location);\\n\\n    event GeneratorChanged(address newGenerator);\\n    event GeneratorAdminChanged(address newGeneratorAdmin);\\n}\\n\",\"keccak256\":\"0x9b32602305482429040f91f04309c61b66427ff0b8b224d6fbcc75d115dbb36d\",\"license\":\"AGPL-3.0\"},\"src/outerspace/facets/OuterSpaceFacetBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"../types/ImportingOuterSpaceTypes.sol\\\";\\nimport \\\"../base/ImportingOuterSpaceConstants.sol\\\";\\nimport \\\"../events/ImportingOuterSpaceEvents.sol\\\";\\nimport \\\"../base/UsingOuterSpaceDataLayout.sol\\\";\\n\\nimport \\\"../../libraries/Extraction.sol\\\";\\nimport \\\"../../libraries/Math.sol\\\";\\n\\nimport \\\"../../interfaces/IAlliance.sol\\\";\\nimport \\\"../../alliances/AllianceRegistry.sol\\\";\\n\\nimport \\\"../../conquest_token/IFreePlayToken.sol\\\";\\n\\ninterface StakingToken is IERC20 {\\n    function mint(address to, uint256 amount) external payable;\\n}\\n\\ncontract OuterSpaceFacetBase is\\n    ImportingOuterSpaceTypes,\\n    ImportingOuterSpaceConstants,\\n    ImportingOuterSpaceEvents,\\n    UsingOuterSpaceDataLayout\\n{\\n    using Extraction for bytes32;\\n\\n    StakingToken internal immutable _stakingToken;\\n    IFreePlayToken internal immutable _freeStakingToken;\\n    AllianceRegistry internal immutable _allianceRegistry;\\n\\n    bytes32 internal immutable _genesis;\\n    uint256 internal immutable _resolveWindow;\\n    uint256 internal immutable _timePerDistance;\\n    uint256 internal immutable _exitDuration;\\n    uint32 internal immutable _acquireNumSpaceships; // TODO use uint256\\n    uint32 internal immutable _productionSpeedUp; // TODO use uint256\\n    uint256 internal immutable _frontrunningDelay;\\n    uint256 internal immutable _productionCapAsDuration;\\n    uint256 internal immutable _upkeepProductionDecreaseRatePer10000th;\\n    uint256 internal immutable _fleetSizeFactor6;\\n    uint32 internal immutable _initialSpaceExpansion; // = 16;\\n    uint32 internal immutable _expansionDelta; // = 8;  // TODO use uint256\\n    uint256 internal immutable _giftTaxPer10000; // = 2500;\\n    // // 4,5,5,10,10,15,15, 20, 20, 30,30,40,40,80,80,100\\n    // bytes32 constant stakeRange = 0x000400050005000A000A000F000F00140014001E001E00280028005000500064;\\n    // 6, 8, 10, 12, 14, 16, 18, 20, 20, 22, 24, 32, 40, 48, 56, 72\\n    // bytes32 internal constant stakeRange = 0x00060008000A000C000E00100012001400140016001800200028003000380048;\\n    bytes32 internal immutable _stakeRange;\\n    uint256 internal immutable _stakeMultiplier10000th;\\n    uint256 internal immutable _bootstrapSessionEndTime;\\n    uint256 internal immutable _infinityStartTime;\\n\\n    struct Config {\\n        StakingToken stakingToken;\\n        IFreePlayToken freeStakingToken;\\n        AllianceRegistry allianceRegistry;\\n        bytes32 genesis;\\n        uint256 resolveWindow;\\n        uint256 timePerDistance;\\n        uint256 exitDuration;\\n        uint32 acquireNumSpaceships;\\n        uint32 productionSpeedUp;\\n        uint256 frontrunningDelay;\\n        uint256 productionCapAsDuration;\\n        uint256 upkeepProductionDecreaseRatePer10000th;\\n        uint256 fleetSizeFactor6;\\n        uint32 initialSpaceExpansion;\\n        uint32 expansionDelta;\\n        uint256 giftTaxPer10000;\\n        bytes32 stakeRange;\\n        uint256 stakeMultiplier10000th;\\n        uint256 bootstrapSessionEndTime;\\n        uint256 infinityStartTime;\\n    }\\n\\n    constructor(Config memory config) {\\n        uint32 t = uint32(config.timePerDistance) / 4; // the coordinates space is 4 times bigger\\n        require(t * 4 == config.timePerDistance, \\\"TIME_PER_DIST_NOT_DIVISIBLE_4\\\");\\n\\n        _stakingToken = config.stakingToken;\\n        _freeStakingToken = config.freeStakingToken;\\n        _allianceRegistry = config.allianceRegistry;\\n\\n        _genesis = config.genesis;\\n        _resolveWindow = config.resolveWindow;\\n        _timePerDistance = t;\\n        _exitDuration = config.exitDuration;\\n        _acquireNumSpaceships = config.acquireNumSpaceships;\\n        _productionSpeedUp = config.productionSpeedUp;\\n        _frontrunningDelay = config.frontrunningDelay;\\n        _productionCapAsDuration = config.productionCapAsDuration;\\n        _upkeepProductionDecreaseRatePer10000th = config.upkeepProductionDecreaseRatePer10000th;\\n        _fleetSizeFactor6 = config.fleetSizeFactor6;\\n        _initialSpaceExpansion = config.initialSpaceExpansion;\\n        _expansionDelta = config.expansionDelta;\\n        _giftTaxPer10000 = config.giftTaxPer10000;\\n        _stakeRange = config.stakeRange;\\n        _stakeMultiplier10000th = config.stakeMultiplier10000th;\\n        _bootstrapSessionEndTime = config.bootstrapSessionEndTime;\\n        _infinityStartTime = config.infinityStartTime;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // PLANET STATE\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    struct PlanetUpdateState {\\n        uint256 location;\\n        uint40 lastUpdated;\\n        bool active; // modified\\n        uint32 numSpaceships; // modified\\n        int40 travelingUpkeep; // modified\\n        uint40 exitStartTime;\\n        uint40 newExitStartTime; // modified\\n        uint32 overflow; // modified\\n        address owner;\\n        address newOwner; // modified\\n        bytes32 data;\\n        uint24 futureExtraProduction;\\n    }\\n\\n    function _createPlanetUpdateState(\\n        Planet memory planet,\\n        uint256 location\\n    ) internal view returns (PlanetUpdateState memory planetUpdate) {\\n        (bool active, uint32 currentNumSpaceships) = _activeNumSpaceships(planet.numSpaceships);\\n        planetUpdate.location = location;\\n        planetUpdate.lastUpdated = planet.lastUpdated;\\n        planetUpdate.active = active;\\n        planetUpdate.numSpaceships = currentNumSpaceships;\\n        planetUpdate.travelingUpkeep = planet.travelingUpkeep;\\n        planetUpdate.exitStartTime = planet.exitStartTime;\\n        planetUpdate.newExitStartTime = planet.exitStartTime;\\n        planetUpdate.overflow = planet.overflow;\\n        planetUpdate.owner = planet.owner;\\n        planetUpdate.newOwner = planet.owner;\\n        planetUpdate.data = _planetData(location);\\n    }\\n\\n    // solhint-disable-next-line code-complexity\\n    function _computePlanetUpdateForTimeElapsed(PlanetUpdateState memory planetUpdate) internal view {\\n        if (planetUpdate.exitStartTime != 0) {\\n            if (_hasJustExited(planetUpdate.exitStartTime)) {\\n                planetUpdate.newExitStartTime = 0;\\n                planetUpdate.numSpaceships = 0;\\n                planetUpdate.travelingUpkeep = 0;\\n                planetUpdate.newOwner = address(0);\\n                planetUpdate.overflow = 0;\\n                planetUpdate.active = false; // event is emitted at the endof each write function\\n                // lastUpdated is set at the end directly on storage\\n                return;\\n            }\\n        }\\n\\n        uint256 timePassed = block.timestamp - planetUpdate.lastUpdated;\\n        uint16 production = _production(planetUpdate.data);\\n        uint256 amountProducedTheWholeTime = (timePassed * uint256(_productionSpeedUp) * uint256(production)) / 1 hours;\\n\\n        uint256 newNumSpaceships = planetUpdate.numSpaceships;\\n        uint256 extraUpkeepPaid = 0;\\n        if (_productionCapAsDuration > 0) {\\n            uint256 capWhenActive = _capWhenActive(production);\\n            uint256 cap = planetUpdate.active ? capWhenActive : 0;\\n\\n            if (newNumSpaceships > cap) {\\n                uint256 decreaseRate = 1800;\\n                if (planetUpdate.overflow > 0) {\\n                    decreaseRate = (uint256(planetUpdate.overflow) * 1800) / capWhenActive;\\n                    if (decreaseRate < 1800) {\\n                        decreaseRate = 1800;\\n                    }\\n                }\\n\\n                uint256 decrease = (timePassed * uint256(_productionSpeedUp) * decreaseRate) / 1 hours;\\n                if (decrease == 0) {\\n                    // NOTE: To ensure a player cannot simply ping the planet continuously to avoid the decrease\\n                    decrease = 1;\\n                }\\n                if (decrease > newNumSpaceships - cap) {\\n                    decrease = newNumSpaceships - cap;\\n                }\\n\\n                if (planetUpdate.active) {\\n                    extraUpkeepPaid = decrease;\\n                }\\n                newNumSpaceships -= decrease;\\n            } else {\\n                if (planetUpdate.active) {\\n                    uint256 increase = amountProducedTheWholeTime;\\n                    if (planetUpdate.travelingUpkeep > 0) {\\n                        uint256 timeBeforeUpkeepBackToZero = (uint256(uint40(planetUpdate.travelingUpkeep)) * 1 hours) /\\n                            ((uint256(_productionSpeedUp) *\\n                                uint256(production) *\\n                                _upkeepProductionDecreaseRatePer10000th) / 10000); // 10,000 should be extracted as to not reach div by zero (like \\\"1 hours\\\")\\n                        if (timeBeforeUpkeepBackToZero >= timePassed) {\\n                            extraUpkeepPaid = increase;\\n                        } else {\\n                            extraUpkeepPaid =\\n                                (timeBeforeUpkeepBackToZero * uint256(_productionSpeedUp) * uint256(production)) /\\n                                1 hours;\\n                            if (extraUpkeepPaid > increase) {\\n                                extraUpkeepPaid = increase; // TODO remove ? should not be possible\\n                            }\\n                        }\\n                        increase -= extraUpkeepPaid;\\n                    }\\n\\n                    uint256 maxIncrease = cap - newNumSpaceships;\\n                    if (increase > maxIncrease) {\\n                        extraUpkeepPaid += increase - maxIncrease;\\n                        increase = maxIncrease;\\n                    }\\n                    newNumSpaceships += increase;\\n                    // solhint-disable-next-line no-empty-blocks\\n                } else {\\n                    // not effect currently, when inactive, cap == 0, meaning zero spaceship here\\n                    // NOTE: we could do the following assuming we act on upkeepRepaid when inactive, we do not do that currently\\n                    //  extraUpkeepPaid = amountProducedTheWholeTime - upkeepRepaid;\\n                }\\n            }\\n\\n            if (planetUpdate.active) {\\n                uint256 upkeepRepaid = ((amountProducedTheWholeTime * _upkeepProductionDecreaseRatePer10000th) /\\n                    10000) + extraUpkeepPaid;\\n                int256 newTravelingUpkeep = int256(planetUpdate.travelingUpkeep) - int40(uint40(upkeepRepaid));\\n\\n                if (newTravelingUpkeep < -int256(cap)) {\\n                    newTravelingUpkeep = -int256(cap);\\n                }\\n                planetUpdate.travelingUpkeep = int40(newTravelingUpkeep);\\n            }\\n        } else {\\n            // TODO We are not using this branch, and in that branch there is no upkeep or overflow to consider\\n            if (planetUpdate.active) {\\n                newNumSpaceships += amountProducedTheWholeTime;\\n            } else {\\n                // NOTE no need to overflow here  as there is no production cap, so no incentive to regroup spaceships\\n                uint256 decrease = (timePassed * uint256(_productionSpeedUp) * 1800) / 1 hours;\\n                if (decrease > newNumSpaceships) {\\n                    decrease = newNumSpaceships;\\n                    newNumSpaceships = 0;\\n                } else {\\n                    newNumSpaceships -= decrease;\\n                }\\n            }\\n        }\\n\\n        if (newNumSpaceships >= ACTIVE_MASK) {\\n            newNumSpaceships = ACTIVE_MASK - 1;\\n        }\\n        planetUpdate.numSpaceships = uint32(newNumSpaceships);\\n\\n        if (!planetUpdate.active && planetUpdate.numSpaceships == 0) {\\n            planetUpdate.newOwner = address(0);\\n        }\\n    }\\n\\n    function _setPlanet(Planet storage planet, PlanetUpdateState memory planetUpdate, bool exitInterupted) internal {\\n        if (planetUpdate.exitStartTime > 0 && planetUpdate.newExitStartTime == 0) {\\n            // NOTE: planetUpdate.newExitStartTime is only set to zero when exit is actually complete (not interupted)\\n            //  interuption is handled by exitInterupted\\n            // exit has completed, newExitStartTime is not set to zero for interuption,\\n            // interuption is taken care below (owner changes)\\n            _handleExitComplete(planetUpdate);\\n        }\\n        if (planetUpdate.owner != planetUpdate.newOwner) {\\n            planet.owner = planetUpdate.newOwner;\\n            if (planetUpdate.newOwner != address(0)) {\\n                planet.ownershipStartTime = uint40(block.timestamp);\\n            } else {\\n                planet.ownershipStartTime = 0;\\n            }\\n            emit Transfer(planetUpdate.owner, planetUpdate.newOwner, planetUpdate.location);\\n        }\\n\\n        if (exitInterupted) {\\n            // if (planetUpdate.newExitStartTime == 0 && planetUpdate.exitStartTime > 0) {\\n            // exit interupted // TODO event ?\\n            // }\\n            planet.exitStartTime = 0;\\n        } else if (planetUpdate.newExitStartTime != planetUpdate.exitStartTime) {\\n            planet.exitStartTime = planetUpdate.newExitStartTime;\\n        }\\n\\n        planet.numSpaceships = _setActiveNumSpaceships(planetUpdate.active, planetUpdate.numSpaceships);\\n        planet.travelingUpkeep = planetUpdate.travelingUpkeep;\\n\\n        planet.overflow = planetUpdate.overflow;\\n        planet.lastUpdated = uint40(block.timestamp);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // STAKING / PRODUCTION CAPTURE\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    function _acquire(address player, uint256 stake, uint256 location, bool freegift) internal whenNotPaused {\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Initialise State Update\\n        // -----------------------------------------------------------------------------------------------------------\\n        Planet storage planet = _getPlanet(location);\\n        PlanetUpdateState memory planetUpdate = _createPlanetUpdateState(planet, location);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // check requirements\\n        // -----------------------------------------------------------------------------------------------------------\\n        require(stake == uint256(_stake(planetUpdate.data)) * (DECIMALS_14), \\\"INVALID_STAKE_AMOUNT\\\");\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Compute Basic Planet Updates\\n        // -----------------------------------------------------------------------------------------------------------\\n        _computePlanetUpdateForTimeElapsed(planetUpdate);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Staking logic...\\n        // -----------------------------------------------------------------------------------------------------------\\n        _computePlanetUpdateForStaking(player, planetUpdate);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Write New State\\n        // -----------------------------------------------------------------------------------------------------------\\n        _setPlanet(planet, planetUpdate, false);\\n        // _setAccountFromPlanetUpdate(planetUpdate);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Update Space Discovery\\n        // -----------------------------------------------------------------------------------------------------------\\n        _setDiscoveryAfterStaking(location);\\n\\n        if (freegift) {\\n            _planetFlagged[location] = block.timestamp;\\n        } else {\\n            _planetFlagged[location] = 0; // staked with normal tokens\\n        }\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Emit Event\\n        // -----------------------------------------------------------------------------------------------------------\\n        emit BlockTime(block.number, block.timestamp);\\n        emit PlanetStake(\\n            player,\\n            location,\\n            planetUpdate.numSpaceships,\\n            planetUpdate.travelingUpkeep,\\n            planetUpdate.overflow,\\n            stake,\\n            freegift\\n        );\\n        _notifyGeneratorAdd(planetUpdate.newOwner, stake);\\n    }\\n\\n    function _computePlanetUpdateForStaking(address player, PlanetUpdateState memory planetUpdate) internal view {\\n        require(!planetUpdate.active, \\\"STILL_ACTIVE\\\");\\n\\n        uint32 defense;\\n        // NOTE : natives are back automatically once spaceships reaches zero (here we know we are not active)\\n        // TODO consider making natives come back over time => would need to compute the time numSpaceship became zero\\n        if (planetUpdate.numSpaceships == 0) {\\n            defense = _natives(planetUpdate.data);\\n        } else {\\n            // Do not allow staking over occupied planets, they are going to zero at some point though\\n            require(planetUpdate.owner == player, \\\"OCCUPIED\\\");\\n        }\\n\\n        uint16 production = _production(planetUpdate.data);\\n        uint32 cap = uint32(_capWhenActive(production));\\n\\n        // We need to  ensure a player staking on a planet it previously exited work here\\n        planetUpdate.newOwner = player;\\n        if (defense != 0) {\\n            (uint32 attackerLoss, ) = _computeFight(\\n                uint256(_acquireNumSpaceships),\\n                defense,\\n                10000,\\n                _defense(planetUpdate.data)\\n            );\\n            // attacker alwasy win as defense (and stats.native) is restricted to 3500\\n            // (attackerLoss: 0, defenderLoss: 0) would mean defense was zero\\n            require(attackerLoss < _acquireNumSpaceships, \\\"FAILED_CAPTURED\\\");\\n            planetUpdate.numSpaceships = _acquireNumSpaceships - attackerLoss;\\n\\n            // NOTE cannot be overflow here as staking provide a number of spaceships below that\\n            planetUpdate.overflow = 0;\\n        } else {\\n            planetUpdate.numSpaceships += _acquireNumSpaceships;\\n            if (_productionCapAsDuration > 0) {\\n                if (planetUpdate.numSpaceships > cap) {\\n                    planetUpdate.overflow = planetUpdate.numSpaceships - cap;\\n                } else {\\n                    planetUpdate.overflow = 0;\\n                }\\n            }\\n        }\\n\\n        // NOTE when staking on a planet, we set an allowance for traveling upkeep\\n        planetUpdate.travelingUpkeep =\\n            -int32(uint32((uint256(cap) * _upkeepProductionDecreaseRatePer10000th) / 10000)) -\\n            int32(planetUpdate.numSpaceships);\\n        planetUpdate.active = true;\\n    }\\n\\n    // solhint-disable-next-line code-complexity\\n    function _setDiscoveryAfterStaking(uint256 location) internal {\\n        Discovered memory discovered = _discovered;\\n\\n        int256 x = int256(int128(int256(location & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)));\\n        int256 y = int256(int128(int256(location >> 128)));\\n\\n        bool changes = false;\\n        if (x < 0) {\\n            require(-x <= int256(uint256(discovered.minX)), \\\"NOT_REACHABLE_YET_MINX\\\");\\n            x = -x + int32(_expansionDelta);\\n            if (x > UINT32_MAX) {\\n                x = UINT32_MAX;\\n            }\\n            if (int256(uint256(discovered.minX)) < x) {\\n                discovered.minX = uint32(uint256(x));\\n                changes = true;\\n            }\\n        } else {\\n            require(x <= int256(uint256(discovered.maxX)), \\\"NOT_REACHABLE_YET_MAXX\\\");\\n            x = x + int32(_expansionDelta);\\n            if (x > UINT32_MAX) {\\n                x = UINT32_MAX;\\n            }\\n            if (discovered.maxX < uint32(uint256(x))) {\\n                discovered.maxX = uint32(uint256(x));\\n                changes = true;\\n            }\\n        }\\n\\n        if (y < 0) {\\n            require(-y <= int256(uint256(discovered.minY)), \\\"NOT_REACHABLE_YET_MINY\\\");\\n            y = -y + int32(_expansionDelta);\\n            if (y > UINT32_MAX) {\\n                y = UINT32_MAX;\\n            }\\n            if (int256(uint256(discovered.minY)) < y) {\\n                discovered.minY = uint32(uint256(y));\\n                changes = true;\\n            }\\n        } else {\\n            require(y <= int256(uint256(discovered.maxY)), \\\"NOT_REACHABLE_YET_MAXY\\\");\\n            y = y + int32(_expansionDelta);\\n            if (y > UINT32_MAX) {\\n                y = UINT32_MAX;\\n            }\\n            if (int256(uint256(discovered.maxY)) < y) {\\n                discovered.maxY = uint32(uint256(y));\\n                changes = true;\\n            }\\n        }\\n        if (changes) {\\n            _discovered = discovered;\\n        }\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // EXITS / WITHDRAWALS\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    function _handleExitComplete(PlanetUpdateState memory planetUpdate) internal {\\n        uint256 stake = _completeExit(planetUpdate.owner, planetUpdate.location, planetUpdate.data);\\n\\n        // Note we could Transfer to zero and Transfer from zero ?\\n\\n        // optional so we can use it in the batch withdraw,\\n\\n        uint256 flagTime = _planetFlagged[planetUpdate.location];\\n        if (flagTime > 0) {\\n            if (planetUpdate.exitStartTime >= flagTime + (6 days / _productionSpeedUp)) {\\n                _freeStakingToken.burn(address(this), address(this), stake);\\n                uint256 newStake = _stakeReadyToBeWithdrawn[planetUpdate.owner] + stake;\\n                _stakeReadyToBeWithdrawn[planetUpdate.owner] = newStake;\\n                emit StakeToWithdraw(planetUpdate.owner, newStake, false);\\n            } else {\\n                uint256 newStake = _freeStakeReadyToBeWithdrawn[planetUpdate.owner] + stake;\\n                _freeStakeReadyToBeWithdrawn[planetUpdate.owner] = newStake;\\n                emit StakeToWithdraw(planetUpdate.owner, newStake, true);\\n            }\\n        } else {\\n            uint256 newStake = _stakeReadyToBeWithdrawn[planetUpdate.owner] + stake;\\n            _stakeReadyToBeWithdrawn[planetUpdate.owner] = newStake;\\n            emit StakeToWithdraw(planetUpdate.owner, newStake, false);\\n        }\\n    }\\n\\n    function _completeExit(address owner, uint256 location, bytes32 data) internal returns (uint256 stake) {\\n        stake = uint256(_stake(data)) * (DECIMALS_14);\\n        emit BlockTime(block.number, block.timestamp);\\n        emit ExitComplete(owner, location, stake);\\n\\n        // --------------------------------------------------------\\n        // Extra Reward was added\\n        // --------------------------------------------------------\\n        uint256 rewardId = _rewards[location];\\n        if (rewardId != 0) {\\n            // rewardId would contains the package. maybe this could be handled by an external contract\\n            _rewardsToWithdraw[owner][rewardId] = true;\\n            _rewards[location] = 0; // reset\\n            // if you had reward to a planet in he process of exiting,\\n            // you are adding the reward to the player exiting unless _setPlanetAfterExit is called first\\n            emit RewardToWithdraw(owner, location, rewardId);\\n        }\\n        // --------------------------------------------------------\\n    }\\n\\n    function _unsafe_exit_for(address owner, uint256 location) internal {\\n        Planet storage planet = _getPlanet(location);\\n        (bool active, ) = _activeNumSpaceships(planet.numSpaceships);\\n        require(active, \\\"NOT_ACTIVE\\\");\\n        require(owner == planet.owner, \\\"NOT_OWNER\\\");\\n        require(planet.exitStartTime == 0, \\\"EXITING_ALREADY\\\");\\n\\n        planet.exitStartTime = uint40(block.timestamp);\\n        emit BlockTime(block.number, block.timestamp);\\n        emit PlanetExit(owner, location);\\n\\n        // stake is removed as soon as we start exist\\n        // If the exit is interupted, it is given to the player interupting\\n        _notifyGeneratorRemove(owner, uint256(_stake(_planetData(location))) * (DECIMALS_14));\\n    }\\n\\n    function _fetchAndWithdrawFor(address owner, uint256[] calldata locations) internal {\\n        uint256 addedStake = 0;\\n        uint256 freeAddedStake = 0;\\n        for (uint256 i = 0; i < locations.length; i++) {\\n            Planet storage planet = _getPlanet(locations[i]);\\n            if (_hasJustExited(planet.exitStartTime)) {\\n                require(owner == planet.owner, \\\"NOT_OWNER\\\");\\n                emit Transfer(owner, address(0), locations[i]);\\n\\n                uint256 flagTime = _planetFlagged[locations[i]];\\n                if (flagTime > 0) {\\n                    if (planet.exitStartTime >= flagTime + (6 days / _productionSpeedUp)) {\\n                        uint256 extra = _completeExit(planet.owner, locations[i], _planetData(locations[i]));\\n                        addedStake += extra;\\n                        _freeStakingToken.burn(address(this), address(this), extra);\\n                    } else {\\n                        freeAddedStake += _completeExit(planet.owner, locations[i], _planetData(locations[i]));\\n                    }\\n                } else {\\n                    addedStake += _completeExit(planet.owner, locations[i], _planetData(locations[i]));\\n                }\\n\\n                planet.owner = address(0);\\n                planet.ownershipStartTime = 0;\\n                planet.exitStartTime = 0;\\n                planet.numSpaceships = 0;\\n                planet.overflow = 0;\\n                planet.travelingUpkeep = 0;\\n                planet.lastUpdated = uint40(block.timestamp);\\n            }\\n        }\\n        uint256 newStake = _stakeReadyToBeWithdrawn[owner] + addedStake;\\n        _unsafe_withdrawAll(owner, newStake);\\n\\n        uint256 newFreeStake = _freeStakeReadyToBeWithdrawn[owner] + freeAddedStake;\\n        _free_unsafe_withdrawAll(owner, newFreeStake);\\n    }\\n\\n    function _unsafe_withdrawAll(address owner, uint256 amount) internal {\\n        _stakeReadyToBeWithdrawn[owner] = 0;\\n        emit StakeToWithdraw(owner, amount, false);\\n        require(_stakingToken.transfer(owner, amount), \\\"FAILED_TRANSFER\\\");\\n        emit StakeToWithdraw(owner, 0, false);\\n    }\\n\\n    function _free_unsafe_withdrawAll(address owner, uint256 amount) internal {\\n        _freeStakeReadyToBeWithdrawn[owner] = 0;\\n        emit StakeToWithdraw(owner, amount, true);\\n        require(_freeStakingToken.transfer(owner, amount), \\\"FAILED_TRANSFER\\\");\\n        emit StakeToWithdraw(owner, 0, true);\\n    }\\n\\n    function _hasJustExited(uint40 exitTime) internal view returns (bool) {\\n        if (exitTime == 0) {\\n            return false;\\n        }\\n        uint256 timestamp = block.timestamp;\\n        if (_bootstrapSessionEndTime > 0 && timestamp >= _bootstrapSessionEndTime && exitTime < _infinityStartTime) {\\n            return true;\\n        }\\n\\n        return timestamp > exitTime + _exitDuration;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // REWARDS\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    function _addReward(uint256 location, address sponsor) internal {\\n        uint256 rewardId = _rewards[location];\\n        require(rewardId == 0, \\\"REWARD_ALREADY_AT_THIS_LOCATION\\\");\\n        // TODO ?\\n        // Planet storage planet = _getPlanet(location);\\n        // require(planet.lastUpdated == 0, \\\"PLANET_ALREADY_COLONIZED\\\");\\n        rewardId = ++_prevRewardIds[sponsor];\\n        _rewards[location] = (uint256(uint160(sponsor)) << 96) + rewardId;\\n        emit RewardSetup(location, sponsor, rewardId);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // FLEET SENDING\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    function _unsafe_sendFor(uint256 fleetId, address operator, FleetLaunch memory launch) internal whenNotPaused {\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Initialise State Update\\n        // -----------------------------------------------------------------------------------------------------------\\n        Planet storage planet = _getPlanet(launch.from);\\n        PlanetUpdateState memory planetUpdate = _createPlanetUpdateState(planet, launch.from);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // check requirements\\n        // -----------------------------------------------------------------------------------------------------------\\n\\n        require(launch.quantity < 2 ** 30, \\\"TOO_MANY_SPACESHIPS\\\"); // only 2^30 because the first 2 bits = resolution\\n        require(launch.quantity > 0, \\\"NO_SPACESHIPS\\\");\\n        require(planet.exitStartTime == 0, \\\"PLANET_EXIT\\\");\\n        require(launch.fleetSender == planet.owner, \\\"NOT_OWNER\\\");\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Compute Basic Planet Updates\\n        // -----------------------------------------------------------------------------------------------------------\\n        _computePlanetUpdateForTimeElapsed(planetUpdate);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Requirements post Planet Updates\\n        // -----------------------------------------------------------------------------------------------------------\\n\\n        require(planetUpdate.numSpaceships >= launch.quantity, \\\"SPACESHIPS_NOT_ENOUGH\\\");\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Sending logic...\\n        // -----------------------------------------------------------------------------------------------------------\\n        _computePlanetUpdateForFleetLaunch(planetUpdate, launch.quantity);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Write New State\\n        // -----------------------------------------------------------------------------------------------------------\\n        _setPlanet(planet, planetUpdate, false);\\n        // _setAccountFromPlanetUpdate(planetUpdate);\\n\\n        _setFleetFlyingSlot(launch.from, launch.quantity);\\n\\n        require(_fleets[fleetId].quantity == 0, \\\"FLEET_EXISTS\\\");\\n        _fleets[fleetId] = Fleet({\\n            launchTime: uint40(block.timestamp),\\n            owner: launch.fleetOwner,\\n            quantity: launch.quantity,\\n            futureExtraProduction: planetUpdate.futureExtraProduction,\\n            defender: address(0),\\n            arrivalTime: 0,\\n            defenderLoss: 0,\\n            victory: false,\\n            planetActive: false\\n        });\\n\\n        emit BlockTime(block.number, block.timestamp);\\n        emit FleetSent(\\n            launch.fleetSender,\\n            launch.fleetOwner,\\n            launch.from,\\n            operator,\\n            fleetId,\\n            launch.quantity,\\n            planetUpdate.numSpaceships,\\n            planetUpdate.travelingUpkeep,\\n            planetUpdate.overflow\\n        );\\n    }\\n\\n    function _computePlanetUpdateForFleetLaunch(PlanetUpdateState memory planetUpdate, uint32 quantity) internal view {\\n        planetUpdate.numSpaceships -= quantity;\\n        if (_productionCapAsDuration > 0) {\\n            if (planetUpdate.active) {\\n                // NOTE we do not update travelingUpkeep on Inactive planets\\n                //  these get reset on staking\\n\\n                uint16 production = _production(planetUpdate.data);\\n                uint256 cap = _capWhenActive(production);\\n                if (planetUpdate.numSpaceships < cap) {\\n                    uint256 futureExtraProduction = cap - planetUpdate.numSpaceships;\\n                    if (futureExtraProduction > quantity) {\\n                        futureExtraProduction = quantity;\\n                    }\\n                    int256 newTravelingUpkeep = int256(planetUpdate.travelingUpkeep) + int256(futureExtraProduction);\\n                    if (newTravelingUpkeep > int256(cap)) {\\n                        newTravelingUpkeep = int256(cap);\\n                    }\\n                    planetUpdate.travelingUpkeep = int40(newTravelingUpkeep);\\n                    planetUpdate.futureExtraProduction = uint24(futureExtraProduction); // cap is always smaller than uint24\\n                }\\n            }\\n\\n            if (planetUpdate.overflow > quantity) {\\n                planetUpdate.overflow -= quantity;\\n            } else {\\n                planetUpdate.overflow = 0;\\n            }\\n        }\\n    }\\n\\n    function _setFleetFlyingSlot(uint256 from, uint32 quantity) internal {\\n        // -----------------------------------------------------------------------------------------------------------\\n        // record flying fleets (to prevent front-running, see resolution)\\n        // -----------------------------------------------------------------------------------------------------------\\n        uint256 timeSlot = block.timestamp / (_frontrunningDelay / 2);\\n        uint32 flying = _inFlight[from][timeSlot].flying;\\n        unchecked {\\n            flying = flying + quantity;\\n        }\\n        require(flying >= quantity, \\\"ORBIT_OVERFLOW\\\"); // unlikely to ever happen,\\n        // would need a huge amount of spaceships to be received and each in turn being sent\\n        // TOEXPLORE could also cap, that would result in some fleet being able to escape.\\n        _inFlight[from][timeSlot].flying = flying;\\n        // -----------------------------------------------------------------------------------------------------------\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // FLEET RESOLUTION, ATTACK / REINFORCEMENT\\n    // ---------------------------------------------------------------------------------------------------------------\\n    struct ResolutionState {\\n        address fleetOwner;\\n        uint40 fleetLaunchTime;\\n        uint32 originalQuantity;\\n        uint32 fleetQuantity;\\n        bytes32 fromData;\\n        uint32 inFlightFleetLoss;\\n        uint32 inFlightPlanetLoss;\\n        bool gifting;\\n        bool taxed;\\n        bool victory;\\n        uint32 attackerLoss;\\n        uint32 defenderLoss;\\n        uint32 orbitDefense1;\\n        uint32 orbitDefenseDestroyed1;\\n        uint32 orbitDefense2;\\n        uint32 orbitDefenseDestroyed2;\\n        uint40 arrivalTime;\\n        uint32 accumulatedDefenseAdded;\\n        uint32 accumulatedAttackAdded;\\n        uint16 attackPower;\\n        uint24 futureExtraProduction;\\n    }\\n\\n    function _resolveFleet(uint256 fleetId, FleetResolution calldata resolution) internal {\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Initialise State Update\\n        // -----------------------------------------------------------------------------------------------------------\\n        Planet storage toPlanet = _getPlanet(resolution.to);\\n        PlanetUpdateState memory toPlanetUpdate = _createPlanetUpdateState(toPlanet, resolution.to);\\n        ResolutionState memory rState = _createResolutionState(_fleets[fleetId], resolution.from);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // check requirements\\n        // -----------------------------------------------------------------------------------------------------------\\n\\n        require(\\n            rState.fleetQuantity > 0,\\n            rState.fleetOwner != address(0) ? \\\"FLEET_RESOLVED_ALREADY\\\" : \\\"FLEET_DO_NOT_EXIST\\\"\\n        );\\n        _requireCorrectDistance(\\n            resolution.distance,\\n            resolution.from,\\n            resolution.to,\\n            rState.fromData,\\n            toPlanetUpdate.data\\n        );\\n        _requireCorrectTimeAndUpdateArrivalTime(\\n            resolution.distance,\\n            resolution.arrivalTimeWanted,\\n            rState.fleetLaunchTime,\\n            rState.fromData,\\n            rState\\n        );\\n\\n        if (_bootstrapSessionEndTime > 0) {\\n            uint256 timestamp = block.timestamp;\\n\\n            if (timestamp >= _bootstrapSessionEndTime) {\\n                require(rState.fleetLaunchTime >= _infinityStartTime, \\\"FLEET_LAUNCHED_IN_BOOTSTRAP\\\");\\n            }\\n        }\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Compute Basic Planet Updates\\n        // -----------------------------------------------------------------------------------------------------------\\n        _computePlanetUpdateForTimeElapsed(toPlanetUpdate);\\n\\n        address ownerAtArrival = toPlanetUpdate.newOwner; // this can be owner == address(0)\\n\\n        uint32 numSpaceshipsAtArrival = toPlanetUpdate.numSpaceships;\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Traveling logic...\\n        // -----------------------------------------------------------------------------------------------------------\\n\\n        _computeInFlightLossForFleet(rState, resolution);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Resolution logic...\\n        // -----------------------------------------------------------------------------------------------------------\\n\\n        _updateFleetForGifting(rState, resolution, toPlanetUpdate.newOwner);\\n\\n        _computeResolutionResult(rState, toPlanetUpdate);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Write New State\\n        // -----------------------------------------------------------------------------------------------------------\\n\\n        _recordInOrbitLossAfterAttack(rState, toPlanetUpdate);\\n\\n        _recordOrbitLossAccountingForFleetOrigin(rState, resolution);\\n\\n        _setTravelingUpkeepFromOrigin(fleetId, rState, resolution.from);\\n\\n        _setPlanet(toPlanet, toPlanetUpdate, rState.victory);\\n\\n        _setAccumulatedAttack(rState, toPlanetUpdate);\\n\\n        _fleets[fleetId].quantity = (1 << 31) | _fleets[fleetId].quantity;\\n        _fleets[fleetId].defender = ownerAtArrival;\\n        _fleets[fleetId].defenderLoss = rState.defenderLoss;\\n        _fleets[fleetId].arrivalTime = uint40(block.timestamp);\\n        _fleets[fleetId].planetActive = toPlanetUpdate.active;\\n        _fleets[fleetId].victory = rState.victory;\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Events\\n        // -----------------------------------------------------------------------------------------------------------\\n        _emitFleetArrived(\\n            fleetId,\\n            rState,\\n            ownerAtArrival,\\n            resolution.to,\\n            _arrivalData(rState, toPlanetUpdate, numSpaceshipsAtArrival)\\n        );\\n\\n        if (toPlanetUpdate.active && rState.victory) {\\n            // if active and the fleet was victorious we need to handle stake change of hands\\n            if (toPlanetUpdate.exitStartTime != 0) {\\n                // exit has been interupted\\n                // we add stake to new owner\\n                _notifyGeneratorAdd(toPlanetUpdate.newOwner, uint256(_stake(toPlanetUpdate.data)) * (DECIMALS_14));\\n            } else {\\n                // there was no exit, so we move the stake\\n                _notifyGeneratorMove(\\n                    toPlanetUpdate.owner,\\n                    toPlanetUpdate.newOwner,\\n                    uint256(_stake(toPlanetUpdate.data)) * (DECIMALS_14)\\n                );\\n            }\\n        }\\n    }\\n\\n    function _arrivalData(\\n        ResolutionState memory rState,\\n        PlanetUpdateState memory toPlanetUpdate,\\n        uint32 numSpaceshipsAtArrival\\n    ) internal pure returns (ArrivalData memory arrivalData) {\\n        arrivalData.newNumspaceships = toPlanetUpdate.numSpaceships;\\n        arrivalData.newTravelingUpkeep = toPlanetUpdate.travelingUpkeep;\\n        arrivalData.newOverflow = toPlanetUpdate.overflow;\\n        arrivalData.numSpaceshipsAtArrival = numSpaceshipsAtArrival;\\n        arrivalData.taxLoss = rState.taxed\\n            ? (rState.originalQuantity - rState.inFlightFleetLoss) - rState.fleetQuantity\\n            : 0;\\n        arrivalData.fleetLoss = rState.attackerLoss;\\n        arrivalData.planetLoss = rState.defenderLoss;\\n        arrivalData.inFlightFleetLoss = rState.inFlightFleetLoss;\\n        arrivalData.inFlightPlanetLoss = rState.inFlightPlanetLoss;\\n        arrivalData.accumulatedDefenseAdded = rState.accumulatedDefenseAdded;\\n        arrivalData.accumulatedAttackAdded = rState.accumulatedAttackAdded;\\n    }\\n\\n    function _emitFleetArrived(\\n        uint256 fleetId,\\n        ResolutionState memory rState,\\n        address planetOwner,\\n        uint256 to,\\n        ArrivalData memory arrivalData\\n    ) internal {\\n        emit BlockTime(block.number, block.timestamp);\\n        emit FleetArrived(fleetId, rState.fleetOwner, planetOwner, to, rState.gifting, rState.victory, arrivalData);\\n    }\\n\\n    function _requireCorrectDistance(\\n        uint256 distance,\\n        uint256 from,\\n        uint256 to,\\n        bytes32 fromPlanetData,\\n        bytes32 toPlanetData\\n    ) internal pure {\\n        // check input instead of compute sqrt\\n\\n        (int8 fromSubX, int8 fromSubY) = _subLocation(fromPlanetData);\\n        (int8 toSubX, int8 toSubY) = _subLocation(toPlanetData);\\n        uint256 distanceSquared = uint256(\\n            int256( // check input instead of compute sqrt\\n                ((int128(int256(to & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) * 4 + toSubX) -\\n                    (int128(int256(from & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) * 4 + fromSubX)) **\\n                    2 +\\n                    ((int128(int256(to >> 128)) * 4 + toSubY) - (int128(int256(from >> 128)) * 4 + fromSubY)) ** 2\\n            )\\n        );\\n        require(distance ** 2 <= distanceSquared && distanceSquared < (distance + 1) ** 2, \\\"wrong distance\\\");\\n    }\\n\\n    function _requireCorrectTimeAndUpdateArrivalTime(\\n        uint256 distance,\\n        uint256 arrivalTimeWanted,\\n        uint40 launchTime,\\n        bytes32 fromPlanetData,\\n        ResolutionState memory rState\\n    ) internal view {\\n        uint256 minReachTime = launchTime + (distance * (_timePerDistance * 10000)) / _speed(fromPlanetData);\\n        uint256 reachTime = Math.max(arrivalTimeWanted, minReachTime);\\n        if (arrivalTimeWanted > 0) {\\n            rState.arrivalTime = uint40(arrivalTimeWanted);\\n        } else {\\n            rState.arrivalTime = uint40(minReachTime);\\n        }\\n        require(block.timestamp >= reachTime, \\\"too early\\\");\\n        require(block.timestamp < reachTime + _resolveWindow, \\\"too late, your spaceships are lost in space\\\");\\n    }\\n\\n    function _computeInFlightLossForFleet(\\n        ResolutionState memory rState,\\n        FleetResolution memory resolution\\n    ) internal view {\\n        // -----------------------------------------------------------------------------------------------------------\\n        // check if fleet was attacked while departing (used to prevent front-running, see fleet sending)\\n        // -----------------------------------------------------------------------------------------------------------\\n        uint256 timeSlot = rState.fleetLaunchTime / (_frontrunningDelay / 2);\\n        uint32 destroyed = _inFlight[resolution.from][timeSlot].destroyed;\\n        uint32 originalQuantity = rState.fleetQuantity;\\n        if (destroyed < rState.fleetQuantity) {\\n            rState.fleetQuantity -= uint32(destroyed);\\n        } else {\\n            rState.fleetQuantity = 0;\\n        }\\n\\n        rState.inFlightFleetLoss = originalQuantity - rState.fleetQuantity;\\n        // -----------------------------------------------------------------------------------------------------------\\n    }\\n\\n    function _updateFleetForGifting(\\n        ResolutionState memory rState,\\n        FleetResolution memory resolution,\\n        address destinationOwner\\n    ) internal view {\\n        (bool gifting, bool taxed) = _computeGifting(destinationOwner, resolution, rState);\\n        rState.gifting = gifting;\\n        rState.taxed = taxed;\\n    }\\n\\n    // TODO simplify and apply that to attack (when fleetOwner is not fleetSender)\\n    //  if (resolution.gift) { rState.fleetOwner = destinationOwner }\\n    //  then compute tax based on fleetOwner != fleetSender, box for attacks and gift\\n    //  combined attack could even work for non-allies ?\\n    //  in _computeGift calculate the tax for every branch that result in `gifting` being false\\n    //  then in attack, add tax to the quantity of fleet + modify event\\n\\n    // solhint-disable-next-line code-complexity\\n    function _computeGifting(\\n        address destinationOwner,\\n        FleetResolution memory resolution,\\n        ResolutionState memory rState\\n    ) internal view returns (bool gifting, bool taxed) {\\n        if (destinationOwner == address(0)) {\\n            // destination has no owner : this is an attack\\n            return (false, _isFleetOwnerTaxed(rState.fleetOwner, resolution.fleetSender, rState.fleetLaunchTime));\\n        }\\n        if (destinationOwner == rState.fleetOwner && destinationOwner == resolution.fleetSender) {\\n            // destination is sender is fleet owner: this is a non-taxed gift\\n            return (true, false);\\n        }\\n\\n        if (resolution.gift || destinationOwner == rState.fleetOwner) {\\n            // intent was gift\\n            if (\\n                resolution.specific == address(0) || // anyone\\n                resolution.specific == destinationOwner || // only one address and matching owner\\n                destinationOwner == rState.fleetOwner // owner is fleet owner => gift\\n            ) {\\n                // and it was for anyone or specific destination owner that is the same as the current one\\n                // or it was simply that fleetOwner = destinationOwner\\n\\n                // check tax applies with sender\\n                (, uint96 joinTime) = _allianceRegistry.havePlayersAnAllianceInCommon(\\n                    resolution.fleetSender,\\n                    destinationOwner,\\n                    rState.fleetLaunchTime\\n                );\\n                return (true, joinTime == 0 || joinTime > rState.fleetLaunchTime);\\n            }\\n\\n            if (resolution.specific == address(1)) {\\n                // or the specific specify any common alliances (1)\\n\\n                if (rState.fleetOwner == resolution.fleetSender) {\\n                    (, uint96 joinTime) = _allianceRegistry.havePlayersAnAllianceInCommon(\\n                        resolution.fleetSender,\\n                        destinationOwner,\\n                        rState.fleetLaunchTime\\n                    );\\n                    return (joinTime > 0, joinTime > rState.fleetLaunchTime);\\n                } else {\\n                    (, uint96 fleetOwnerJoinTime) = _allianceRegistry.havePlayersAnAllianceInCommon(\\n                        rState.fleetOwner,\\n                        destinationOwner,\\n                        rState.fleetLaunchTime\\n                    );\\n\\n                    if (fleetOwnerJoinTime == 0) {\\n                        // not in an alliance\\n                        return (\\n                            false,\\n                            _isFleetOwnerTaxed(rState.fleetOwner, resolution.fleetSender, rState.fleetLaunchTime)\\n                        );\\n                    }\\n\\n                    // alliance => means gift\\n                    // check if taxed:\\n                    (, uint96 senderJoinTime) = _allianceRegistry.havePlayersAnAllianceInCommon(\\n                        resolution.fleetSender,\\n                        destinationOwner,\\n                        rState.fleetLaunchTime\\n                    );\\n\\n                    return (true, senderJoinTime == 0 || senderJoinTime > rState.fleetLaunchTime);\\n                }\\n            }\\n\\n            if (uint160(resolution.specific) > 1) {\\n                // or a specific alliance that matches\\n\\n                (uint96 joinTimeToSpecific, ) = _allianceRegistry.getAllianceData(\\n                    destinationOwner,\\n                    IAlliance(resolution.specific)\\n                );\\n\\n                if (joinTimeToSpecific > 0) {\\n                    (, uint96 joinTime) = _allianceRegistry.havePlayersAnAllianceInCommon(\\n                        resolution.fleetSender,\\n                        destinationOwner,\\n                        rState.fleetLaunchTime\\n                    );\\n                    return (true, joinTime == 0 || joinTime > rState.fleetLaunchTime);\\n                }\\n            }\\n        } else {\\n            // intent was attack\\n            if (resolution.specific == address(1)) {\\n                // and the attack was on any non-allies\\n\\n                if (rState.fleetOwner == resolution.fleetSender) {\\n                    // make it a gift if the destination owner is actually an ally\\n                    (, uint96 joinTime) = _allianceRegistry.havePlayersAnAllianceInCommon(\\n                        resolution.fleetSender,\\n                        destinationOwner,\\n                        rState.fleetLaunchTime\\n                    );\\n                    return (joinTime > 0, joinTime > rState.fleetLaunchTime);\\n                } else {\\n                    (, uint96 fleetOwnerJoinTime) = _allianceRegistry.havePlayersAnAllianceInCommon(\\n                        rState.fleetOwner,\\n                        destinationOwner,\\n                        rState.fleetLaunchTime\\n                    );\\n\\n                    if (fleetOwnerJoinTime == 0) {\\n                        // not in an alliance\\n                        return (\\n                            false,\\n                            _isFleetOwnerTaxed(rState.fleetOwner, resolution.fleetSender, rState.fleetLaunchTime)\\n                        );\\n                    }\\n\\n                    // alliance => means gift\\n                    // check if taxed:\\n                    (, uint96 senderJoinTime) = _allianceRegistry.havePlayersAnAllianceInCommon(\\n                        resolution.fleetSender,\\n                        destinationOwner,\\n                        rState.fleetLaunchTime\\n                    );\\n\\n                    return (true, senderJoinTime == 0 || senderJoinTime > rState.fleetLaunchTime);\\n                }\\n            }\\n\\n            if (uint160(resolution.specific) > 1 && resolution.specific != destinationOwner) {\\n                // but specific not matching current owner\\n\\n                (uint96 joinTimeToSpecific, ) = _allianceRegistry.getAllianceData(\\n                    destinationOwner,\\n                    IAlliance(resolution.specific)\\n                );\\n\\n                // make it a gift if the destination is not matching the specific alliance\\n                // (or owner, in which case since it is not an alliance, it will also not match)\\n                if (joinTimeToSpecific == 0) {\\n                    (, uint96 joinTime) = _allianceRegistry.havePlayersAnAllianceInCommon(\\n                        resolution.fleetSender,\\n                        destinationOwner,\\n                        rState.fleetLaunchTime\\n                    );\\n                    return (true, joinTime == 0 || joinTime > rState.fleetLaunchTime);\\n                }\\n            }\\n        }\\n        return (false, _isFleetOwnerTaxed(rState.fleetOwner, resolution.fleetSender, rState.fleetLaunchTime));\\n    }\\n\\n    function _isFleetOwnerTaxed(\\n        address fleetOwner,\\n        address fleetSender,\\n        uint40 fleetLaunchTime\\n    ) internal view returns (bool) {\\n        if (fleetOwner == fleetSender) {\\n            return false;\\n        }\\n        (, uint96 joinTime) = _allianceRegistry.havePlayersAnAllianceInCommon(fleetOwner, fleetSender, fleetLaunchTime);\\n        return joinTime == 0 || joinTime > fleetLaunchTime;\\n    }\\n\\n    function _setTravelingUpkeepFromOrigin(uint256 fleetID, ResolutionState memory rState, uint256 location) internal {\\n        // // we have to update the origin\\n        Planet storage fromPlanet = _planets[location];\\n        PlanetUpdateState memory fromPlanetUpdate = _createPlanetUpdateState(fromPlanet, location);\\n        _computePlanetUpdateForTimeElapsed(fromPlanetUpdate);\\n\\n        uint16 production = _production(fromPlanetUpdate.data);\\n        uint256 capWhenActive = _capWhenActive(production);\\n\\n        uint256 refund = rState.futureExtraProduction;\\n        uint256 timePassed = block.timestamp - rState.fleetLaunchTime;\\n        uint256 amountProducedTheWholeTime = (timePassed * uint256(_productionSpeedUp) * uint256(production)) / 1 hours;\\n        uint256 consumed = amountProducedTheWholeTime +\\n            (amountProducedTheWholeTime * _upkeepProductionDecreaseRatePer10000th) /\\n            10000;\\n        if (consumed > refund) {\\n            refund = 0;\\n        } else {\\n            refund -= consumed;\\n        }\\n\\n        int256 newTravelingUpkeep = int256(fromPlanetUpdate.travelingUpkeep) - int256(refund);\\n        if (newTravelingUpkeep < -int256(capWhenActive)) {\\n            newTravelingUpkeep = -int256(capWhenActive);\\n        }\\n        fromPlanetUpdate.travelingUpkeep = int40(newTravelingUpkeep);\\n\\n        _setPlanet(fromPlanet, fromPlanetUpdate, false);\\n\\n        emit BlockTime(block.number, block.timestamp);\\n        emit TravelingUpkeepRefund(\\n            location,\\n            fleetID,\\n            fromPlanetUpdate.numSpaceships,\\n            fromPlanetUpdate.travelingUpkeep,\\n            fromPlanetUpdate.overflow\\n        );\\n    }\\n\\n    function _setAccumulatedAttack(ResolutionState memory rState, PlanetUpdateState memory toPlanetUpdate) internal {\\n        if (!rState.taxed) {\\n            AccumulatedAttack storage attack = _attacks[toPlanetUpdate.location][rState.fleetOwner][rState.arrivalTime];\\n\\n            // NOTE: target is required for the case where a different player capture the planet in-between\\n            //  otherwise, that player would be hitted with higher attack than would be fair\\n            //  hmm would it acutally ? the accumulatedDefenseAdded would still be counted\\n            //  Indeed, the only real player affected by _attacks[location][fleetOwner][arrivalTime] is the fleetOwner\\n            //  regardless of who is owner of the planet\\n            // attack.target = toPlanetUpdate.owner;\\n            // we leave this as is as we do not want to change the struct\\n            attack.damageCausedSoFar = rState.defenderLoss + rState.inFlightPlanetLoss + rState.accumulatedDefenseAdded;\\n            attack.numAttackSpent =\\n                rState.attackerLoss +\\n                rState.accumulatedAttackAdded +\\n                // when victorius we consider the full number of spaceship as used\\n                // this way if a combined attack arrive later, it can still count the whole attack and get a refund\\n                (rState.victory ? toPlanetUpdate.numSpaceships : 0);\\n            attack.averageAttackPower = rState.attackPower;\\n        }\\n    }\\n\\n    function _combinedRefund(\\n        ResolutionState memory rState,\\n        PlanetUpdateState memory toPlanetUpdate\\n    ) internal view returns (uint256 accumulationRefund) {\\n        _updateAccumulation(rState, toPlanetUpdate);\\n        if (rState.accumulatedAttackAdded > 0) {\\n            uint16 attack = rState.attackPower;\\n            uint16 defense = _defense(toPlanetUpdate.data);\\n            uint256 numAttack = rState.fleetQuantity + rState.accumulatedAttackAdded;\\n            (uint32 attackerLoss, ) = _computeFight(numAttack, rState.accumulatedDefenseAdded, attack, defense);\\n            if (rState.accumulatedAttackAdded > attackerLoss) {\\n                accumulationRefund = rState.accumulatedAttackAdded - attackerLoss;\\n                if (accumulationRefund > rState.accumulatedAttackAdded) {\\n                    rState.accumulatedAttackAdded = 0;\\n                } else {\\n                    rState.accumulatedAttackAdded = uint32(uint256(rState.accumulatedAttackAdded) - accumulationRefund);\\n                }\\n            }\\n        }\\n    }\\n\\n    function _createResolutionState(\\n        Fleet storage fleet,\\n        uint256 from\\n    ) internal view returns (ResolutionState memory rState) {\\n        uint32 q = fleet.quantity >> 31 == 1 ? 0 : fleet.quantity;\\n        rState.fleetOwner = fleet.owner;\\n        rState.fleetLaunchTime = fleet.launchTime;\\n        rState.originalQuantity = q;\\n        rState.fleetQuantity = q;\\n        rState.futureExtraProduction = fleet.futureExtraProduction;\\n        rState.fromData = _planetData(from);\\n        rState.attackPower = _attack(rState.fromData);\\n    }\\n\\n    function _recordOrbitLossAccountingForFleetOrigin(\\n        ResolutionState memory rState,\\n        FleetResolution memory resolution\\n    ) internal {\\n        if (rState.inFlightFleetLoss > 0) {\\n            uint256 timeSlot = rState.fleetLaunchTime / (_frontrunningDelay / 2);\\n\\n            // NOTE we already computed that destroyed cannot be smaller than inFlightFleetLoss\\n            //  see _computeInFlightLossForFleet\\n            _inFlight[resolution.from][timeSlot].destroyed -= rState.inFlightFleetLoss;\\n        }\\n    }\\n\\n    function _computeResolutionResult(\\n        ResolutionState memory rState,\\n        PlanetUpdateState memory toPlanetUpdate\\n    ) internal view {\\n        if (rState.taxed) {\\n            rState.fleetQuantity = uint32(\\n                uint256(rState.fleetQuantity) - (uint256(rState.fleetQuantity) * _giftTaxPer10000) / 10000\\n            );\\n        }\\n        if (rState.gifting) {\\n            _computeGiftingResolutionResult(rState, toPlanetUpdate);\\n        } else {\\n            _computeAttackResolutionResult(rState, toPlanetUpdate);\\n        }\\n    }\\n\\n    function _computeGiftingResolutionResult(\\n        ResolutionState memory rState,\\n        PlanetUpdateState memory toPlanetUpdate\\n    ) internal view {\\n        uint256 newNumSpaceships = toPlanetUpdate.numSpaceships +\\n            rState.fleetQuantity +\\n            _combinedRefund(rState, toPlanetUpdate);\\n        if (newNumSpaceships >= ACTIVE_MASK) {\\n            newNumSpaceships = ACTIVE_MASK - 1;\\n        }\\n\\n        toPlanetUpdate.numSpaceships = uint32(newNumSpaceships);\\n        if (!toPlanetUpdate.active) {\\n            // NOTE: not active, overflow is applied on cap = 0\\n            if (toPlanetUpdate.numSpaceships > toPlanetUpdate.overflow) {\\n                toPlanetUpdate.overflow = toPlanetUpdate.numSpaceships;\\n            }\\n        } else {\\n            uint32 cap = uint32(_capWhenActive(_production(toPlanetUpdate.data)));\\n            if (_productionCapAsDuration > 0 && newNumSpaceships > cap) {\\n                if (toPlanetUpdate.numSpaceships - cap > toPlanetUpdate.overflow) {\\n                    toPlanetUpdate.overflow = uint32(toPlanetUpdate.numSpaceships - cap);\\n                }\\n            } else {\\n                toPlanetUpdate.overflow = 0;\\n            }\\n        }\\n    }\\n\\n    function _updateAccumulation(ResolutionState memory rState, PlanetUpdateState memory toPlanetUpdate) internal view {\\n        // TODO 45min config ?\\n        if (!rState.taxed && block.timestamp < rState.arrivalTime + 45 minutes) {\\n            AccumulatedAttack memory acc = _attacks[toPlanetUpdate.location][rState.fleetOwner][rState.arrivalTime];\\n\\n            // TODO  acc.target == toPlanetUpdate.owner || toPlanetUpdate.owner == fleetOwner  so your combined attack works when you get it\\n            // what about your allies ?\\n            // taxed work as he accumulated attack is already shared with allies (s)\\n            // so we should not need to modify here ?\\n            // if (acc.target == toPlanetUpdate.owner && acc.numAttackSpent != 0) {\\n            if (acc.numAttackSpent != 0) {\\n                rState.attackPower = uint16(\\n                    (uint256(rState.attackPower) *\\n                        uint256(rState.fleetQuantity) +\\n                        uint256(acc.averageAttackPower) *\\n                        uint256(acc.numAttackSpent)) / (uint256(rState.fleetQuantity) + uint256(acc.numAttackSpent))\\n                );\\n                rState.accumulatedAttackAdded = acc.numAttackSpent;\\n                rState.accumulatedDefenseAdded = acc.damageCausedSoFar;\\n            }\\n        }\\n    }\\n\\n    function _computeAttackResolutionResult(\\n        ResolutionState memory rState,\\n        PlanetUpdateState memory toPlanetUpdate\\n    ) internal view {\\n        // NOTE natives come back to power once numSPaceships == 0 and planet not active\\n        if (!toPlanetUpdate.active && toPlanetUpdate.numSpaceships < _natives(toPlanetUpdate.data)) {\\n            _updatePlanetUpdateStateAndResolutionStateForNativeAttack(rState, toPlanetUpdate);\\n        } else {\\n            _updateAccumulation(rState, toPlanetUpdate);\\n\\n            _updatePlanetUpdateStateAndResolutionStateForPlanetAttack(rState, toPlanetUpdate);\\n        }\\n    }\\n\\n    function _updatePlanetUpdateStateAndResolutionStateForNativeAttack(\\n        ResolutionState memory rState,\\n        PlanetUpdateState memory toPlanetUpdate\\n    ) internal view {\\n        // NOTE: when we are dealing with native attacks, we do not consider combined attacks\\n        // TODO We need to consider that case in the UI\\n        uint16 attack = _attack(rState.fromData);\\n        uint16 defense = _defense(toPlanetUpdate.data);\\n        uint16 natives = _natives(toPlanetUpdate.data);\\n        (uint32 attackerLoss, uint32 defenderLoss) = _computeFight(rState.fleetQuantity, natives, attack, defense);\\n        rState.attackerLoss = attackerLoss;\\n        if (defenderLoss == natives && rState.fleetQuantity > attackerLoss) {\\n            // (attackerLoss: 0, defenderLoss: 0) means that numAttack was zero as natives cannot be zero\\n            toPlanetUpdate.numSpaceships = rState.fleetQuantity - attackerLoss;\\n            rState.defenderLoss = defenderLoss;\\n            rState.victory = true;\\n            toPlanetUpdate.newOwner = rState.fleetOwner;\\n            // solhint-disable-next-line no-empty-blocks\\n        }\\n        // NOTE else (attacker lost) then nothing happen\\n    }\\n\\n    function _updatePlanetUpdateStateAndResolutionStateForPlanetAttack(\\n        ResolutionState memory rState,\\n        PlanetUpdateState memory toPlanetUpdate\\n    ) internal view {\\n        _updateResolutionStateFromOrbitDefense(rState, toPlanetUpdate);\\n        uint256 numDefense = toPlanetUpdate.numSpaceships +\\n            rState.accumulatedDefenseAdded +\\n            rState.orbitDefense1 +\\n            rState.orbitDefense2;\\n        uint16 production = _production(toPlanetUpdate.data);\\n\\n        if (numDefense == 0 && rState.fleetQuantity > 0) {\\n            // scenario where there is actually no defense on the place,\\n\\n            toPlanetUpdate.newOwner = rState.fleetOwner;\\n            toPlanetUpdate.numSpaceships = rState.fleetQuantity;\\n            if (!toPlanetUpdate.active) {\\n                // numDefense = 0 so numAttack is the overflow, attacker took over\\n                toPlanetUpdate.overflow = toPlanetUpdate.numSpaceships;\\n            } else {\\n                if (_productionCapAsDuration > 0) {\\n                    uint32 cap = uint32(_capWhenActive(production));\\n                    if (toPlanetUpdate.numSpaceships > cap) {\\n                        // numDefense = 0 so numAttack is the overflow, attacker took over\\n                        toPlanetUpdate.overflow = uint32(toPlanetUpdate.numSpaceships - cap);\\n                    } else {\\n                        toPlanetUpdate.overflow = 0;\\n                    }\\n                }\\n            }\\n\\n            rState.victory = true;\\n        } else {\\n            _computeAttack(rState, toPlanetUpdate, numDefense);\\n            _computeTravelingUpkeepReductionFromDefenseLoss(rState, toPlanetUpdate, production);\\n        }\\n    }\\n\\n    function _updateResolutionStateFromOrbitDefense(\\n        ResolutionState memory rState,\\n        PlanetUpdateState memory toPlanetUpdate\\n    ) internal view {\\n        // -----------------------------------------------------------------------------------------------------------\\n        // consider fleets that just departed from the planet (used to prevent front-running, see fleet sending)\\n        // -----------------------------------------------------------------------------------------------------------\\n        uint256 timeSlot = block.timestamp / (_frontrunningDelay / 2);\\n        InFlight storage slot1 = _inFlight[toPlanetUpdate.location][timeSlot - 1];\\n        rState.orbitDefense1 = slot1.flying > 2 ** 31 ? 2 ** 31 - 1 : uint32(slot1.flying);\\n        rState.orbitDefenseDestroyed1 = slot1.destroyed > 2 ** 31 ? 2 ** 31 - 1 : uint32(slot1.destroyed);\\n        InFlight storage slot2 = _inFlight[toPlanetUpdate.location][timeSlot];\\n        rState.orbitDefense2 = slot2.flying > 2 ** 31 ? 2 ** 31 - 1 : uint32(slot2.flying);\\n        rState.orbitDefenseDestroyed2 = slot2.destroyed > 2 ** 31 ? 2 ** 31 - 1 : uint32(slot2.destroyed);\\n    }\\n\\n    // solhint-disable-next-line code-complexity\\n    function _computeAttack(\\n        ResolutionState memory rState,\\n        PlanetUpdateState memory toPlanetUpdate,\\n        uint256 numDefense\\n    ) internal view {\\n        uint16 attack = rState.attackPower;\\n        uint16 defense = _defense(toPlanetUpdate.data);\\n        uint256 numAttack = rState.fleetQuantity + rState.accumulatedAttackAdded;\\n        (uint32 attackerLoss, uint32 defenderLoss) = _computeFight(numAttack, numDefense, attack, defense);\\n        rState.defenderLoss = defenderLoss;\\n        rState.attackerLoss = rState.accumulatedAttackAdded > attackerLoss\\n            ? 0\\n            : attackerLoss - rState.accumulatedAttackAdded;\\n\\n        // (attackerLoss: 0, defenderLoss: 0) could either mean attack was zero or defense was zero :\\n        if (rState.fleetQuantity > 0 && rState.defenderLoss == numDefense) {\\n            // NOTE Attacker wins\\n\\n            // all orbiting fleets are destroyed, inFlightPlanetLoss is all that is left\\n            uint256 inFlightPlanetLoss = numDefense - toPlanetUpdate.numSpaceships - rState.accumulatedDefenseAdded;\\n            if (inFlightPlanetLoss > ACTIVE_MASK) {\\n                // cap it\\n                // TODO investigate potential issues\\n                inFlightPlanetLoss = ACTIVE_MASK - 1;\\n            }\\n            rState.inFlightPlanetLoss = uint32(inFlightPlanetLoss);\\n\\n            rState.defenderLoss = rState.defenderLoss - rState.inFlightPlanetLoss;\\n\\n            toPlanetUpdate.numSpaceships = rState.fleetQuantity - rState.attackerLoss;\\n            rState.victory = true;\\n\\n            toPlanetUpdate.newOwner = rState.fleetOwner;\\n\\n            if (!toPlanetUpdate.active) {\\n                // attack took over, overflow is numSpaceships\\n                toPlanetUpdate.overflow = toPlanetUpdate.numSpaceships;\\n            } else {\\n                if (_productionCapAsDuration > 0) {\\n                    uint16 production = _production(toPlanetUpdate.data);\\n                    uint32 cap = uint32(_capWhenActive(production));\\n                    if (toPlanetUpdate.numSpaceships > cap) {\\n                        if (toPlanetUpdate.numSpaceships - cap > toPlanetUpdate.overflow) {\\n                            toPlanetUpdate.overflow = toPlanetUpdate.numSpaceships - cap;\\n                        }\\n                    } else {\\n                        toPlanetUpdate.overflow = 0;\\n                    }\\n                }\\n            }\\n        } else if (rState.attackerLoss == rState.fleetQuantity) {\\n            // NOTE Defender wins\\n\\n            if (defenderLoss > toPlanetUpdate.numSpaceships + rState.accumulatedDefenseAdded) {\\n                rState.inFlightPlanetLoss =\\n                    defenderLoss -\\n                    toPlanetUpdate.numSpaceships -\\n                    rState.accumulatedDefenseAdded;\\n\\n                toPlanetUpdate.numSpaceships = 0;\\n                // TODO change owner already if incative ?\\n                //  not needed though as this is the same has having numSpaceships = 1 and become zero over time\\n\\n                if (rState.orbitDefense1 >= rState.inFlightPlanetLoss) {\\n                    rState.orbitDefense1 -= rState.inFlightPlanetLoss;\\n                    rState.orbitDefenseDestroyed1 += rState.inFlightPlanetLoss;\\n                } else {\\n                    rState.orbitDefenseDestroyed1 += rState.orbitDefense1;\\n                    uint32 extra = (rState.inFlightPlanetLoss - rState.orbitDefense1);\\n                    if (rState.orbitDefense2 >= extra) {\\n                        rState.orbitDefense2 -= extra;\\n                        rState.orbitDefenseDestroyed2 += extra;\\n                    } else {\\n                        rState.orbitDefenseDestroyed2 += rState.orbitDefense2;\\n                        rState.orbitDefense2 = 0; // should never reach minus but let simply set it to zero\\n                    }\\n                    rState.orbitDefense1 = 0;\\n                }\\n            } else {\\n                toPlanetUpdate.numSpaceships =\\n                    toPlanetUpdate.numSpaceships +\\n                    rState.accumulatedDefenseAdded -\\n                    defenderLoss;\\n\\n                // TODO change owner already if incative and numSpaceship == 0 (like above)\\n                //  not needed though as this is the same has having numSpaceships = 1 and become zero over time\\n            }\\n\\n            // same as numSpaceshipAtArrival - toPlanetUpdate.numSpaceship;\\n            rState.defenderLoss = rState.defenderLoss - rState.inFlightPlanetLoss - rState.accumulatedDefenseAdded;\\n\\n            if (!toPlanetUpdate.active) {\\n                if (defenderLoss > toPlanetUpdate.overflow) {\\n                    toPlanetUpdate.overflow = 0;\\n                } else {\\n                    toPlanetUpdate.overflow -= defenderLoss;\\n                }\\n            } else {\\n                if (_productionCapAsDuration > 0) {\\n                    uint16 production = _production(toPlanetUpdate.data);\\n                    uint32 cap = uint32(_capWhenActive(production));\\n                    if (toPlanetUpdate.numSpaceships > cap) {\\n                        if (defenderLoss <= toPlanetUpdate.overflow) {\\n                            toPlanetUpdate.overflow -= defenderLoss;\\n                        } else {\\n                            toPlanetUpdate.overflow = 0;\\n                        }\\n                    } else {\\n                        toPlanetUpdate.overflow = 0;\\n                    }\\n                }\\n            }\\n        } else {\\n            // should not happen\\n            // because we check for numDefense == 0 before performing the attack, see _updatePlanetUpdateStateAndResolutionStateForPlanetAttack\\n            revert(\\\"ZERO_ZERO\\\");\\n        }\\n    }\\n\\n    function _computeFight(\\n        uint256 numAttack,\\n        uint256 numDefense,\\n        uint256 attack,\\n        uint256 defense\\n    ) internal view returns (uint32 attackerLoss, uint32 defenderLoss) {\\n        if (numAttack == 0 || numDefense == 0) {\\n            // this edge case need to be considered,\\n            // as the result of this function cannot tell from it whos is winning here\\n            return (0, 0);\\n        }\\n\\n        uint256 attackFactor = numAttack *\\n            ((1000000 - _fleetSizeFactor6) + ((_fleetSizeFactor6 * numAttack) / numDefense));\\n        uint256 attackDamage = (attackFactor * attack) / defense / 1000000;\\n\\n        if (numDefense > attackDamage) {\\n            // attack fails\\n            attackerLoss = uint32(numAttack); // all attack destroyed\\n            defenderLoss = uint32(attackDamage); // 1 spaceship will be left at least as attackDamage < numDefense\\n        } else {\\n            // attack succeed\\n            uint256 defenseFactor = numDefense *\\n                ((1000000 - _fleetSizeFactor6) + ((_fleetSizeFactor6 * numDefense) / numAttack));\\n            uint256 defenseDamage = uint32((defenseFactor * defense) / attack / 1000000);\\n\\n            if (defenseDamage >= numAttack) {\\n                defenseDamage = numAttack - 1; // ensure 1 spaceship left\\n            }\\n\\n            attackerLoss = uint32(defenseDamage);\\n            defenderLoss = uint32(numDefense); // all defense destroyed\\n        }\\n    }\\n\\n    function _computeTravelingUpkeepReductionFromDefenseLoss(\\n        ResolutionState memory rState,\\n        PlanetUpdateState memory toPlanetUpdate,\\n        uint16 production\\n    ) internal view {\\n        // allow the attacker to pay for upkeep as part of the attack\\n        // only get to keep the upkeep that was there as a result of spaceships sent away\\n\\n        uint256 capWhenActive = _capWhenActive(production);\\n\\n        int256 totalDefenseLoss = int256(uint256(rState.defenderLoss) + uint256(rState.inFlightPlanetLoss));\\n        int256 newTravelingUpkeep = int256(toPlanetUpdate.travelingUpkeep) - totalDefenseLoss;\\n        if (newTravelingUpkeep < -int256(capWhenActive)) {\\n            newTravelingUpkeep = -int256(capWhenActive);\\n        }\\n        toPlanetUpdate.travelingUpkeep = int40(newTravelingUpkeep);\\n    }\\n\\n    function _recordInOrbitLossAfterAttack(\\n        ResolutionState memory rState,\\n        PlanetUpdateState memory toPlanetUpdate\\n    ) internal {\\n        if (rState.inFlightPlanetLoss > 0) {\\n            InFlight storage slot1 = _inFlight[toPlanetUpdate.location][block.timestamp / (_frontrunningDelay / 2) - 1];\\n            slot1.flying = rState.orbitDefense1;\\n            slot1.destroyed = rState.orbitDefenseDestroyed1;\\n\\n            InFlight storage slot2 = _inFlight[toPlanetUpdate.location][block.timestamp / (_frontrunningDelay / 2)];\\n            slot2.flying = rState.orbitDefense2;\\n            slot2.destroyed = rState.orbitDefenseDestroyed2;\\n        }\\n    }\\n\\n    function _callWithGas(address to, bytes memory data, uint256 gas) internal {\\n        // We want to ensure enough gas were given for the generator, but no more\\n        // This way if the generator is broken/compromised (we are planning to update it)\\n        // then this will always continue to work\\n        // Reversely, a player have to provide enough gas\\n        // and we want to ensure the player can't force a revert on the hook\\n        // In particular. to prevent players to make a call to `remove` fails\\n\\n        if (to != address(0)) {\\n            // we could do the check prior:\\n            // uint256 gasAvailable = gasleft() - 2000;\\n            // require(gasAvailable - gasAvailable / 64  >= gas, \\\"NOT_ENOUGH_GAS_FOR_INNER_CALL\\\");\\n            // to.call{gas: gas}(data);\\n            // but we instead chose to do the check after.\\n            // for more info see: https://ronan.eth.limo/blog/ethereum-gas-dangers/\\n\\n            to.call{gas: gas}(data);\\n            // we use after the gas check as this allow us to not require heavy gas use if not needed\\n            // instead of + 100,000 for 96,000 gas we can just add 1,524 gas (+ a bit more)\\n            require(gasleft() > gas / 63, \\\"NOT_ENOUGH_GAS_FOR_INNER_CALL\\\");\\n        }\\n    }\\n\\n    function _generator() internal view returns (address generator) {\\n        assembly {\\n            // keccak256(\\\"generator\\\") - 1\\n            generator := sload(0x27ec6af4a6510eb9b7e0cc7f39415b7f15e430e53eb0cd3997e7c7e0cf680f6e)\\n        }\\n    }\\n\\n    function _notifyGeneratorAdd(address player, uint256 amount) internal {\\n        _callWithGas(_generator(), abi.encodeWithSelector(IOnStakeChange.add.selector, player, amount), 96000);\\n    }\\n\\n    function _notifyGeneratorRemove(address player, uint256 amount) internal {\\n        _callWithGas(_generator(), abi.encodeWithSelector(IOnStakeChange.remove.selector, player, amount), 96000);\\n    }\\n\\n    function _notifyGeneratorMove(address from, address to, uint256 amount) internal {\\n        _callWithGas(_generator(), abi.encodeWithSelector(IOnStakeChange.move.selector, from, to, amount), 192000);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // PLANET STATS\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    function _planetData(uint256 location) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(_genesis, location));\\n    }\\n\\n    function _subLocation(bytes32 data) internal pure returns (int8 subX, int8 subY) {\\n        subX = 1 - int8(data.value8Mod(0, 3));\\n        subY = 1 - int8(data.value8Mod(2, 3));\\n    }\\n\\n    function _stake(bytes32 data) internal view returns (uint32) {\\n        require(_exists(data), \\\"PLANET_NOT_EXISTS\\\");\\n        // return data.normal16(4, 0x000400050005000A000A000F000F00140014001E001E00280028005000500064);\\n        uint8 productionIndex = data.normal8(12); // production affect the stake value\\n\\n        // TODO remove or decide otherwise:\\n        // uint16 offset = data.normal16(4, 0x0000000100010002000200030003000400040005000500060006000700070008);\\n        // uint16 stakeIndex = productionIndex + offset;\\n        // if (stakeIndex < 4) {\\n        //     stakeIndex = 0;\\n        // } else if (stakeIndex > 19) {\\n        //     stakeIndex = 15;\\n        // } else {\\n        //     stakeIndex -= 4;\\n        // }\\n        uint16 stakeIndex = productionIndex;\\n        return\\n            uint32(\\n                uint256(\\n                    uint16(uint8(_stakeRange[stakeIndex * 2])) * 0x100 + uint16(uint8(_stakeRange[stakeIndex * 2 + 1]))\\n                ) * _stakeMultiplier10000th\\n            );\\n    }\\n\\n    function _production(bytes32 data) internal pure returns (uint16) {\\n        require(_exists(data), \\\"PLANET_NOT_EXISTS\\\");\\n        // TODO TRY : 1800,2100,2400,2700,3000,3300,3600, 3600, 3600, 3600,4000,4400,4800,5400,6200,7200 ?\\n\\n        // 1800,2100,2400,2700,3000,3300,3600, 3600, 3600, 3600,4200,5400,6600,7800,9000,12000\\n        // 0x0708083409600a8c0bb80ce40e100e100e100e101068151819c81e7823282ee0\\n        return data.normal16(12, 0x0708083409600a8c0bb80ce40e100e100e100e101068151819c81e7823282ee0); // per hour\\n    }\\n\\n    function _capWhenActive(uint16 production) internal view returns (uint256) {\\n        return _acquireNumSpaceships + (uint256(production) * _productionCapAsDuration) / 1 hours;\\n    }\\n\\n    function _attack(bytes32 data) internal pure returns (uint16) {\\n        require(_exists(data), \\\"PLANET_NOT_EXISTS\\\");\\n        return 4000 + data.normal8(20) * 400; // 4,000 - 7,000 - 10,000\\n    }\\n\\n    function _defense(bytes32 data) internal pure returns (uint16) {\\n        require(_exists(data), \\\"PLANET_NOT_EXISTS\\\");\\n        return 4000 + data.normal8(28) * 400; // 4,000 - 7,000 - 10,000\\n    }\\n\\n    function _speed(bytes32 data) internal pure returns (uint16) {\\n        require(_exists(data), \\\"PLANET_NOT_EXISTS\\\");\\n        return 5005 + data.normal8(36) * 333; // 5,005 - 7,502.5 - 10,000\\n    }\\n\\n    function _natives(bytes32 data) internal pure returns (uint16) {\\n        require(_exists(data), \\\"PLANET_NOT_EXISTS\\\");\\n        return 15000 + data.normal8(44) * 3000; // 15,000 - 37,500 - 60,000\\n    }\\n\\n    function _exists(bytes32 data) internal pure returns (bool) {\\n        return data.value8Mod(52, 16) == 1; // 16 => 36 so : 1 planet per 6 (=24 min unit) square\\n        // also:\\n        // 20000 average starting numSpaceships (or max?)\\n        // speed of min unit = 30 min ( 1 hour per square)\\n        // production : 20000 per 6 hours\\n        // exit : 3 days ? => 72 distance\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // GETTERS\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    function _getPlanet(uint256 location) internal view returns (Planet storage) {\\n        return _planets[location];\\n    }\\n\\n    function _getPlanetStats(uint256 location) internal view returns (PlanetStats memory) {\\n        bytes32 data = _planetData(location);\\n        require(_exists(data), \\\"no planet in this location\\\");\\n\\n        (int8 subX, int8 subY) = _subLocation(data);\\n        return\\n            PlanetStats({\\n                subX: subX,\\n                subY: subY,\\n                stake: _stake(data),\\n                production: _production(data),\\n                attack: _attack(data),\\n                defense: _defense(data),\\n                speed: _speed(data),\\n                natives: _natives(data)\\n            });\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // UTILS\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    function _activeNumSpaceships(uint32 numSpaceshipsData) internal pure returns (bool active, uint32 numSpaceships) {\\n        active = (numSpaceshipsData & ACTIVE_MASK) == ACTIVE_MASK;\\n        numSpaceships = numSpaceshipsData % (ACTIVE_MASK);\\n    }\\n\\n    function _setActiveNumSpaceships(bool active, uint32 numSpaceships) internal pure returns (uint32) {\\n        return uint32((active ? ACTIVE_MASK : 0) + numSpaceships);\\n    }\\n\\n    function _msgSender() internal view returns (address) {\\n        return msg.sender; // TODO metatx\\n    }\\n\\n    modifier whenNotPaused() {\\n        if (_bootstrapSessionEndTime > 0) {\\n            uint256 timestamp = block.timestamp;\\n            uint256 pauseStart = _bootstrapSessionEndTime;\\n            uint256 pauseEnd = _infinityStartTime;\\n\\n            require(timestamp < pauseStart || timestamp >= pauseEnd, \\\"PAUSED\\\");\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x13665ea772d3c61abee80f7c7a1585fcf5bf7e84253f38615fe328765a969815\",\"license\":\"AGPL-3.0\"},\"src/outerspace/facets/OuterSpaceStakingFacet.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"./OuterSpaceFacetBase.sol\\\";\\n\\ncontract OuterSpaceStakingFacet is OuterSpaceFacetBase {\\n    constructor(Config memory config) OuterSpaceFacetBase(config) {}\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // STAKING / PRODUCTION CAPTURE\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    function onTokenTransfer(address, uint256 amount, bytes calldata data) public returns (bool) {\\n        bool freegift;\\n        if (msg.sender == address(_freeStakingToken)) {\\n            freegift = true;\\n        } else {\\n            require(msg.sender == address(_stakingToken), \\\"INVALID_ERC20\\\");\\n        }\\n\\n        // adhoc support for multiple claim at once\\n        if (data.length > 64) {\\n            (address acquirer, uint256[] memory locations) = abi.decode(data, (address, uint256[]));\\n            uint256 total = 0;\\n            for (uint256 i = 0; i < locations.length; i++) {\\n                uint256 stake = uint256(_stake(_planetData(locations[i]))) * (DECIMALS_14);\\n                _acquire(acquirer, stake, locations[i], freegift); // we do not care of who the payer is\\n                total += stake;\\n            }\\n            require(amount == total, \\\"INVALID_AMOUNT\\\");\\n        } else {\\n            (address acquirer, uint256 location) = abi.decode(data, (address, uint256));\\n            _acquire(acquirer, amount, location, freegift); // we do not care of who the payer is\\n        }\\n        return true;\\n    }\\n\\n    function onTokenPaidFor(address, address forAddress, uint256 amount, bytes calldata data) external returns (bool) {\\n        bool freegift;\\n        if (msg.sender == address(_freeStakingToken)) {\\n            freegift = true;\\n        } else {\\n            require(msg.sender == address(_stakingToken), \\\"INVALID_ERC20\\\");\\n        }\\n        uint256 location = abi.decode(data, (uint256));\\n        _acquire(forAddress, amount, location, freegift); // we do not care of who the payer is\\n        return true;\\n    }\\n\\n    function acquireViaTransferFrom(uint256 location, uint256 amount) public {\\n        address sender = _msgSender();\\n        _acquire(sender, amount, location, false);\\n        _stakingToken.transferFrom(sender, address(this), amount);\\n    }\\n\\n    function acquireViaFreeTokenTransferFrom(uint256 location, uint256 amount) public {\\n        address sender = _msgSender();\\n        _acquire(sender, amount, location, true);\\n        _freeStakingToken.transferFrom(sender, address(this), amount);\\n    }\\n\\n    function acquireViaNativeTokenAndStakingToken(\\n        uint256 location,\\n        uint256 amountToMint,\\n        uint256 tokenAmount\\n    ) public payable {\\n        // TODO permit\\n        address sender = msg.sender;\\n        _acquire(sender, amountToMint + tokenAmount, location, false);\\n        _stakingToken.mint{value: msg.value}(address(this), amountToMint);\\n        _stakingToken.transferFrom(sender, address(this), tokenAmount);\\n    }\\n\\n    function acquireMultipleViaNativeTokenAndStakingToken(\\n        uint256[] memory locations,\\n        uint256 amountToMint,\\n        uint256 tokenAmount\\n    ) public payable {\\n        // TODO permit\\n        address sender = msg.sender;\\n        uint256 total = 0;\\n        for (uint256 i = 0; i < locations.length; i++) {\\n            uint256 stake = uint256(_stake(_planetData(locations[i]))) * (DECIMALS_14);\\n            _acquire(sender, stake, locations[i], false);\\n            total += stake;\\n        }\\n        require(amountToMint + tokenAmount == total, \\\"INVALID_AMOUNT\\\");\\n        _stakingToken.mint{value: msg.value}(address(this), amountToMint);\\n        _stakingToken.transferFrom(sender, address(this), tokenAmount);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // EXIT / WITHDRAWALS\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    function exitFor(address owner, uint256 location) external {\\n        address operator = _msgSender();\\n        if (operator != owner) {\\n            require(_operators[owner][operator], \\\"NOT_AUTHORIZED_TO_SEND\\\");\\n        }\\n        _unsafe_exit_for(owner, location);\\n    }\\n\\n    function exitMultipleFor(address owner, uint256[] calldata locations) external {\\n        address operator = _msgSender();\\n        if (operator != owner) {\\n            require(_operators[owner][operator], \\\"NOT_AUTHORIZED_TO_SEND\\\");\\n        }\\n        uint256 numLocations = locations.length;\\n        for (uint256 i = 0; i < numLocations; i++) {\\n            _unsafe_exit_for(owner, locations[i]);\\n        }\\n    }\\n\\n    function fetchAndWithdrawFor(address owner, uint256[] calldata locations) external {\\n        _fetchAndWithdrawFor(owner, locations);\\n    }\\n\\n    function balanceToWithdraw(address owner) external view returns (uint256) {\\n        return _stakeReadyToBeWithdrawn[owner];\\n    }\\n\\n    function withdrawFor(address owner) external {\\n        uint256 amount = _stakeReadyToBeWithdrawn[owner];\\n        _unsafe_withdrawAll(owner, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x3d6a05f9a95cdce916454f74be2494105344f336a43112999ec99d06f31db206\",\"license\":\"AGPL-3.0\"},\"src/outerspace/interfaces/IOnStakeChange.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\ninterface IOnStakeChange {\\n    function add(address account, uint256 amount) external;\\n\\n    function remove(address account, uint256 amount) external;\\n\\n    function move(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xeb5f9874b6b35990ada4462b815e369b00969e2a3338741f79e9d88037bdf6fa\",\"license\":\"AGPL-3.0\"},\"src/outerspace/types/ImportingOuterSpaceTypes.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IOnStakeChange.sol\\\";\\n\\ninterface ImportingOuterSpaceTypes {\\n    // front running protection : _frontruunningDelay / 2 slots\\n    struct InFlight {\\n        uint32 flying;\\n        uint32 destroyed;\\n        // STORE last attack too, to compute combined attack on it ? uint128 is plainty enough\\n    }\\n\\n    // TODO remove\\n    // struct Account {\\n    //     // TODO add more info\\n    //     // stake for example ? => coild it be used by staking ?\\n    //     // numPlanets ?\\n    //     // numSpaceships ? => probably too much ?\\n    //     uint64 totalProduction;\\n    //     uint64 productionDebt;\\n    // }\\n\\n    struct Discovered {\\n        uint32 minX;\\n        uint32 maxX;\\n        uint32 minY;\\n        uint32 maxY;\\n    }\\n\\n    // TODO split in 2 structs ? PlanetOwnership and PlanetState ?\\n    struct Planet {\\n        address owner;\\n        uint40 ownershipStartTime; // ~ 34865 years, should be enough :)\\n        uint40 exitStartTime; // ~ 34865 years, should be enough :)\\n        // TODO uint16 ?\\n        ///\\n        uint32 numSpaceships; // uint31 + first bit => active // TODO use bool active ?\\n        uint40 lastUpdated; // ~ 34865 years, should be enough :)\\n        int40 travelingUpkeep; // decrease per _upkeepProductionDecreaseRatePer10000th  * production\\n        uint32 overflow;\\n        // bool active; // TODO ?\\n        // bool exiting; // TODO ?\\n    }\\n\\n    struct Fleet {\\n        address owner;\\n        uint40 launchTime; // ~ 34865 years, should be enough :)\\n        uint32 quantity; // TODO? first bit = done? to keep quantity value on-chain post resolution, actually not needed, can be given in the hash\\n        uint24 futureExtraProduction;\\n        address defender;\\n        uint40 arrivalTime;\\n        uint32 defenderLoss;\\n        bool planetActive;\\n        bool victory;\\n        // we got 24bit more to store if needed\\n        // operator ? // signer ?\\n    }\\n\\n    struct FleetData {\\n        bool arrived;\\n        address owner;\\n        uint40 launchTime;\\n        uint32 quantity;\\n        uint64 flyingAtLaunch; // can be more than quantity if multiple fleet were launched around the same time from the same planet\\n        uint64 destroyedAtLaunch;\\n        address defender;\\n        uint40 arrivalTime;\\n        uint32 defenderLoss;\\n        bool planetActive;\\n        bool victory;\\n    }\\n\\n    struct PlanetStats {\\n        int8 subX;\\n        int8 subY;\\n        uint32 stake;\\n        uint16 production;\\n        uint16 attack;\\n        uint16 defense;\\n        uint16 speed;\\n        uint16 natives;\\n    }\\n\\n    struct ExternalPlanet {\\n        address owner;\\n        uint40 ownershipStartTime; // ~ 34865 years, should be enough :)\\n        uint40 exitStartTime; // ~ 34865 years, should be enough :)\\n        uint32 numSpaceships;\\n        uint32 overflow;\\n        uint40 lastUpdated; // ~ 34865 years, should be enough :)\\n        bool active;\\n        // bool exiting;\\n        uint256 reward;\\n    }\\n\\n    struct FleetLaunch {\\n        address fleetSender;\\n        address fleetOwner;\\n        uint256 from;\\n        uint32 quantity;\\n        bytes32 toHash;\\n    }\\n    struct FleetResolution {\\n        uint256 from;\\n        uint256 to;\\n        uint256 distance;\\n        uint256 arrivalTimeWanted;\\n        bool gift;\\n        address specific;\\n        bytes32 secret;\\n        address fleetSender; // does not work ?\\n        address operator; // should be saved ?\\n    }\\n\\n    struct AccumulatedAttack {\\n        address target;\\n        uint32 numAttackSpent;\\n        uint32 damageCausedSoFar;\\n        uint16 averageAttackPower;\\n    }\\n}\\n\",\"keccak256\":\"0x3906d94bc2fb81e50d0de6cb215feca2eed8c9cc257c00d8f014af535f009777\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6103006040523480156200001257600080fd5b5060405162004b7e38038062004b7e8339810160408190526200003591620001ff565b80600060048260a001516200004b919062000333565b60a08301519091506200006082600462000365565b63ffffffff1614620000b85760405162461bcd60e51b815260206004820152601d60248201527f54494d455f5045525f444953545f4e4f545f444956495349424c455f34000000604482015260640160405180910390fd5b81516001600160a01b0390811660809081526020840151821660a052604084015190911660c0908152606084015160e09081529184015161010090815263ffffffff93841661012090815291850151610140908152928501518416610160908152908501518416610180908152918501516101a0908152928501516101c0908152908501516101e09081529185015161020090815292850151841661022090815290850151909316610240908152908401516102609081529184015161028052918301516102a052908201516102c05201516102e05250620003a0565b60405161028081016001600160401b0381118282101715620001c757634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b0381168114620001e557600080fd5b919050565b805163ffffffff81168114620001e557600080fd5b600061028082840312156200021357600080fd5b6200021d62000195565b6200022883620001cd565b81526200023860208401620001cd565b60208201526200024b60408401620001cd565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c08201526200028660e08401620001ea565b60e08201526101006200029b818501620001ea565b9082015261012083810151908201526101408084015190820152610160808401519082015261018080840151908201526101a0620002db818501620001ea565b908201526101c0620002ef848201620001ea565b908201526101e08381015190820152610200808401519082015261022080840151908201526102408084015190820152610260928301519281019290925250919050565b600063ffffffff808416806200035957634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b600063ffffffff808316818516818304811182151516156200039757634e487b7160e01b600052601160045260246000fd5b02949350505050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e0516145ee6200059060003960008181610dbb01526130df015260008181610d7301528181610d9a0152818161308901526130b30152600061117401526000818161119501526111e101526000505060008181612a3501528181612b1a01528181612c070152612cf2015260005050600081816136ed01528181613720015281816137a101526137d4015260008181611fbb0152818161210c01526125c5015260008181611e6a015281816125540152613535015260005050600081816118c401528181611e1e01528181611f1101528181611fe901528181612067015281816121b801526138a10152600081816123f701528181612442015281816124db0152818161251901526135730152600061311b01526000505060005050600081816103fe015281816116b9015281816119810152611d30015260005050600081816102af015281816106ba0152818161080001528181611a1e0152818161335d01526139260152600081816103920152818161055501528181610617015281816107000152818161084601528181610c2801528181610cea01526112fb01526145ee6000f3fe6080604052600436106100bc5760003560e01c8063a4c0ed3611610074578063c95608381161004e578063c9560838146101cb578063e2e9b0791461021c578063f7e111e71461023c57600080fd5b8063a4c0ed361461016b578063afc823701461018b578063b9a1e846146101ab57600080fd5b8063861399e7116100a5578063861399e7146101035780639b6be065146101165780639eca672c1461014b57600080fd5b80632f646f95146100c15780637ba423fb146100e3575b600080fd5b3480156100cd57600080fd5b506100e16100dc366004613cd5565b61024f565b005b3480156100ef57600080fd5b506100e16100fe366004613cd5565b610332565b6100e1610111366004613ddf565b6103c1565b34801561012257600080fd5b50610136610131366004613e9b565b61069f565b60405190151581526020015b60405180910390f35b34801561015757600080fd5b506100e1610166366004613f0e565b6107b1565b34801561017757600080fd5b50610136610186366004613f2b565b6107e5565b34801561019757600080fd5b506100e16101a6366004613f87565b610a0e565b3480156101b757600080fd5b506100e16101c6366004613fb3565b610ad7565b3480156101d757600080fd5b5061020e6101e6366004613f0e565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205490565b604051908152602001610142565b34801561022857600080fd5b506100e1610237366004613fb3565b610bd1565b6100e161024a36600461403b565b610bdc565b3361025d8183856001610d71565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8281166004830152306024830152604482018490527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064015b602060405180830381600087803b1580156102f457600080fd5b505af1158015610308573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032c9190614067565b50505050565b336103408183856000610d71565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8281166004830152306024830152604482018490527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064016102da565b336000805b85518110156104a8576000655af3107a400061045061044b8985815181106103f0576103f0614089565b6020026020010151604080517f00000000000000000000000000000000000000000000000000000000000000006020820152908101829052600090606001604051602081830303815290604052805190602001209050919050565b6110ee565b63ffffffff1661046091906140e7565b9050610488848289858151811061047957610479614089565b60200260200101516000610d71565b6104928184614124565b92505080806104a09061413c565b9150506103c6565b50806104b48486614124565b14610520576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f494e56414c49445f414d4f554e5400000000000000000000000000000000000060448201526064015b60405180910390fd5b6040517f40c10f19000000000000000000000000000000000000000000000000000000008152306004820152602481018590527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906340c10f199034906044016000604051808303818588803b1580156105af57600080fd5b505af11580156105c3573d6000803e3d6000fd5b50506040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152306024830152604482018890527f00000000000000000000000000000000000000000000000000000000000000001693506323b872dd92506064019050602060405180830381600087803b15801561065f57600080fd5b505af1158015610673573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106979190614067565b505050505050565b6000803373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614156106e857506001610787565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610787576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f494e56414c49445f4552433230000000000000000000000000000000000000006044820152606401610517565b600061079584860186614175565b90506107a387878385610d71565b506001979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600260205260409020546107e1828261124d565b5050565b6000803373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016141561082e575060016108cd565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146108cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f494e56414c49445f4552433230000000000000000000000000000000000000006044820152606401610517565b60408311156109e0576000806108e58587018761418e565b915091506000805b825181101561096e576000655af3107a400061091761044b8685815181106103f0576103f0614089565b63ffffffff1661092791906140e7565b905061094e858286858151811061094057610940614089565b602002602001015189610d71565b6109588184614124565b92505080806109669061413c565b9150506108ed565b508088146109d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f494e56414c49445f414d4f554e540000000000000000000000000000000000006044820152606401610517565b505050610a02565b6000806109ef85870187613f87565b915091506109ff82888386610d71565b50505b50600195945050505050565b3373ffffffffffffffffffffffffffffffffffffffff83168114610ac85773ffffffffffffffffffffffffffffffffffffffff80841660009081526003602090815260408083209385168352929052205460ff16610ac8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4e4f545f415554484f52495a45445f544f5f53454e44000000000000000000006044820152606401610517565b610ad28383611433565b505050565b3373ffffffffffffffffffffffffffffffffffffffff84168114610b915773ffffffffffffffffffffffffffffffffffffffff80851660009081526003602090815260408083209385168352929052205460ff16610b91576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4e4f545f415554484f52495a45445f544f5f53454e44000000000000000000006044820152606401610517565b8160005b8181101561069757610bbf86868684818110610bb357610bb3614089565b90506020020135611433565b80610bc98161413c565b915050610b95565b610ad283838361171b565b33610bf381610beb8486614124565b866000610d71565b6040517f40c10f19000000000000000000000000000000000000000000000000000000008152306004820152602481018490527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906340c10f199034906044016000604051808303818588803b158015610c8257600080fd5b505af1158015610c96573d6000803e3d6000fd5b50506040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152306024830152604482018790527f00000000000000000000000000000000000000000000000000000000000000001693506323b872dd92506064019050602060405180830381600087803b158015610d3257600080fd5b505af1158015610d46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6a9190614067565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000015610e5257427f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000081831080610de85750808310155b610e4e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f50415553454400000000000000000000000000000000000000000000000000006044820152606401610517565b5050505b60008281526020819052604081206040805160e081018252825473ffffffffffffffffffffffffffffffffffffffff8116825264ffffffffff74010000000000000000000000000000000000000000820481166020840152790100000000000000000000000000000000000000000000000000909104811692820192909252600183015463ffffffff8082166060840152640100000000820490931660808301526901000000000000000000810460040b60a08301526e010000000000000000000000000000900490911660c0820152909150600090610f329085611c24565b9050655af3107a4000610f498261014001516110ee565b63ffffffff16610f5991906140e7565b8514610fc1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e56414c49445f5354414b455f414d4f554e540000000000000000000000006044820152606401610517565b610fca81611d8c565b610fd48682612274565b610fe082826000612626565b610fe984612941565b8215611005576000848152600b60205260409020429055611015565b6000848152600b60205260408120555b604080514381524260208201527f438e507c246c311193c77528e3de231eec8ce4727cce091a1dbbecf85b427893910160405180910390a1838673ffffffffffffffffffffffffffffffffffffffff167f9b17abd3d9e9f2eb79e7b7c875e68b77a80c7379ba64ec6ac0d1c254d303269b836060015184608001518560e001518a896040516110d795949392919063ffffffff958616815260049490940b60208501529190931660408301526060820192909252901515608082015260a00190565b60405180910390a361069781610120015186612e21565b60006110f982612f1e565b61115f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f504c414e45545f4e4f545f4558495354530000000000000000000000000000006044820152606401610517565b600061116c83600c612f3a565b905060ff81167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006111bf8360026141de565b6111ca906001614208565b61ffff16602081106111de576111de614089565b1a7f000000000000000000000000000000000000000000000000000000000000000061120b8460026141de565b61ffff166020811061121f5761121f614089565b61122d91901a6101006141de565b6112379190614208565b61ffff1661124591906140e7565b949350505050565b73ffffffffffffffffffffffffffffffffffffffff821660008181526002602090815260408083208390558051858152918201929092527f05eefb5f2a67125e8c65550a4ffa0f542f75624e866ef58fb72bfb5475403092910160405180910390a26040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b15801561133f57600080fd5b505af1158015611353573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113779190614067565b6113dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4641494c45445f5452414e5346455200000000000000000000000000000000006044820152606401610517565b604080516000808252602082015273ffffffffffffffffffffffffffffffffffffffff8416917f05eefb5f2a67125e8c65550a4ffa0f542f75624e866ef58fb72bfb547540309291015b60405180910390a25050565b600081815260208190526040812060018101549091906114589063ffffffff16612fd6565b509050806114c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e4f545f414354495645000000000000000000000000000000000000000000006044820152606401610517565b815473ffffffffffffffffffffffffffffffffffffffff858116911614611545576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e4f545f4f574e455200000000000000000000000000000000000000000000006044820152606401610517565b8154790100000000000000000000000000000000000000000000000000900464ffffffffff16156115d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f45584954494e475f414c524541445900000000000000000000000000000000006044820152606401610517565b81547fffff0000000000ffffffffffffffffffffffffffffffffffffffffffffffffff167901000000000000000000000000000000000000000000000000004264ffffffffff8116919091029190911783556040805143815260208101929092527f438e507c246c311193c77528e3de231eec8ce4727cce091a1dbbecf85b427893910160405180910390a1604051839073ffffffffffffffffffffffffffffffffffffffff8616907fb9182e4e152947f1e6691fa0ee6f68f21f607fed825945c270e69995acad805f90600090a361032c84655af3107a400061170661044b87604080517f00000000000000000000000000000000000000000000000000000000000000006020820152908101829052600090606001604051602081830303815290604052805190602001209050919050565b63ffffffff1661171691906140e7565b612ff5565b60008060005b83811015611ba057600061175886868481811061174057611740614089565b90506020020135600090815260208190526040902090565b805490915061178a90790100000000000000000000000000000000000000000000000000900464ffffffffff16613070565b15611b8d57805473ffffffffffffffffffffffffffffffffffffffff888116911614611812576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e4f545f4f574e455200000000000000000000000000000000000000000000006044820152606401610517565b85858381811061182457611824614089565b90506020020135600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46000600b600088888681811061189e5761189e614089565b9050602002013581526020019081526020016000205490506000811115611af0576118ec7f00000000000000000000000000000000000000000000000000000000000000006207e90061425d565b6118fc9063ffffffff1682614124565b8254790100000000000000000000000000000000000000000000000000900464ffffffffff1610611a955781546000906119d39073ffffffffffffffffffffffffffffffffffffffff1689898781811061195857611958614089565b905060200201356119ce8b8b8981811061197457611974614089565b90506020020135604080517f00000000000000000000000000000000000000000000000000000000000000006020820152908101829052600090606001604051602081830303815290604052805190602001209050919050565b61314e565b90506119df8187614124565b6040517ff6b911bc00000000000000000000000000000000000000000000000000000000815230600482018190526024820152604481018390529096507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063f6b911bc90606401600060405180830381600087803b158015611a7757600080fd5b505af1158015611a8b573d6000803e3d6000fd5b5050505050611b2b565b8154611adf9073ffffffffffffffffffffffffffffffffffffffff16888886818110611ac357611ac3614089565b905060200201356119ce8a8a8881811061197457611974614089565b611ae99085614124565b9350611b2b565b8154611b1e9073ffffffffffffffffffffffffffffffffffffffff16888886818110611ac357611ac3614089565b611b289086614124565b94505b5080547fffff0000000000000000000000000000000000000000000000000000000000001681556001810180547fffffffffffffffffffffffffffff0000000000000000000000000000000000001664010000000064ffffffffff4216021790555b5080611b988161413c565b915050611721565b5073ffffffffffffffffffffffffffffffffffffffff8516600090815260026020526040812054611bd2908490614124565b9050611bde868261124d565b73ffffffffffffffffffffffffffffffffffffffff86166000908152600a6020526040812054611c0f908490614124565b9050611c1b87826132ac565b50505050505050565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810191909152600080611c958560600151612fd6565b85855260808088015164ffffffffff908116602088015283151560408089019190915263ffffffff80851660608a015260a0808c015160040b948a0194909452908a01805183169389019390935291511660c0808801919091528801511660e0860152865173ffffffffffffffffffffffffffffffffffffffff9081166101008701528751166101208601529092509050611d7d84604080517f00000000000000000000000000000000000000000000000000000000000000006020820152908101829052600090606001604051602081830303815290604052805190602001209050919050565b61014084015250909392505050565b60a081015164ffffffffff1615611ddd57611daa8160a00151613070565b15611ddd57600060c082018190526060820181905260808201819052610120820181905260e08201819052604090910152565b6000816020015164ffffffffff1642611df69190614280565b90506000611e0883610140015161348e565b90506000610e1061ffff8316611e4463ffffffff7f000000000000000000000000000000000000000000000000000000000000000016866140e7565b611e4e91906140e7565b611e589190614297565b606085015190915063ffffffff1660007f00000000000000000000000000000000000000000000000000000000000000001561218e576000611e998561352b565b905060008760400151611ead576000611eaf565b815b905080841115611f955760e08801516107089063ffffffff1615611f0157828960e0015163ffffffff16610708611ee691906140e7565b611ef09190614297565b9050610708811015611f0157506107085b6000610e1082611f3763ffffffff7f0000000000000000000000000000000000000000000000000000000000000000168c6140e7565b611f4191906140e7565b611f4b9190614297565b905080611f56575060015b611f608387614280565b811115611f7457611f718387614280565b90505b896040015115611f82578094505b611f8c8187614280565b955050506120f7565b8760400151156120f75760008590506000896080015160040b13156120bd5760006127107f000000000000000000000000000000000000000000000000000000000000000061200e61ffff8b1663ffffffff7f0000000000000000000000000000000000000000000000000000000000000000166140e7565b61201891906140e7565b6120229190614297565b60808b015161203a9064ffffffffff16610e106140e7565b6120449190614297565b9050888110612055578194506120af565b610e1061ffff891661208d63ffffffff7f000000000000000000000000000000000000000000000000000000000000000016846140e7565b61209791906140e7565b6120a19190614297565b9450818511156120af578194505b6120b98583614280565b9150505b60006120c98684614280565b9050808211156120ed576120dd8183614280565b6120e79086614124565b94508091505b611f8c8287614124565b876040015115612187576000836127106121317f0000000000000000000000000000000000000000000000000000000000000000896140e7565b61213b9190614297565b6121459190614124565b905060008160040b8a6080015160040b61215f91906142ab565b905061216a8361431f565b81121561217d5761217a8361431f565b90505b60040b60808a0152505b5050612216565b8560400151156121a9576121a28383614124565b9150612216565b6000610e106121de63ffffffff7f000000000000000000000000000000000000000000000000000000000000000016886140e7565b6121ea906107086140e7565b6121f49190614297565b9050828111156122075750600091612214565b6122118184614280565b92505b505b638000000082106122395761223060016380000000614358565b63ffffffff1691505b63ffffffff82166060870152604086015115801561225f5750606086015163ffffffff16155b15610697576000610120870152505050505050565b8060400151156122e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5354494c4c5f41435449564500000000000000000000000000000000000000006044820152606401610517565b6000816060015163ffffffff166000141561230e57612303826101400151613598565b61ffff1690506123a8565b8273ffffffffffffffffffffffffffffffffffffffff1682610100015173ffffffffffffffffffffffffffffffffffffffff16146123a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4f434355504945440000000000000000000000000000000000000000000000006044820152606401610517565b60006123b883610140015161348e565b905060006123c58261352b565b73ffffffffffffffffffffffffffffffffffffffff8616610120860152905063ffffffff83161561251757600061243d7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168563ffffffff1661271061243489610140015161362f565b61ffff166136c6565b5090507f000000000000000000000000000000000000000000000000000000000000000063ffffffff168163ffffffff16106124d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4641494c45445f434150545552454400000000000000000000000000000000006044820152606401610517565b6124ff817f0000000000000000000000000000000000000000000000000000000000000000614358565b63ffffffff16606086015250600060e08501526125b8565b7f000000000000000000000000000000000000000000000000000000000000000084606001818151612549919061437d565b63ffffffff169052507f0000000000000000000000000000000000000000000000000000000000000000156125b8578063ffffffff16846060015163ffffffff1611156125b0578084606001516125a09190614358565b63ffffffff1660e08501526125b8565b600060e08501525b60608401516127106125f07f000000000000000000000000000000000000000000000000000000000000000063ffffffff85166140e7565b6125fa9190614297565b6126039061439c565b61260d91906143db565b60030b6080850152505060016040909201919091525050565b60008260a0015164ffffffffff1611801561264a575060c082015164ffffffffff16155b156126585761265882613867565b81610120015173ffffffffffffffffffffffffffffffffffffffff1682610100015173ffffffffffffffffffffffffffffffffffffffff16146127bd5761012082015183547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90911690811784551561272c5782547fffffffffffffff0000000000ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000004264ffffffffff1602178355612753565b82547fffffffffffffff0000000000ffffffffffffffffffffffffffffffffffffffff1683555b816000015182610120015173ffffffffffffffffffffffffffffffffffffffff1683610100015173ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b80156127ee5782547fffff0000000000ffffffffffffffffffffffffffffffffffffffffffffffffff16835561285f565b8160a0015164ffffffffff168260c0015164ffffffffff161461285f5760c0820151835464ffffffffff909116790100000000000000000000000000000000000000000000000000027fffff0000000000ffffffffffffffffffffffffffffffffffffffffffffffffff9091161783555b61287182604001518360600151613b23565b60019093018054608084015160e0909401514264ffffffffff908116640100000000027fffffffffffffffffffffffffffffffffffffffffffffff0000000000ffffffff63ffffffff9384166e01000000000000000000000000000002167fffffffffffffffffffffffffffff00000000ffffffffff0000000000ffffffff929097166901000000000000000000027fffffffffffffffffffffffffffffffffffff0000000000ffffffffff00000000909416979092169690961791909117949094169290921792909217905550565b604080516080808201835260055463ffffffff80821684526401000000008204811660208501526801000000000000000082048116948401949094526c0100000000000000000000000090049092166060820152906fffffffffffffffffffffffffffffffff8316600f0b9083901d600080831215612aa157835163ffffffff166129cb8461431f565b1315612a33576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4e4f545f524541434841424c455f5945545f4d494e58000000000000000000006044820152606401610517565b7f000000000000000000000000000000000000000000000000000000000000000060030b612a608461431f565b612a6a9190614440565b925063ffffffff831315612a805763ffffffff92505b835163ffffffff16831315612a9c575063ffffffff8216835260015b612b80565b836020015163ffffffff16831315612b15576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4e4f545f524541434841424c455f5945545f4d415858000000000000000000006044820152606401610517565b612b427f000000000000000000000000000000000000000000000000000000000000000060030b84614440565b925063ffffffff831315612b585763ffffffff92505b8263ffffffff16846020015163ffffffff161015612b80575063ffffffff8216602084015260015b6000821215612c7957604084015163ffffffff16612b9d8361431f565b1315612c05576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4e4f545f524541434841424c455f5945545f4d494e59000000000000000000006044820152606401610517565b7f000000000000000000000000000000000000000000000000000000000000000060030b612c328361431f565b612c3c9190614440565b915063ffffffff821315612c525763ffffffff91505b81846040015163ffffffff161215612c74575063ffffffff8116604084015260015b612d52565b836060015163ffffffff16821315612ced576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4e4f545f524541434841424c455f5945545f4d415859000000000000000000006044820152606401610517565b612d1a7f000000000000000000000000000000000000000000000000000000000000000060030b83614440565b915063ffffffff821315612d305763ffffffff91505b81846060015163ffffffff161215612d52575063ffffffff8116606084015260015b8015610d6a5783516005805460208701516040880151606089015163ffffffff9081166c01000000000000000000000000027fffffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffff9282166801000000000000000002929092167fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff938216640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090951691909616179290921716929092179190911790555050505050565b6107e1612e4c7f27ec6af4a6510eb9b7e0cc7f39415b7f15e430e53eb0cd3997e7c7e0cf680f6e5490565b60405173ffffffffffffffffffffffffffffffffffffffff85166024820152604481018490527ff5d82b6b00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915262017700613b49565b6000612f2d8260346010613c46565b60ff166001149050919050565b600080612f4984846040613c46565b90506000612f586002836144b4565b90506000612f676002846144d6565b905060007f01223334444555555666666677777777888888889999999aaaaaabbbbcccddef60ff841660208110612fa057612fa0614089565b1a905060ff8216612fbe5760048160ff16901c945050505050612fd0565b612fc96010826144d6565b9450505050505b92915050565b6380000000818116811490600090612fee90846144f8565b9050915091565b6107e16130207f27ec6af4a6510eb9b7e0cc7f39415b7f15e430e53eb0cd3997e7c7e0cf680f6e5490565b60405173ffffffffffffffffffffffffffffffffffffffff85166024820152604481018490527fabe7f1ab0000000000000000000000000000000000000000000000000000000090606401612e98565b600064ffffffffff821661308657506000919050565b427f0000000000000000000000000000000000000000000000000000000000000000158015906130d657507f00000000000000000000000000000000000000000000000000000000000000008110155b801561310857507f00000000000000000000000000000000000000000000000000000000000000008364ffffffffff16105b156131165750600192915050565b6131477f000000000000000000000000000000000000000000000000000000000000000064ffffffffff8516614124565b1092915050565b6000655af3107a4000613160836110ee565b63ffffffff1661317091906140e7565b604080514381524260208201529192507f438e507c246c311193c77528e3de231eec8ce4727cce091a1dbbecf85b427893910160405180910390a1828473ffffffffffffffffffffffffffffffffffffffff167f1c363b29828a892b7cddafe9583ef52e0d5aca0ea7011bda6ccf039e1781f738836040516131f491815260200190565b60405180910390a360008381526007602052604090205480156132a45773ffffffffffffffffffffffffffffffffffffffff85166000818152600860209081526040808320858452825280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558783526007909152808220829055518392879290917f74f110a1e0cd4892234c7ba49df9f8a354cd8d29b272f7557c9b8c3c38a653369190a45b509392505050565b73ffffffffffffffffffffffffffffffffffffffff82166000818152600a602090815260408083209290925581518481526001918101919091527f05eefb5f2a67125e8c65550a4ffa0f542f75624e866ef58fb72bfb5475403092910160405180910390a26040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b1580156133a157600080fd5b505af11580156133b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133d99190614067565b61343f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4641494c45445f5452414e5346455200000000000000000000000000000000006044820152606401610517565b60408051600081526001602082015273ffffffffffffffffffffffffffffffffffffffff8416917f05eefb5f2a67125e8c65550a4ffa0f542f75624e866ef58fb72bfb54754030929101611427565b600061349982612f1e565b6134ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f504c414e45545f4e4f545f4558495354530000000000000000000000000000006044820152606401610517565b612fd082600c7f0708083409600a8c0bb80ce40e100e100e100e101068151819c81e7823282ee0613c5b565b6000610e1061355e7f000000000000000000000000000000000000000000000000000000000000000061ffff85166140e7565b6135689190614297565b612fd09063ffffffff7f000000000000000000000000000000000000000000000000000000000000000016614124565b60006135a382612f1e565b613609576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f504c414e45545f4e4f545f4558495354530000000000000000000000000000006044820152606401610517565b61361482602c612f3a565b6136239060ff16610bb86141de565b612fd090613a98614208565b600061363a82612f1e565b6136a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f504c414e45545f4e4f545f4558495354530000000000000000000000000000006044820152606401610517565b6136ab82601c612f3a565b6136ba9060ff166101906141de565b612fd090610fa0614208565b6000808515806136d4575084155b156136e45750600090508061385e565b600085613711887f00000000000000000000000000000000000000000000000000000000000000006140e7565b61371b9190614297565b6137487f0000000000000000000000000000000000000000000000000000000000000000620f4240614280565b6137529190614124565b61375c90886140e7565b90506000620f42408561376f88856140e7565b6137799190614297565b6137839190614297565b9050808711156137985787935080925061385b565b6000886137c5897f00000000000000000000000000000000000000000000000000000000000000006140e7565b6137cf9190614297565b6137fc7f0000000000000000000000000000000000000000000000000000000000000000620f4240614280565b6138069190614124565b61381090896140e7565b90506000620f42408861382389856140e7565b61382d9190614297565b6138379190614297565b63ffffffff1690508981106138545761385160018b614280565b90505b9450879350505b50505b94509492505050565b6000613882826101000151836000015184610140015161314e565b82516000908152600b60205260409020549091508015613aed576138c97f00000000000000000000000000000000000000000000000000000000000000006207e90061425d565b6138d99063ffffffff1682614124565b8360a0015164ffffffffff1610613a45576040517ff6b911bc00000000000000000000000000000000000000000000000000000000815230600482018190526024820152604481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063f6b911bc90606401600060405180830381600087803b15801561397f57600080fd5b505af1158015613993573d6000803e3d6000fd5b5050505061010083015173ffffffffffffffffffffffffffffffffffffffff166000908152600260205260408120546139cd908490614124565b6101008501805173ffffffffffffffffffffffffffffffffffffffff9081166000908152600260209081526040808320869055935184518681529182019290925293945016917f05eefb5f2a67125e8c65550a4ffa0f542f75624e866ef58fb72bfb547540309291015b60405180910390a250505050565b61010083015173ffffffffffffffffffffffffffffffffffffffff166000908152600a6020526040812054613a7b908490614124565b6101008501805173ffffffffffffffffffffffffffffffffffffffff9081166000908152600a6020908152604091829020859055925181518581526001948101949094529394509216917f05eefb5f2a67125e8c65550a4ffa0f542f75624e866ef58fb72bfb54754030929101613a37565b61010083015173ffffffffffffffffffffffffffffffffffffffff166000908152600260205260408120546139cd908490614124565b60008183613b32576000613b38565b63800000005b613b42919061437d565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff831615610ad2578273ffffffffffffffffffffffffffffffffffffffff168183604051613b8b919061451b565b60006040518083038160008787f1925050503d8060008114613bc9576040519150601f19603f3d011682016040523d82523d6000602084013e613bce565b606091505b505050603f81613bde9190614297565b5a11610ad2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4e4f545f454e4f5547485f4741535f464f525f494e4e45525f43414c4c0000006044820152606401610517565b600061124560ff80841690851686901c614556565b600080613c688585612f3a565b905082613c7682600261456a565b613c81906001614593565b60ff1660208110613c9457613c94614089565b1a83613ca183600261456a565b60ff1660208110613cb457613cb4614089565b613cc291901a6101006141de565b613ccc9190614208565b95945050505050565b60008060408385031215613ce857600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f830112613d3757600080fd5b8135602067ffffffffffffffff80831115613d5457613d54613cf7565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108482111715613d9757613d97613cf7565b604052938452858101830193838101925087851115613db557600080fd5b83870191505b84821015613dd457813583529183019190830190613dbb565b979650505050505050565b600080600060608486031215613df457600080fd5b833567ffffffffffffffff811115613e0b57600080fd5b613e1786828701613d26565b9660208601359650604090950135949350505050565b73ffffffffffffffffffffffffffffffffffffffff81168114613e4f57600080fd5b50565b60008083601f840112613e6457600080fd5b50813567ffffffffffffffff811115613e7c57600080fd5b602083019150836020828501011115613e9457600080fd5b9250929050565b600080600080600060808688031215613eb357600080fd5b8535613ebe81613e2d565b94506020860135613ece81613e2d565b935060408601359250606086013567ffffffffffffffff811115613ef157600080fd5b613efd88828901613e52565b969995985093965092949392505050565b600060208284031215613f2057600080fd5b8135613b4281613e2d565b60008060008060608587031215613f4157600080fd5b8435613f4c81613e2d565b935060208501359250604085013567ffffffffffffffff811115613f6f57600080fd5b613f7b87828801613e52565b95989497509550505050565b60008060408385031215613f9a57600080fd5b8235613fa581613e2d565b946020939093013593505050565b600080600060408486031215613fc857600080fd5b8335613fd381613e2d565b9250602084013567ffffffffffffffff80821115613ff057600080fd5b818601915086601f83011261400457600080fd5b81358181111561401357600080fd5b8760208260051b850101111561402857600080fd5b6020830194508093505050509250925092565b60008060006060848603121561405057600080fd5b505081359360208301359350604090920135919050565b60006020828403121561407957600080fd5b81518015158114613b4257600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561411f5761411f6140b8565b500290565b60008219821115614137576141376140b8565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561416e5761416e6140b8565b5060010190565b60006020828403121561418757600080fd5b5035919050565b600080604083850312156141a157600080fd5b82356141ac81613e2d565b9150602083013567ffffffffffffffff8111156141c857600080fd5b6141d485828601613d26565b9150509250929050565b600061ffff808316818516818304811182151516156141ff576141ff6140b8565b02949350505050565b600061ffff808316818516808303821115614225576142256140b8565b01949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600063ffffffff808416806142745761427461422e565b92169190910492915050565b600082821015614292576142926140b8565b500390565b6000826142a6576142a661422e565b500490565b6000808312837f8000000000000000000000000000000000000000000000000000000000000000018312811516156142e5576142e56140b8565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615614319576143196140b8565b50500390565b60007f8000000000000000000000000000000000000000000000000000000000000000821415614351576143516140b8565b5060000390565b600063ffffffff83811690831681811015614375576143756140b8565b039392505050565b600063ffffffff808316818516808303821115614225576142256140b8565b60008160030b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000008114156143d2576143d26140b8565b60000392915050565b60008160030b8360030b60008112817fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000183128115161561441e5761441e6140b8565b81637fffffff018313811615614436576144366140b8565b5090039392505050565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0384138115161561447a5761447a6140b8565b827f80000000000000000000000000000000000000000000000000000000000000000384128116156144ae576144ae6140b8565b50500190565b600060ff8316806144c7576144c761422e565b8060ff84160491505092915050565b600060ff8316806144e9576144e961422e565b8060ff84160691505092915050565b600063ffffffff8084168061450f5761450f61422e565b92169190910692915050565b6000825160005b8181101561453c5760208186018101518583015201614522565b8181111561454b576000828501525b509190910192915050565b6000826145655761456561422e565b500690565b600060ff821660ff84168160ff048111821515161561458b5761458b6140b8565b029392505050565b600060ff821660ff84168060ff038211156145b0576145b06140b8565b01939250505056fea2646970667358221220b1fd52208f66afe3994c20263a4745fa276c500e7b19c8177e207f7c1980974164736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100bc5760003560e01c8063a4c0ed3611610074578063c95608381161004e578063c9560838146101cb578063e2e9b0791461021c578063f7e111e71461023c57600080fd5b8063a4c0ed361461016b578063afc823701461018b578063b9a1e846146101ab57600080fd5b8063861399e7116100a5578063861399e7146101035780639b6be065146101165780639eca672c1461014b57600080fd5b80632f646f95146100c15780637ba423fb146100e3575b600080fd5b3480156100cd57600080fd5b506100e16100dc366004613cd5565b61024f565b005b3480156100ef57600080fd5b506100e16100fe366004613cd5565b610332565b6100e1610111366004613ddf565b6103c1565b34801561012257600080fd5b50610136610131366004613e9b565b61069f565b60405190151581526020015b60405180910390f35b34801561015757600080fd5b506100e1610166366004613f0e565b6107b1565b34801561017757600080fd5b50610136610186366004613f2b565b6107e5565b34801561019757600080fd5b506100e16101a6366004613f87565b610a0e565b3480156101b757600080fd5b506100e16101c6366004613fb3565b610ad7565b3480156101d757600080fd5b5061020e6101e6366004613f0e565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205490565b604051908152602001610142565b34801561022857600080fd5b506100e1610237366004613fb3565b610bd1565b6100e161024a36600461403b565b610bdc565b3361025d8183856001610d71565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8281166004830152306024830152604482018490527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064015b602060405180830381600087803b1580156102f457600080fd5b505af1158015610308573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032c9190614067565b50505050565b336103408183856000610d71565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8281166004830152306024830152604482018490527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064016102da565b336000805b85518110156104a8576000655af3107a400061045061044b8985815181106103f0576103f0614089565b6020026020010151604080517f00000000000000000000000000000000000000000000000000000000000000006020820152908101829052600090606001604051602081830303815290604052805190602001209050919050565b6110ee565b63ffffffff1661046091906140e7565b9050610488848289858151811061047957610479614089565b60200260200101516000610d71565b6104928184614124565b92505080806104a09061413c565b9150506103c6565b50806104b48486614124565b14610520576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f494e56414c49445f414d4f554e5400000000000000000000000000000000000060448201526064015b60405180910390fd5b6040517f40c10f19000000000000000000000000000000000000000000000000000000008152306004820152602481018590527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906340c10f199034906044016000604051808303818588803b1580156105af57600080fd5b505af11580156105c3573d6000803e3d6000fd5b50506040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152306024830152604482018890527f00000000000000000000000000000000000000000000000000000000000000001693506323b872dd92506064019050602060405180830381600087803b15801561065f57600080fd5b505af1158015610673573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106979190614067565b505050505050565b6000803373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614156106e857506001610787565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610787576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f494e56414c49445f4552433230000000000000000000000000000000000000006044820152606401610517565b600061079584860186614175565b90506107a387878385610d71565b506001979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600260205260409020546107e1828261124d565b5050565b6000803373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016141561082e575060016108cd565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146108cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f494e56414c49445f4552433230000000000000000000000000000000000000006044820152606401610517565b60408311156109e0576000806108e58587018761418e565b915091506000805b825181101561096e576000655af3107a400061091761044b8685815181106103f0576103f0614089565b63ffffffff1661092791906140e7565b905061094e858286858151811061094057610940614089565b602002602001015189610d71565b6109588184614124565b92505080806109669061413c565b9150506108ed565b508088146109d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f494e56414c49445f414d4f554e540000000000000000000000000000000000006044820152606401610517565b505050610a02565b6000806109ef85870187613f87565b915091506109ff82888386610d71565b50505b50600195945050505050565b3373ffffffffffffffffffffffffffffffffffffffff83168114610ac85773ffffffffffffffffffffffffffffffffffffffff80841660009081526003602090815260408083209385168352929052205460ff16610ac8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4e4f545f415554484f52495a45445f544f5f53454e44000000000000000000006044820152606401610517565b610ad28383611433565b505050565b3373ffffffffffffffffffffffffffffffffffffffff84168114610b915773ffffffffffffffffffffffffffffffffffffffff80851660009081526003602090815260408083209385168352929052205460ff16610b91576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4e4f545f415554484f52495a45445f544f5f53454e44000000000000000000006044820152606401610517565b8160005b8181101561069757610bbf86868684818110610bb357610bb3614089565b90506020020135611433565b80610bc98161413c565b915050610b95565b610ad283838361171b565b33610bf381610beb8486614124565b866000610d71565b6040517f40c10f19000000000000000000000000000000000000000000000000000000008152306004820152602481018490527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906340c10f199034906044016000604051808303818588803b158015610c8257600080fd5b505af1158015610c96573d6000803e3d6000fd5b50506040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152306024830152604482018790527f00000000000000000000000000000000000000000000000000000000000000001693506323b872dd92506064019050602060405180830381600087803b158015610d3257600080fd5b505af1158015610d46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6a9190614067565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000015610e5257427f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000081831080610de85750808310155b610e4e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f50415553454400000000000000000000000000000000000000000000000000006044820152606401610517565b5050505b60008281526020819052604081206040805160e081018252825473ffffffffffffffffffffffffffffffffffffffff8116825264ffffffffff74010000000000000000000000000000000000000000820481166020840152790100000000000000000000000000000000000000000000000000909104811692820192909252600183015463ffffffff8082166060840152640100000000820490931660808301526901000000000000000000810460040b60a08301526e010000000000000000000000000000900490911660c0820152909150600090610f329085611c24565b9050655af3107a4000610f498261014001516110ee565b63ffffffff16610f5991906140e7565b8514610fc1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e56414c49445f5354414b455f414d4f554e540000000000000000000000006044820152606401610517565b610fca81611d8c565b610fd48682612274565b610fe082826000612626565b610fe984612941565b8215611005576000848152600b60205260409020429055611015565b6000848152600b60205260408120555b604080514381524260208201527f438e507c246c311193c77528e3de231eec8ce4727cce091a1dbbecf85b427893910160405180910390a1838673ffffffffffffffffffffffffffffffffffffffff167f9b17abd3d9e9f2eb79e7b7c875e68b77a80c7379ba64ec6ac0d1c254d303269b836060015184608001518560e001518a896040516110d795949392919063ffffffff958616815260049490940b60208501529190931660408301526060820192909252901515608082015260a00190565b60405180910390a361069781610120015186612e21565b60006110f982612f1e565b61115f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f504c414e45545f4e4f545f4558495354530000000000000000000000000000006044820152606401610517565b600061116c83600c612f3a565b905060ff81167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006111bf8360026141de565b6111ca906001614208565b61ffff16602081106111de576111de614089565b1a7f000000000000000000000000000000000000000000000000000000000000000061120b8460026141de565b61ffff166020811061121f5761121f614089565b61122d91901a6101006141de565b6112379190614208565b61ffff1661124591906140e7565b949350505050565b73ffffffffffffffffffffffffffffffffffffffff821660008181526002602090815260408083208390558051858152918201929092527f05eefb5f2a67125e8c65550a4ffa0f542f75624e866ef58fb72bfb5475403092910160405180910390a26040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b15801561133f57600080fd5b505af1158015611353573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113779190614067565b6113dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4641494c45445f5452414e5346455200000000000000000000000000000000006044820152606401610517565b604080516000808252602082015273ffffffffffffffffffffffffffffffffffffffff8416917f05eefb5f2a67125e8c65550a4ffa0f542f75624e866ef58fb72bfb547540309291015b60405180910390a25050565b600081815260208190526040812060018101549091906114589063ffffffff16612fd6565b509050806114c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e4f545f414354495645000000000000000000000000000000000000000000006044820152606401610517565b815473ffffffffffffffffffffffffffffffffffffffff858116911614611545576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e4f545f4f574e455200000000000000000000000000000000000000000000006044820152606401610517565b8154790100000000000000000000000000000000000000000000000000900464ffffffffff16156115d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f45584954494e475f414c524541445900000000000000000000000000000000006044820152606401610517565b81547fffff0000000000ffffffffffffffffffffffffffffffffffffffffffffffffff167901000000000000000000000000000000000000000000000000004264ffffffffff8116919091029190911783556040805143815260208101929092527f438e507c246c311193c77528e3de231eec8ce4727cce091a1dbbecf85b427893910160405180910390a1604051839073ffffffffffffffffffffffffffffffffffffffff8616907fb9182e4e152947f1e6691fa0ee6f68f21f607fed825945c270e69995acad805f90600090a361032c84655af3107a400061170661044b87604080517f00000000000000000000000000000000000000000000000000000000000000006020820152908101829052600090606001604051602081830303815290604052805190602001209050919050565b63ffffffff1661171691906140e7565b612ff5565b60008060005b83811015611ba057600061175886868481811061174057611740614089565b90506020020135600090815260208190526040902090565b805490915061178a90790100000000000000000000000000000000000000000000000000900464ffffffffff16613070565b15611b8d57805473ffffffffffffffffffffffffffffffffffffffff888116911614611812576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e4f545f4f574e455200000000000000000000000000000000000000000000006044820152606401610517565b85858381811061182457611824614089565b90506020020135600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46000600b600088888681811061189e5761189e614089565b9050602002013581526020019081526020016000205490506000811115611af0576118ec7f00000000000000000000000000000000000000000000000000000000000000006207e90061425d565b6118fc9063ffffffff1682614124565b8254790100000000000000000000000000000000000000000000000000900464ffffffffff1610611a955781546000906119d39073ffffffffffffffffffffffffffffffffffffffff1689898781811061195857611958614089565b905060200201356119ce8b8b8981811061197457611974614089565b90506020020135604080517f00000000000000000000000000000000000000000000000000000000000000006020820152908101829052600090606001604051602081830303815290604052805190602001209050919050565b61314e565b90506119df8187614124565b6040517ff6b911bc00000000000000000000000000000000000000000000000000000000815230600482018190526024820152604481018390529096507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063f6b911bc90606401600060405180830381600087803b158015611a7757600080fd5b505af1158015611a8b573d6000803e3d6000fd5b5050505050611b2b565b8154611adf9073ffffffffffffffffffffffffffffffffffffffff16888886818110611ac357611ac3614089565b905060200201356119ce8a8a8881811061197457611974614089565b611ae99085614124565b9350611b2b565b8154611b1e9073ffffffffffffffffffffffffffffffffffffffff16888886818110611ac357611ac3614089565b611b289086614124565b94505b5080547fffff0000000000000000000000000000000000000000000000000000000000001681556001810180547fffffffffffffffffffffffffffff0000000000000000000000000000000000001664010000000064ffffffffff4216021790555b5080611b988161413c565b915050611721565b5073ffffffffffffffffffffffffffffffffffffffff8516600090815260026020526040812054611bd2908490614124565b9050611bde868261124d565b73ffffffffffffffffffffffffffffffffffffffff86166000908152600a6020526040812054611c0f908490614124565b9050611c1b87826132ac565b50505050505050565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810191909152600080611c958560600151612fd6565b85855260808088015164ffffffffff908116602088015283151560408089019190915263ffffffff80851660608a015260a0808c015160040b948a0194909452908a01805183169389019390935291511660c0808801919091528801511660e0860152865173ffffffffffffffffffffffffffffffffffffffff9081166101008701528751166101208601529092509050611d7d84604080517f00000000000000000000000000000000000000000000000000000000000000006020820152908101829052600090606001604051602081830303815290604052805190602001209050919050565b61014084015250909392505050565b60a081015164ffffffffff1615611ddd57611daa8160a00151613070565b15611ddd57600060c082018190526060820181905260808201819052610120820181905260e08201819052604090910152565b6000816020015164ffffffffff1642611df69190614280565b90506000611e0883610140015161348e565b90506000610e1061ffff8316611e4463ffffffff7f000000000000000000000000000000000000000000000000000000000000000016866140e7565b611e4e91906140e7565b611e589190614297565b606085015190915063ffffffff1660007f00000000000000000000000000000000000000000000000000000000000000001561218e576000611e998561352b565b905060008760400151611ead576000611eaf565b815b905080841115611f955760e08801516107089063ffffffff1615611f0157828960e0015163ffffffff16610708611ee691906140e7565b611ef09190614297565b9050610708811015611f0157506107085b6000610e1082611f3763ffffffff7f0000000000000000000000000000000000000000000000000000000000000000168c6140e7565b611f4191906140e7565b611f4b9190614297565b905080611f56575060015b611f608387614280565b811115611f7457611f718387614280565b90505b896040015115611f82578094505b611f8c8187614280565b955050506120f7565b8760400151156120f75760008590506000896080015160040b13156120bd5760006127107f000000000000000000000000000000000000000000000000000000000000000061200e61ffff8b1663ffffffff7f0000000000000000000000000000000000000000000000000000000000000000166140e7565b61201891906140e7565b6120229190614297565b60808b015161203a9064ffffffffff16610e106140e7565b6120449190614297565b9050888110612055578194506120af565b610e1061ffff891661208d63ffffffff7f000000000000000000000000000000000000000000000000000000000000000016846140e7565b61209791906140e7565b6120a19190614297565b9450818511156120af578194505b6120b98583614280565b9150505b60006120c98684614280565b9050808211156120ed576120dd8183614280565b6120e79086614124565b94508091505b611f8c8287614124565b876040015115612187576000836127106121317f0000000000000000000000000000000000000000000000000000000000000000896140e7565b61213b9190614297565b6121459190614124565b905060008160040b8a6080015160040b61215f91906142ab565b905061216a8361431f565b81121561217d5761217a8361431f565b90505b60040b60808a0152505b5050612216565b8560400151156121a9576121a28383614124565b9150612216565b6000610e106121de63ffffffff7f000000000000000000000000000000000000000000000000000000000000000016886140e7565b6121ea906107086140e7565b6121f49190614297565b9050828111156122075750600091612214565b6122118184614280565b92505b505b638000000082106122395761223060016380000000614358565b63ffffffff1691505b63ffffffff82166060870152604086015115801561225f5750606086015163ffffffff16155b15610697576000610120870152505050505050565b8060400151156122e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5354494c4c5f41435449564500000000000000000000000000000000000000006044820152606401610517565b6000816060015163ffffffff166000141561230e57612303826101400151613598565b61ffff1690506123a8565b8273ffffffffffffffffffffffffffffffffffffffff1682610100015173ffffffffffffffffffffffffffffffffffffffff16146123a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4f434355504945440000000000000000000000000000000000000000000000006044820152606401610517565b60006123b883610140015161348e565b905060006123c58261352b565b73ffffffffffffffffffffffffffffffffffffffff8616610120860152905063ffffffff83161561251757600061243d7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168563ffffffff1661271061243489610140015161362f565b61ffff166136c6565b5090507f000000000000000000000000000000000000000000000000000000000000000063ffffffff168163ffffffff16106124d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4641494c45445f434150545552454400000000000000000000000000000000006044820152606401610517565b6124ff817f0000000000000000000000000000000000000000000000000000000000000000614358565b63ffffffff16606086015250600060e08501526125b8565b7f000000000000000000000000000000000000000000000000000000000000000084606001818151612549919061437d565b63ffffffff169052507f0000000000000000000000000000000000000000000000000000000000000000156125b8578063ffffffff16846060015163ffffffff1611156125b0578084606001516125a09190614358565b63ffffffff1660e08501526125b8565b600060e08501525b60608401516127106125f07f000000000000000000000000000000000000000000000000000000000000000063ffffffff85166140e7565b6125fa9190614297565b6126039061439c565b61260d91906143db565b60030b6080850152505060016040909201919091525050565b60008260a0015164ffffffffff1611801561264a575060c082015164ffffffffff16155b156126585761265882613867565b81610120015173ffffffffffffffffffffffffffffffffffffffff1682610100015173ffffffffffffffffffffffffffffffffffffffff16146127bd5761012082015183547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90911690811784551561272c5782547fffffffffffffff0000000000ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000004264ffffffffff1602178355612753565b82547fffffffffffffff0000000000ffffffffffffffffffffffffffffffffffffffff1683555b816000015182610120015173ffffffffffffffffffffffffffffffffffffffff1683610100015173ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b80156127ee5782547fffff0000000000ffffffffffffffffffffffffffffffffffffffffffffffffff16835561285f565b8160a0015164ffffffffff168260c0015164ffffffffff161461285f5760c0820151835464ffffffffff909116790100000000000000000000000000000000000000000000000000027fffff0000000000ffffffffffffffffffffffffffffffffffffffffffffffffff9091161783555b61287182604001518360600151613b23565b60019093018054608084015160e0909401514264ffffffffff908116640100000000027fffffffffffffffffffffffffffffffffffffffffffffff0000000000ffffffff63ffffffff9384166e01000000000000000000000000000002167fffffffffffffffffffffffffffff00000000ffffffffff0000000000ffffffff929097166901000000000000000000027fffffffffffffffffffffffffffffffffffff0000000000ffffffffff00000000909416979092169690961791909117949094169290921792909217905550565b604080516080808201835260055463ffffffff80821684526401000000008204811660208501526801000000000000000082048116948401949094526c0100000000000000000000000090049092166060820152906fffffffffffffffffffffffffffffffff8316600f0b9083901d600080831215612aa157835163ffffffff166129cb8461431f565b1315612a33576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4e4f545f524541434841424c455f5945545f4d494e58000000000000000000006044820152606401610517565b7f000000000000000000000000000000000000000000000000000000000000000060030b612a608461431f565b612a6a9190614440565b925063ffffffff831315612a805763ffffffff92505b835163ffffffff16831315612a9c575063ffffffff8216835260015b612b80565b836020015163ffffffff16831315612b15576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4e4f545f524541434841424c455f5945545f4d415858000000000000000000006044820152606401610517565b612b427f000000000000000000000000000000000000000000000000000000000000000060030b84614440565b925063ffffffff831315612b585763ffffffff92505b8263ffffffff16846020015163ffffffff161015612b80575063ffffffff8216602084015260015b6000821215612c7957604084015163ffffffff16612b9d8361431f565b1315612c05576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4e4f545f524541434841424c455f5945545f4d494e59000000000000000000006044820152606401610517565b7f000000000000000000000000000000000000000000000000000000000000000060030b612c328361431f565b612c3c9190614440565b915063ffffffff821315612c525763ffffffff91505b81846040015163ffffffff161215612c74575063ffffffff8116604084015260015b612d52565b836060015163ffffffff16821315612ced576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4e4f545f524541434841424c455f5945545f4d415859000000000000000000006044820152606401610517565b612d1a7f000000000000000000000000000000000000000000000000000000000000000060030b83614440565b915063ffffffff821315612d305763ffffffff91505b81846060015163ffffffff161215612d52575063ffffffff8116606084015260015b8015610d6a5783516005805460208701516040880151606089015163ffffffff9081166c01000000000000000000000000027fffffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffff9282166801000000000000000002929092167fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff938216640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090951691909616179290921716929092179190911790555050505050565b6107e1612e4c7f27ec6af4a6510eb9b7e0cc7f39415b7f15e430e53eb0cd3997e7c7e0cf680f6e5490565b60405173ffffffffffffffffffffffffffffffffffffffff85166024820152604481018490527ff5d82b6b00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915262017700613b49565b6000612f2d8260346010613c46565b60ff166001149050919050565b600080612f4984846040613c46565b90506000612f586002836144b4565b90506000612f676002846144d6565b905060007f01223334444555555666666677777777888888889999999aaaaaabbbbcccddef60ff841660208110612fa057612fa0614089565b1a905060ff8216612fbe5760048160ff16901c945050505050612fd0565b612fc96010826144d6565b9450505050505b92915050565b6380000000818116811490600090612fee90846144f8565b9050915091565b6107e16130207f27ec6af4a6510eb9b7e0cc7f39415b7f15e430e53eb0cd3997e7c7e0cf680f6e5490565b60405173ffffffffffffffffffffffffffffffffffffffff85166024820152604481018490527fabe7f1ab0000000000000000000000000000000000000000000000000000000090606401612e98565b600064ffffffffff821661308657506000919050565b427f0000000000000000000000000000000000000000000000000000000000000000158015906130d657507f00000000000000000000000000000000000000000000000000000000000000008110155b801561310857507f00000000000000000000000000000000000000000000000000000000000000008364ffffffffff16105b156131165750600192915050565b6131477f000000000000000000000000000000000000000000000000000000000000000064ffffffffff8516614124565b1092915050565b6000655af3107a4000613160836110ee565b63ffffffff1661317091906140e7565b604080514381524260208201529192507f438e507c246c311193c77528e3de231eec8ce4727cce091a1dbbecf85b427893910160405180910390a1828473ffffffffffffffffffffffffffffffffffffffff167f1c363b29828a892b7cddafe9583ef52e0d5aca0ea7011bda6ccf039e1781f738836040516131f491815260200190565b60405180910390a360008381526007602052604090205480156132a45773ffffffffffffffffffffffffffffffffffffffff85166000818152600860209081526040808320858452825280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558783526007909152808220829055518392879290917f74f110a1e0cd4892234c7ba49df9f8a354cd8d29b272f7557c9b8c3c38a653369190a45b509392505050565b73ffffffffffffffffffffffffffffffffffffffff82166000818152600a602090815260408083209290925581518481526001918101919091527f05eefb5f2a67125e8c65550a4ffa0f542f75624e866ef58fb72bfb5475403092910160405180910390a26040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b1580156133a157600080fd5b505af11580156133b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133d99190614067565b61343f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4641494c45445f5452414e5346455200000000000000000000000000000000006044820152606401610517565b60408051600081526001602082015273ffffffffffffffffffffffffffffffffffffffff8416917f05eefb5f2a67125e8c65550a4ffa0f542f75624e866ef58fb72bfb54754030929101611427565b600061349982612f1e565b6134ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f504c414e45545f4e4f545f4558495354530000000000000000000000000000006044820152606401610517565b612fd082600c7f0708083409600a8c0bb80ce40e100e100e100e101068151819c81e7823282ee0613c5b565b6000610e1061355e7f000000000000000000000000000000000000000000000000000000000000000061ffff85166140e7565b6135689190614297565b612fd09063ffffffff7f000000000000000000000000000000000000000000000000000000000000000016614124565b60006135a382612f1e565b613609576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f504c414e45545f4e4f545f4558495354530000000000000000000000000000006044820152606401610517565b61361482602c612f3a565b6136239060ff16610bb86141de565b612fd090613a98614208565b600061363a82612f1e565b6136a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f504c414e45545f4e4f545f4558495354530000000000000000000000000000006044820152606401610517565b6136ab82601c612f3a565b6136ba9060ff166101906141de565b612fd090610fa0614208565b6000808515806136d4575084155b156136e45750600090508061385e565b600085613711887f00000000000000000000000000000000000000000000000000000000000000006140e7565b61371b9190614297565b6137487f0000000000000000000000000000000000000000000000000000000000000000620f4240614280565b6137529190614124565b61375c90886140e7565b90506000620f42408561376f88856140e7565b6137799190614297565b6137839190614297565b9050808711156137985787935080925061385b565b6000886137c5897f00000000000000000000000000000000000000000000000000000000000000006140e7565b6137cf9190614297565b6137fc7f0000000000000000000000000000000000000000000000000000000000000000620f4240614280565b6138069190614124565b61381090896140e7565b90506000620f42408861382389856140e7565b61382d9190614297565b6138379190614297565b63ffffffff1690508981106138545761385160018b614280565b90505b9450879350505b50505b94509492505050565b6000613882826101000151836000015184610140015161314e565b82516000908152600b60205260409020549091508015613aed576138c97f00000000000000000000000000000000000000000000000000000000000000006207e90061425d565b6138d99063ffffffff1682614124565b8360a0015164ffffffffff1610613a45576040517ff6b911bc00000000000000000000000000000000000000000000000000000000815230600482018190526024820152604481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063f6b911bc90606401600060405180830381600087803b15801561397f57600080fd5b505af1158015613993573d6000803e3d6000fd5b5050505061010083015173ffffffffffffffffffffffffffffffffffffffff166000908152600260205260408120546139cd908490614124565b6101008501805173ffffffffffffffffffffffffffffffffffffffff9081166000908152600260209081526040808320869055935184518681529182019290925293945016917f05eefb5f2a67125e8c65550a4ffa0f542f75624e866ef58fb72bfb547540309291015b60405180910390a250505050565b61010083015173ffffffffffffffffffffffffffffffffffffffff166000908152600a6020526040812054613a7b908490614124565b6101008501805173ffffffffffffffffffffffffffffffffffffffff9081166000908152600a6020908152604091829020859055925181518581526001948101949094529394509216917f05eefb5f2a67125e8c65550a4ffa0f542f75624e866ef58fb72bfb54754030929101613a37565b61010083015173ffffffffffffffffffffffffffffffffffffffff166000908152600260205260408120546139cd908490614124565b60008183613b32576000613b38565b63800000005b613b42919061437d565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff831615610ad2578273ffffffffffffffffffffffffffffffffffffffff168183604051613b8b919061451b565b60006040518083038160008787f1925050503d8060008114613bc9576040519150601f19603f3d011682016040523d82523d6000602084013e613bce565b606091505b505050603f81613bde9190614297565b5a11610ad2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4e4f545f454e4f5547485f4741535f464f525f494e4e45525f43414c4c0000006044820152606401610517565b600061124560ff80841690851686901c614556565b600080613c688585612f3a565b905082613c7682600261456a565b613c81906001614593565b60ff1660208110613c9457613c94614089565b1a83613ca183600261456a565b60ff1660208110613cb457613cb4614089565b613cc291901a6101006141de565b613ccc9190614208565b95945050505050565b60008060408385031215613ce857600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f830112613d3757600080fd5b8135602067ffffffffffffffff80831115613d5457613d54613cf7565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108482111715613d9757613d97613cf7565b604052938452858101830193838101925087851115613db557600080fd5b83870191505b84821015613dd457813583529183019190830190613dbb565b979650505050505050565b600080600060608486031215613df457600080fd5b833567ffffffffffffffff811115613e0b57600080fd5b613e1786828701613d26565b9660208601359650604090950135949350505050565b73ffffffffffffffffffffffffffffffffffffffff81168114613e4f57600080fd5b50565b60008083601f840112613e6457600080fd5b50813567ffffffffffffffff811115613e7c57600080fd5b602083019150836020828501011115613e9457600080fd5b9250929050565b600080600080600060808688031215613eb357600080fd5b8535613ebe81613e2d565b94506020860135613ece81613e2d565b935060408601359250606086013567ffffffffffffffff811115613ef157600080fd5b613efd88828901613e52565b969995985093965092949392505050565b600060208284031215613f2057600080fd5b8135613b4281613e2d565b60008060008060608587031215613f4157600080fd5b8435613f4c81613e2d565b935060208501359250604085013567ffffffffffffffff811115613f6f57600080fd5b613f7b87828801613e52565b95989497509550505050565b60008060408385031215613f9a57600080fd5b8235613fa581613e2d565b946020939093013593505050565b600080600060408486031215613fc857600080fd5b8335613fd381613e2d565b9250602084013567ffffffffffffffff80821115613ff057600080fd5b818601915086601f83011261400457600080fd5b81358181111561401357600080fd5b8760208260051b850101111561402857600080fd5b6020830194508093505050509250925092565b60008060006060848603121561405057600080fd5b505081359360208301359350604090920135919050565b60006020828403121561407957600080fd5b81518015158114613b4257600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561411f5761411f6140b8565b500290565b60008219821115614137576141376140b8565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561416e5761416e6140b8565b5060010190565b60006020828403121561418757600080fd5b5035919050565b600080604083850312156141a157600080fd5b82356141ac81613e2d565b9150602083013567ffffffffffffffff8111156141c857600080fd5b6141d485828601613d26565b9150509250929050565b600061ffff808316818516818304811182151516156141ff576141ff6140b8565b02949350505050565b600061ffff808316818516808303821115614225576142256140b8565b01949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600063ffffffff808416806142745761427461422e565b92169190910492915050565b600082821015614292576142926140b8565b500390565b6000826142a6576142a661422e565b500490565b6000808312837f8000000000000000000000000000000000000000000000000000000000000000018312811516156142e5576142e56140b8565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615614319576143196140b8565b50500390565b60007f8000000000000000000000000000000000000000000000000000000000000000821415614351576143516140b8565b5060000390565b600063ffffffff83811690831681811015614375576143756140b8565b039392505050565b600063ffffffff808316818516808303821115614225576142256140b8565b60008160030b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000008114156143d2576143d26140b8565b60000392915050565b60008160030b8360030b60008112817fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000183128115161561441e5761441e6140b8565b81637fffffff018313811615614436576144366140b8565b5090039392505050565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0384138115161561447a5761447a6140b8565b827f80000000000000000000000000000000000000000000000000000000000000000384128116156144ae576144ae6140b8565b50500190565b600060ff8316806144c7576144c761422e565b8060ff84160491505092915050565b600060ff8316806144e9576144e961422e565b8060ff84160691505092915050565b600063ffffffff8084168061450f5761450f61422e565b92169190910692915050565b6000825160005b8181101561453c5760208186018101518583015201614522565b8181111561454b576000828501525b509190910192915050565b6000826145655761456561422e565b500690565b600060ff821660ff84168160ff048111821515161561458b5761458b6140b8565b029392505050565b600060ff821660ff84168060ff038211156145b0576145b06140b8565b01939250505056fea2646970667358221220b1fd52208f66afe3994c20263a4745fa276c500e7b19c8177e207f7c1980974164736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12437,
        "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
        "label": "_planets",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Planet)21448_storage)"
      },
      {
        "astId": 12442,
        "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
        "label": "_fleets",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Fleet)21467_storage)"
      },
      {
        "astId": 12446,
        "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
        "label": "_stakeReadyToBeWithdrawn",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12452,
        "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
        "label": "_operators",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 12459,
        "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
        "label": "_inFlight",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(InFlight)21424_storage))"
      },
      {
        "astId": 12462,
        "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
        "label": "_discovered",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(Discovered)21433_storage"
      },
      {
        "astId": 12466,
        "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
        "label": "_prevRewardIds",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12470,
        "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
        "label": "_rewards",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 12476,
        "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
        "label": "_rewardsToWithdraw",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 12485,
        "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
        "label": "_attacks",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_struct(AccumulatedAttack)21563_storage)))"
      },
      {
        "astId": 12489,
        "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
        "label": "_freeStakeReadyToBeWithdrawn",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12493,
        "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
        "label": "_planetFlagged",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int40": {
        "encoding": "inplace",
        "label": "int40",
        "numberOfBytes": "5"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(AccumulatedAttack)21563_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct ImportingOuterSpaceTypes.AccumulatedAttack))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(AccumulatedAttack)21563_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_struct(AccumulatedAttack)21563_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => mapping(uint256 => struct ImportingOuterSpaceTypes.AccumulatedAttack)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_struct(AccumulatedAttack)21563_storage))"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(InFlight)21424_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct ImportingOuterSpaceTypes.InFlight))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(InFlight)21424_storage)"
      },
      "t_mapping(t_uint256,t_struct(AccumulatedAttack)21563_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ImportingOuterSpaceTypes.AccumulatedAttack)",
        "numberOfBytes": "32",
        "value": "t_struct(AccumulatedAttack)21563_storage"
      },
      "t_mapping(t_uint256,t_struct(Fleet)21467_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ImportingOuterSpaceTypes.Fleet)",
        "numberOfBytes": "32",
        "value": "t_struct(Fleet)21467_storage"
      },
      "t_mapping(t_uint256,t_struct(InFlight)21424_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ImportingOuterSpaceTypes.InFlight)",
        "numberOfBytes": "32",
        "value": "t_struct(InFlight)21424_storage"
      },
      "t_mapping(t_uint256,t_struct(Planet)21448_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ImportingOuterSpaceTypes.Planet)",
        "numberOfBytes": "32",
        "value": "t_struct(Planet)21448_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AccumulatedAttack)21563_storage": {
        "encoding": "inplace",
        "label": "struct ImportingOuterSpaceTypes.AccumulatedAttack",
        "members": [
          {
            "astId": 21556,
            "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
            "label": "target",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 21558,
            "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
            "label": "numAttackSpent",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 21560,
            "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
            "label": "damageCausedSoFar",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 21562,
            "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
            "label": "averageAttackPower",
            "offset": 28,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Discovered)21433_storage": {
        "encoding": "inplace",
        "label": "struct ImportingOuterSpaceTypes.Discovered",
        "members": [
          {
            "astId": 21426,
            "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
            "label": "minX",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 21428,
            "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
            "label": "maxX",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 21430,
            "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
            "label": "minY",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 21432,
            "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
            "label": "maxY",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Fleet)21467_storage": {
        "encoding": "inplace",
        "label": "struct ImportingOuterSpaceTypes.Fleet",
        "members": [
          {
            "astId": 21450,
            "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 21452,
            "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
            "label": "launchTime",
            "offset": 20,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 21454,
            "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
            "label": "quantity",
            "offset": 25,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 21456,
            "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
            "label": "futureExtraProduction",
            "offset": 29,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 21458,
            "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
            "label": "defender",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 21460,
            "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
            "label": "arrivalTime",
            "offset": 20,
            "slot": "1",
            "type": "t_uint40"
          },
          {
            "astId": 21462,
            "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
            "label": "defenderLoss",
            "offset": 25,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 21464,
            "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
            "label": "planetActive",
            "offset": 29,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 21466,
            "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
            "label": "victory",
            "offset": 30,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(InFlight)21424_storage": {
        "encoding": "inplace",
        "label": "struct ImportingOuterSpaceTypes.InFlight",
        "members": [
          {
            "astId": 21421,
            "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
            "label": "flying",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 21423,
            "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
            "label": "destroyed",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Planet)21448_storage": {
        "encoding": "inplace",
        "label": "struct ImportingOuterSpaceTypes.Planet",
        "members": [
          {
            "astId": 21435,
            "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 21437,
            "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
            "label": "ownershipStartTime",
            "offset": 20,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 21439,
            "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
            "label": "exitStartTime",
            "offset": 25,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 21441,
            "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
            "label": "numSpaceships",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 21443,
            "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
            "label": "lastUpdated",
            "offset": 4,
            "slot": "1",
            "type": "t_uint40"
          },
          {
            "astId": 21445,
            "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
            "label": "travelingUpkeep",
            "offset": 9,
            "slot": "1",
            "type": "t_int40"
          },
          {
            "astId": 21447,
            "contract": "src/outerspace/facets/OuterSpaceStakingFacet.sol:OuterSpaceStakingFacet",
            "label": "overflow",
            "offset": 14,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      }
    }
  }
}