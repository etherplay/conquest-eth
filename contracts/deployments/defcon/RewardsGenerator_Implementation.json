{
  "address": "0x024D4eC1Db2A2919fBaB997991FF0E772bca7D26",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IReward",
          "name": "rewardAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rewardRateMillionth",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fixedRewardRateThousandsMillionth",
              "type": "uint256"
            }
          ],
          "internalType": "struct RewardsGenerator.Config",
          "name": "config",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "initialGames",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct RewardsGenerator.InitialAccount[]",
          "name": "initialAccounts",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "game",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "GameEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claimFixedRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claimSharedPoolRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earnedFromFixedRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earnedFromPoolRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "game",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "enableGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalRewardPerPointWithPrecision24",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "move",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IReward",
          "name": "rewardAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rewardRateMillionth",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fixedRewardRateThousandsMillionth",
              "type": "uint256"
            }
          ],
          "internalType": "struct RewardsGenerator.Config",
          "name": "config",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "initialGames",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct RewardsGenerator.InitialAccount[]",
          "name": "initialAccounts",
          "type": "tuple[]"
        }
      ],
      "name": "postUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "remove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reward",
      "outputs": [
        {
          "internalType": "contract IReward",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x44221a028a0e2024f5c879ef6215b3f8f6c87eb620ae36ce875b1418da9749bb",
  "receipt": {
    "to": null,
    "from": "0xbE19B59E8C588d68f475A407C7BA5fE813AEb792",
    "contractAddress": "0x024D4eC1Db2A2919fBaB997991FF0E772bca7D26",
    "transactionIndex": 1,
    "gasUsed": "1795795",
    "logsBloom": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000200000000000000000000000000000000000000000000000080000000000000000000000020000000000000000000000000200000000000000000008000000c0000900000000000010000000000000000000000000000400000004000100400004000000000000000000080000000000000000000000080000000000000000000000000000000000000000000000000002000000000000000000000400000000000001000000040000000020000000000000000004000020000000000000000010000000000000000000000000",
    "blockHash": "0x3dd85df0b70b6e15cd12a71dd85e011cc6665864f9b5a600998f8f8b3d2e6759",
    "transactionHash": "0x44221a028a0e2024f5c879ef6215b3f8f6c87eb620ae36ce875b1418da9749bb",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 30323783,
        "transactionHash": "0x44221a028a0e2024f5c879ef6215b3f8f6c87eb620ae36ce875b1418da9749bb",
        "address": "0x024D4eC1Db2A2919fBaB997991FF0E772bca7D26",
        "topics": [
          "0x50b08f8489c009db3c1b3f160cc0dae1c0c6706774750c001e4c083f9483d5f3",
          "0x0000000000000000000000007ed5118e042f22da546c9aaa9540d515a6f776e9"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000651ff643",
        "logIndex": 3,
        "blockHash": "0x3dd85df0b70b6e15cd12a71dd85e011cc6665864f9b5a600998f8f8b3d2e6759"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 30323783,
        "transactionHash": "0x44221a028a0e2024f5c879ef6215b3f8f6c87eb620ae36ce875b1418da9749bb",
        "address": "0x024D4eC1Db2A2919fBaB997991FF0E772bca7D26",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008888888884d2e4e981023da51b43066461f46dca"
        ],
        "data": "0x00000000000000000000000000000000000000000000000024150e3980040000",
        "logIndex": 4,
        "blockHash": "0x3dd85df0b70b6e15cd12a71dd85e011cc6665864f9b5a600998f8f8b3d2e6759"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 30323783,
        "transactionHash": "0x44221a028a0e2024f5c879ef6215b3f8f6c87eb620ae36ce875b1418da9749bb",
        "address": "0x024D4eC1Db2A2919fBaB997991FF0E772bca7D26",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001ffb5056730672ab48597ce24371feb0ec88a2b8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000283edea298a20000",
        "logIndex": 5,
        "blockHash": "0x3dd85df0b70b6e15cd12a71dd85e011cc6665864f9b5a600998f8f8b3d2e6759"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 30323783,
        "transactionHash": "0x44221a028a0e2024f5c879ef6215b3f8f6c87eb620ae36ce875b1418da9749bb",
        "address": "0x024D4eC1Db2A2919fBaB997991FF0E772bca7D26",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007fce02bb66c0d9396fb9bc60a80d45462e60fdff"
        ],
        "data": "0x000000000000000000000000000000000000000000000000560ad326a76c0000",
        "logIndex": 6,
        "blockHash": "0x3dd85df0b70b6e15cd12a71dd85e011cc6665864f9b5a600998f8f8b3d2e6759"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 30323783,
        "transactionHash": "0x44221a028a0e2024f5c879ef6215b3f8f6c87eb620ae36ce875b1418da9749bb",
        "address": "0x024D4eC1Db2A2919fBaB997991FF0E772bca7D26",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000283afaad5c345680144f20f3910ea95e5f0ba932"
        ],
        "data": "0x000000000000000000000000000000000000000000000000cd64299613c80000",
        "logIndex": 7,
        "blockHash": "0x3dd85df0b70b6e15cd12a71dd85e011cc6665864f9b5a600998f8f8b3d2e6759"
      }
    ],
    "blockNumber": 30323783,
    "cumulativeGasUsed": "1876385",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x647bA80C44fbbDE281e8eB27E32f9D6Dff80163f",
    {
      "rewardRateMillionth": 100,
      "fixedRewardRateThousandsMillionth": 10
    },
    [
      "0x7ed5118E042F22DA546C9aaA9540D515A6F776E9"
    ],
    [
      {
        "account": "0x8888888884d2e4E981023dA51B43066461F46Dca",
        "amount": "2600000000000000000"
      },
      {
        "account": "0x1ffb5056730672AB48597Ce24371Feb0eC88a2b8",
        "amount": "2900000000000000000"
      },
      {
        "account": "0x7fCe02BB66c0D9396fb9bC60a80d45462E60fdfF",
        "amount": "6200000000000000000"
      },
      {
        "account": "0x283aFaad5c345680144f20F3910EA95e5F0bA932",
        "amount": "14800000000000000000"
      }
    ]
  ],
  "numDeployments": 4,
  "solcInputHash": "c0c87e609b0d0852bdb49a272fe5a51b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IReward\",\"name\":\"rewardAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewardRateMillionth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedRewardRateThousandsMillionth\",\"type\":\"uint256\"}],\"internalType\":\"struct RewardsGenerator.Config\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"initialGames\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct RewardsGenerator.InitialAccount[]\",\"name\":\"initialAccounts\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"game\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"GameEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimFixedRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimSharedPoolRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earnedFromFixedRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earnedFromPoolRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"game\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"enableGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRewardPerPointWithPrecision24\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"move\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IReward\",\"name\":\"rewardAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewardRateMillionth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedRewardRateThousandsMillionth\",\"type\":\"uint256\"}],\"internalType\":\"struct RewardsGenerator.Config\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"initialGames\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct RewardsGenerator.InitialAccount[]\",\"name\":\"initialAccounts\",\"type\":\"tuple[]\"}],\"name\":\"postUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"contract IReward\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimFixedRewards(address)\":{\"notice\":\"claim the rewards earned so far using a fixed rate per point\"},\"claimSharedPoolRewards(address)\":{\"notice\":\"claim the rewards earned so far in the shared pool\"},\"earnedFromFixedRate(address)\":{\"notice\":\"The amount of reward an account has accrued so far. Does not include already withdrawn rewards.\"},\"earnedFromPoolRate(address)\":{\"notice\":\"The amount of reward an account has accrued so far. Does not include already withdrawn rewards.\"},\"getTotalRewardPerPointWithPrecision24()\":{\"notice\":\"The amount of reward each point has earned so far\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/conquest_token/RewardsGenerator.sol\":\"RewardsGenerator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaceeafeeaf0d200ca3942d8bf14c1c4f787a77f79cc87c08bb668e65acdee29\",\"license\":\"MIT\"},\"src/conquest_token/IReward.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\ninterface IReward {\\n    function reward(address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x2ccdc4c0f0a5f63526316f0f0bc316aa5d9f1e59e8574a66e43e3f5a81e233f4\",\"license\":\"AGPL-3.0\"},\"src/conquest_token/RewardsGenerator.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\\\";\\nimport \\\"../outerspace/interfaces/IOnStakeChange.sol\\\";\\nimport \\\"./IReward.sol\\\";\\n\\ncontract RewardsGenerator is IERC20, Proxied, IOnStakeChange {\\n    uint256 internal constant PRECISION = 1e24;\\n    uint256 internal constant DECIMALS_18_MILLIONTH = 1000000000000; // 1 millionth of a token so that it matches with REWARD_RATE_millionth\\n\\n    uint256 internal immutable REWARD_RATE_millionth;\\n    uint256 internal immutable FIXED_REWARD_RATE_thousands_millionth;\\n\\n    event GameEnabled(address indexed game, uint256 weight, uint256 timestamp);\\n\\n    struct GlobalState {\\n        uint40 lastUpdateTime;\\n        uint104 totalRewardPerPointAtLastUpdate; // PRECISION = 1e24\\n        uint112 totalPoints;\\n    }\\n    GlobalState _global;\\n\\n    struct SharedRatePerAccount {\\n        uint112 points;\\n        uint104 totalRewardPerPointAccounted; // PRECISION = 1e24\\n        // we do not pack here as we want to keep precision\\n        uint112 rewardsToWithdraw;\\n    }\\n\\n    mapping(address => SharedRatePerAccount) _sharedRateRewardPerAccount;\\n\\n    struct FixedRate {\\n        uint112 toWithdraw;\\n        uint40 lastTime;\\n    }\\n    mapping(address => FixedRate) internal _fixedRateRewardPerAccount;\\n\\n    mapping(address => uint256) internal _games;\\n\\n    IReward public immutable reward;\\n\\n    struct Config {\\n        uint256 rewardRateMillionth;\\n        uint256 fixedRewardRateThousandsMillionth;\\n    }\\n\\n    struct InitialAccount {\\n        address account;\\n        uint256 amount;\\n    }\\n\\n    bool internal _init;\\n\\n    constructor(\\n        IReward rewardAddress,\\n        Config memory config,\\n        address[] memory initialGames,\\n        InitialAccount[] memory initialAccounts\\n    ) {\\n        reward = rewardAddress;\\n        REWARD_RATE_millionth = config.rewardRateMillionth;\\n        FIXED_REWARD_RATE_thousands_millionth = config.fixedRewardRateThousandsMillionth;\\n\\n        _postUpgrade(rewardAddress, config, initialGames, initialAccounts);\\n    }\\n\\n    function postUpgrade(\\n        IReward rewardAddress,\\n        Config memory config,\\n        address[] memory initialGames,\\n        InitialAccount[] memory initialAccounts\\n    ) external onlyProxyAdmin {\\n        _postUpgrade(rewardAddress, config, initialGames, initialAccounts);\\n    }\\n\\n    function _postUpgrade(\\n        IReward,\\n        Config memory,\\n        address[] memory initialGames,\\n        InitialAccount[] memory initialAccounts\\n    ) internal {\\n        if (!_init) {\\n            for (uint256 i = 0; i < initialGames.length; i++) {\\n                _enableGame(initialGames[i], 1000000000000000000);\\n            }\\n            for (uint256 i = 0; i < initialAccounts.length; i++) {\\n                _add(initialAccounts[i].account, initialAccounts[i].amount);\\n            }\\n            _init = true;\\n        }\\n    }\\n\\n    string public constant symbol = \\\"POINT\\\";\\n\\n    function name() public pure returns (string memory) {\\n        return \\\"Conquest v0 Points\\\";\\n    }\\n\\n    function enableGame(address game, uint256 weight) external onlyProxyAdmin {\\n        _enableGame(game, weight);\\n    }\\n\\n    function _enableGame(address game, uint256 weight) internal {\\n        _games[game] = weight;\\n        emit GameEnabled(game, weight, block.timestamp);\\n    }\\n\\n    /// @inheritdoc IOnStakeChange\\n    function add(address account, uint256 amount) external override onlyGames {\\n        _add(account, amount);\\n    }\\n\\n    function _add(address account, uint256 amount) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        (uint256 totalPointsSoFar, uint256 accountPointsSoFar) = _update(account);\\n\\n        unchecked {\\n            // update total points and the account's point, their reward will be counted on next interaction.\\n            _global.totalPoints = uint112(totalPointsSoFar + amount);\\n            _sharedRateRewardPerAccount[account].points = uint112(accountPointsSoFar + amount);\\n        }\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /// @inheritdoc IOnStakeChange\\n    function remove(address account, uint256 amount) external override onlyGames {\\n        _remove(account, amount);\\n    }\\n\\n    function _remove(address account, uint256 amount) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        // update the amount generated, store it in\\n        (uint256 totalPointsSoFar, uint256 accountPointsSoFar) = _update(account);\\n\\n        unchecked {\\n            // update total points and the account's point, their reward will be counted on next interaction.\\n            _global.totalPoints = uint112(totalPointsSoFar - amount);\\n            _sharedRateRewardPerAccount[account].points = uint112(accountPointsSoFar - amount);\\n        }\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /// @inheritdoc IOnStakeChange\\n    function move(address from, address to, uint256 amount) external override onlyGames {\\n        _remove(from, amount);\\n        _add(to, amount);\\n    }\\n\\n    function totalSupply() external view override returns (uint256) {\\n        return _global.totalPoints;\\n    }\\n\\n    function balanceOf(address owner) external view override returns (uint256) {\\n        return _sharedRateRewardPerAccount[owner].points;\\n    }\\n\\n    function allowance(address, address) external pure override returns (uint256) {\\n        return 0;\\n    }\\n\\n    function decimals() external pure virtual returns (uint8) {\\n        return uint8(18);\\n    }\\n\\n    function transfer(address, uint256) external returns (bool) {\\n        revert(\\\"NON_TRANSFERABLE\\\");\\n    }\\n\\n    function approve(address, uint256) external returns (bool) {\\n        revert(\\\"NON_TRANSFERABLE\\\");\\n    }\\n\\n    function transferFrom(address, address, uint256) external returns (bool) {\\n        revert(\\\"NON_TRANSFERABLE\\\");\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // For Accounts\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    /// @notice claim the rewards earned so far in the shared pool\\n    function claimSharedPoolRewards(address to) external {\\n        address account = msg.sender;\\n        uint256 accountPointsSoFar = _sharedRateRewardPerAccount[account].points;\\n\\n        (, uint256 totalRewardPerPoint) = _updateGlobal();\\n        uint256 amount = _computeRewardsEarned(\\n            _sharedRateRewardPerAccount[account].totalRewardPerPointAccounted,\\n            accountPointsSoFar,\\n            totalRewardPerPoint,\\n            _sharedRateRewardPerAccount[account].rewardsToWithdraw\\n        );\\n        _sharedRateRewardPerAccount[account].totalRewardPerPointAccounted = uint104(totalRewardPerPoint);\\n\\n        if (amount > 0) {\\n            _sharedRateRewardPerAccount[account].rewardsToWithdraw = 0;\\n            reward.reward(to, amount);\\n        }\\n    }\\n\\n    /// @notice claim the rewards earned so far using a fixed rate per point\\n    function claimFixedRewards(address to) external {\\n        address account = msg.sender;\\n        uint256 amount = earnedFromFixedRate(account);\\n        if (amount > 0) {\\n            _fixedRateRewardPerAccount[account].lastTime = uint40(block.timestamp);\\n            _fixedRateRewardPerAccount[account].toWithdraw = 0;\\n            reward.reward(to, amount);\\n        }\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // Getters\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    /// @notice The amount of reward each point has earned so far\\n    function getTotalRewardPerPointWithPrecision24() external view returns (uint256) {\\n        return\\n            _global.totalRewardPerPointAtLastUpdate +\\n            _computeExtraTotalRewardPerPointSinceLastTime(\\n                _global.totalPoints,\\n                REWARD_RATE_millionth,\\n                _global.lastUpdateTime\\n            );\\n    }\\n\\n    /// @notice The amount of reward an account has accrued so far. Does not include already withdrawn rewards.\\n    function earnedFromPoolRate(address account) external view returns (uint256) {\\n        return\\n            _computeRewardsEarned(\\n                _sharedRateRewardPerAccount[account].totalRewardPerPointAccounted,\\n                _sharedRateRewardPerAccount[account].points,\\n                _global.totalRewardPerPointAtLastUpdate +\\n                    _computeExtraTotalRewardPerPointSinceLastTime(\\n                        _global.totalPoints,\\n                        REWARD_RATE_millionth,\\n                        _global.lastUpdateTime\\n                    ),\\n                _sharedRateRewardPerAccount[account].rewardsToWithdraw\\n            );\\n    }\\n\\n    /// @notice The amount of reward an account has accrued so far. Does not include already withdrawn rewards.\\n    function earnedFromFixedRate(address account) public view returns (uint256) {\\n        uint256 extraFixed = ((block.timestamp - _fixedRateRewardPerAccount[account].lastTime) *\\n            _sharedRateRewardPerAccount[account].points *\\n            FIXED_REWARD_RATE_thousands_millionth) / 1000000000;\\n        return extraFixed + _fixedRateRewardPerAccount[account].toWithdraw;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // Internal\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    function _computeRewardsEarned(\\n        uint256 totalRewardPerPointAccountedSoFar,\\n        uint256 accountPoints,\\n        uint256 currentTotalRewardPerPoint,\\n        uint256 accountRewardsSoFar\\n    ) internal pure returns (uint256) {\\n        return\\n            accountRewardsSoFar +\\n            (((accountPoints * (currentTotalRewardPerPoint - totalRewardPerPointAccountedSoFar)) *\\n                DECIMALS_18_MILLIONTH) / PRECISION);\\n    }\\n\\n    function _computeExtraTotalRewardPerPointSinceLastTime(\\n        uint256 totalPoints,\\n        uint256 rewardRateMillionth,\\n        uint256 lastUpdateTime\\n    ) internal view returns (uint256) {\\n        if (totalPoints == 0) {\\n            return 0;\\n        }\\n        return ((block.timestamp - lastUpdateTime) * rewardRateMillionth * PRECISION) / totalPoints;\\n    }\\n\\n    function _updateGlobal() internal returns (uint256 totalPointsSoFar, uint256 totalRewardPerPointAllocatedSoFar) {\\n        totalPointsSoFar = _global.totalPoints;\\n\\n        uint256 extraTotalRewardPerPoint = _computeExtraTotalRewardPerPointSinceLastTime(\\n            totalPointsSoFar,\\n            REWARD_RATE_millionth,\\n            _global.lastUpdateTime\\n        );\\n\\n        totalRewardPerPointAllocatedSoFar = _global.totalRewardPerPointAtLastUpdate + extraTotalRewardPerPoint;\\n\\n        _global.totalRewardPerPointAtLastUpdate = uint104(totalRewardPerPointAllocatedSoFar);\\n        _global.lastUpdateTime = uint40(block.timestamp);\\n    }\\n\\n    function _updateAccount(\\n        address account,\\n        uint256 totalRewardPerPointAllocatedSoFar\\n    ) internal returns (uint256 accountPointsSoFar) {\\n        accountPointsSoFar = _sharedRateRewardPerAccount[account].points;\\n\\n        // update the reward that can be withdrawn, catching up account state to global\\n        _sharedRateRewardPerAccount[account].rewardsToWithdraw = uint112(\\n            _computeRewardsEarned(\\n                // last checkpoint : when was the account last updated\\n                _sharedRateRewardPerAccount[account].totalRewardPerPointAccounted,\\n                accountPointsSoFar,\\n                totalRewardPerPointAllocatedSoFar,\\n                // rewards already registered\\n                _sharedRateRewardPerAccount[account].rewardsToWithdraw\\n            )\\n        );\\n        _sharedRateRewardPerAccount[account].totalRewardPerPointAccounted = uint104(totalRewardPerPointAllocatedSoFar);\\n\\n        uint256 extraFixed = ((block.timestamp - _fixedRateRewardPerAccount[account].lastTime) *\\n            accountPointsSoFar *\\n            FIXED_REWARD_RATE_thousands_millionth) / 1000000000;\\n        _fixedRateRewardPerAccount[account].lastTime = uint40(block.timestamp);\\n        _fixedRateRewardPerAccount[account].toWithdraw += uint112(extraFixed);\\n    }\\n\\n    function _update(address account) internal returns (uint256, uint256) {\\n        (uint256 totalPointsSoFar, uint256 totalRewardPerPointAllocatedSoFar) = _updateGlobal();\\n        uint256 accountPointsSoFar = _updateAccount(account, totalRewardPerPointAllocatedSoFar);\\n        return (totalPointsSoFar, accountPointsSoFar);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // Modifiers\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    modifier onlyGames() {\\n        require(_games[msg.sender] > 0, \\\"NOT_AUTHORIZED_GAME\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xe3f3081f2d457a80423999489af4af6a1f8e71486c6fde8949172658fcb461e7\",\"license\":\"AGPL-3.0\"},\"src/outerspace/interfaces/IOnStakeChange.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\ninterface IOnStakeChange {\\n    function add(address account, uint256 amount) external;\\n\\n    function remove(address account, uint256 amount) external;\\n\\n    function move(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xeb5f9874b6b35990ada4462b815e369b00969e2a3338741f79e9d88037bdf6fa\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016c5760003560e01c806370a08231116100cd578063b061963c11610081578063dd62ed3e11610066578063dd62ed3e14610391578063f5d82b6b146103a7578063ff1e03e9146103ba57600080fd5b8063b061963c1461036b578063bb35783b1461037e57600080fd5b8063a8671f6a116100b2578063a8671f6a14610345578063a9059cbb146101d1578063abe7f1ab1461035857600080fd5b806370a08231146102c357806395d89b411461030957600080fd5b80631eadd9b41161012457806323b872dd1161010957806323b872dd1461029e578063313ce567146102ac57806348483382146102bb57600080fd5b80631eadd9b41461023f578063228cb7331461025257600080fd5b8063095ea7b311610155578063095ea7b3146101d157806316cf09f8146101f457806318160ddd1461020757600080fd5b8063066112f91461017157806306fdde0314610186575b600080fd5b61018461017f366004611491565b6103cd565b005b60408051808201909152601281527f436f6e717565737420763020506f696e7473000000000000000000000000000060208201525b6040516101c891906114ae565b60405180910390f35b6101e46101df366004611521565b610504565b60405190151581526020016101c8565b610184610202366004611521565b61056e565b600054720100000000000000000000000000000000000090046dffffffffffffffffffffffffffff165b6040519081526020016101c8565b61018461024d3660046116b0565b610632565b6102797f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101c8565b6101e46101df3660046117d6565b604051601281526020016101c8565b6102316106fa565b6102316102d1366004611491565b73ffffffffffffffffffffffffffffffffffffffff166000908152600160205260409020546dffffffffffffffffffffffffffff1690565b6101bb6040518060400160405280600581526020017f504f494e5400000000000000000000000000000000000000000000000000000081525081565b610231610353366004611491565b610781565b610184610366366004611521565b610878565b610231610379366004611491565b6108f8565b61018461038c3660046117d6565b610a0f565b61023161039f366004611817565b600092915050565b6101846103b5366004611521565b610a99565b6101846103c8366004611491565b610b19565b3360006103d982610781565b905080156104ff5773ffffffffffffffffffffffffffffffffffffffff8281166000908152600260205260409081902080547fffffffffffffffffffffffffff00000000000000000000000000000000000000166e0100000000000000000000000000004264ffffffffff16027fffffffffffffffffffffffffffffffffffff000000000000000000000000000016179055517f21670f220000000000000000000000000000000000000000000000000000000081528482166004820152602481018390527f0000000000000000000000000000000000000000000000000000000000000000909116906321670f2290604401600060405180830381600087803b1580156104e657600080fd5b505af11580156104fa573d6000803e3d6000fd5b505050505b505050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4e4f4e5f5452414e5346455241424c450000000000000000000000000000000060448201526000906064015b60405180910390fd5b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610624576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610565565b61062e8282610d15565b5050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610565565b6106f484848484610d84565b50505050565b60008054610757906dffffffffffffffffffffffffffff7201000000000000000000000000000000000000820416907f00000000000000000000000000000000000000000000000000000000000000009064ffffffffff16610e6c565b60005461077c91906501000000000090046cffffffffffffffffffffffffff1661187f565b905090565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602090815260408083205460029092528220548291633b9aca00917f0000000000000000000000000000000000000000000000000000000000000000916dffffffffffffffffffffffffffff1690610810906e010000000000000000000000000000900464ffffffffff1642611897565b61081a91906118ae565b61082491906118ae565b61082e91906118eb565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260026020526040902054909150610871906dffffffffffffffffffffffffffff168261187f565b9392505050565b336000908152600360205260409020546108ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4e4f545f415554484f52495a45445f47414d45000000000000000000000000006044820152606401610565565b61062e8282610eb8565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600160205260408120548154610a09916cffffffffffffffffffffffffff6e010000000000000000000000000000820416916dffffffffffffffffffffffffffff918216916109a59172010000000000000000000000000000000000008104909116907f00000000000000000000000000000000000000000000000000000000000000009064ffffffffff16610e6c565b6000546109ca91906501000000000090046cffffffffffffffffffffffffff1661187f565b73ffffffffffffffffffffffffffffffffffffffff8616600090815260016020819052604090912001546dffffffffffffffffffffffffffff16610fb3565b92915050565b33600090815260036020526040902054610a85576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4e4f545f415554484f52495a45445f47414d45000000000000000000000000006044820152606401610565565b610a8f8382610eb8565b6104ff8282611001565b33600090815260036020526040902054610b0f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4e4f545f415554484f52495a45445f47414d45000000000000000000000000006044820152606401610565565b61062e8282611001565b336000818152600160205260408120546dffffffffffffffffffffffffffff1690610b426110ef565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260016020819052604082208054910154929450909250610bb4916e0100000000000000000000000000009091046cffffffffffffffffffffffffff1690859085906dffffffffffffffffffffffffffff16610fb3565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260016020526040902080547fffffffffff00000000000000000000000000ffffffffffffffffffffffffffff166e0100000000000000000000000000006cffffffffffffffffffffffffff86160217905590508015610d0e5773ffffffffffffffffffffffffffffffffffffffff8481166000908152600160208190526040918290200180547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000169055517f21670f220000000000000000000000000000000000000000000000000000000081528682166004820152602481018390527f0000000000000000000000000000000000000000000000000000000000000000909116906321670f2290604401600060405180830381600087803b158015610cf557600080fd5b505af1158015610d09573d6000803e3d6000fd5b505050505b5050505050565b73ffffffffffffffffffffffffffffffffffffffff821660008181526003602052604090819020839055517f50b08f8489c009db3c1b3f160cc0dae1c0c6706774750c001e4c083f9483d5f390610d789084904290918252602082015260400190565b60405180910390a25050565b60045460ff166106f45760005b8251811015610dd757610dc5838281518110610daf57610daf611926565b6020026020010151670de0b6b3a7640000610d15565b80610dcf81611955565b915050610d91565b5060005b8151811015610e3a57610e28828281518110610df957610df9611926565b602002602001015160000151838381518110610e1757610e17611926565b602002602001015160200151611001565b80610e3281611955565b915050610ddb565b50600480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905550505050565b600083610e7b57506000610871565b8369d3c21bcecceda100000084610e928542611897565b610e9c91906118ae565b610ea691906118ae565b610eb091906118eb565b949350505050565b80610ec1575050565b600080610ecd846111ed565b600080546dffffffffffffffffffffffffffff878503811672010000000000000000000000000000000000000271ffffffffffffffffffffffffffffffffffff90921691909117825573ffffffffffffffffffffffffffffffffffffffff88168083526001602052604080842080548a87039094167fffffffffffffffffffffffffffffffffffff0000000000000000000000000000909416939093179092559051939550919350917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610fa59087815260200190565b60405180910390a350505050565b600069d3c21bcecceda100000064e8d4a51000610fd08786611897565b610fda90876118ae565b610fe491906118ae565b610fee91906118eb565b610ff8908361187f565b95945050505050565b8061100a575050565b600080611016846111ed565b600080546dffffffffffffffffffffffffffff878501811672010000000000000000000000000000000000000271ffffffffffffffffffffffffffffffffffff90921691909117825573ffffffffffffffffffffffffffffffffffffffff88168083526001602052604080842080548a87019094167fffffffffffffffffffffffffffffffffffff000000000000000000000000000090941693909317909255905193955091935090917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610fa59087815260200190565b600080546dffffffffffffffffffffffffffff7201000000000000000000000000000000000000820416919081906111519084907f00000000000000000000000000000000000000000000000000000000000000009064ffffffffff16610e6c565b60005490915061117a9082906501000000000090046cffffffffffffffffffffffffff1661187f565b600080547fffffffffffffffffffffffffffff00000000000000000000000000000000000016650100000000006cffffffffffffffffffffffffff8416027fffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000016174264ffffffffff161790559293915050565b6000806000806111fb6110ef565b91509150600061120b8683611218565b9296929550919350505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020819052604090912080549101546dffffffffffffffffffffffffffff80831692611289926e0100000000000000000000000000009091046cffffffffffffffffffffffffff16918491869116610fb3565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260016020818152604080842092830180547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff969096169590951790945581547fffffffffff00000000000000000000000000ffffffffffffffffffffffffffff166e0100000000000000000000000000006cffffffffffffffffffffffffff881681029190911790925560029052918120549091633b9aca00917f000000000000000000000000000000000000000000000000000000000000000091859161138691900464ffffffffff1642611897565b61139091906118ae565b61139a91906118ae565b6113a491906118eb565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600260205260408120805464ffffffffff42166e010000000000000000000000000000027fffffffffffffffffffffffffff0000000000ffffffffffffffffffffffffffff82168117835593945084939192916114339185916dffffffffffffffffffffffffffff90811691161761198e565b92506101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff1602179055505092915050565b73ffffffffffffffffffffffffffffffffffffffff8116811461148e57600080fd5b50565b6000602082840312156114a357600080fd5b81356108718161146c565b600060208083528351808285015260005b818110156114db578581018301518582016040015282016114bf565b818111156114ed576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b6000806040838503121561153457600080fd5b823561153f8161146c565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561159f5761159f61154d565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156115ec576115ec61154d565b604052919050565b600067ffffffffffffffff82111561160e5761160e61154d565b5060051b60200190565b600082601f83011261162957600080fd5b8135602061163e611639836115f4565b6115a5565b82815260069290921b8401810191818101908684111561165d57600080fd5b8286015b848110156116a5576040818903121561167a5760008081fd5b61168261157c565b813561168d8161146c565b81528185013585820152835291830191604001611661565b509695505050505050565b60008060008084860360a08112156116c757600080fd5b85356116d28161146c565b9450602060407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08301121561170657600080fd5b61170e61157c565b87820135815260408801358282015294506060870135915067ffffffffffffffff8083111561173c57600080fd5b828801925088601f84011261175057600080fd5b823561175e611639826115f4565b81815260059190911b8401830190838101908b83111561177d57600080fd5b948401945b828610156117a45785356117958161146c565b82529484019490840190611782565b9650505060808801359250808311156117bc57600080fd5b50506117ca87828801611618565b91505092959194509250565b6000806000606084860312156117eb57600080fd5b83356117f68161146c565b925060208401356118068161146c565b929592945050506040919091013590565b6000806040838503121561182a57600080fd5b82356118358161146c565b915060208301356118458161146c565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561189257611892611850565b500190565b6000828210156118a9576118a9611850565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156118e6576118e6611850565b500290565b600082611921577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561198757611987611850565b5060010190565b60006dffffffffffffffffffffffffffff8083168185168083038211156119b7576119b7611850565b0194935050505056fea2646970667358221220af9321280ea665ab89319b2305277cb8e69e6ea9b3d0d1bcddd23d37fd0ddeb764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "totalSupply()": {
        "details": "Returns the amount of tokens in existence."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimFixedRewards(address)": {
        "notice": "claim the rewards earned so far using a fixed rate per point"
      },
      "claimSharedPoolRewards(address)": {
        "notice": "claim the rewards earned so far in the shared pool"
      },
      "earnedFromFixedRate(address)": {
        "notice": "The amount of reward an account has accrued so far. Does not include already withdrawn rewards."
      },
      "earnedFromPoolRate(address)": {
        "notice": "The amount of reward an account has accrued so far. Does not include already withdrawn rewards."
      },
      "getTotalRewardPerPointWithPrecision24()": {
        "notice": "The amount of reward each point has earned so far"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15941,
        "contract": "src/conquest_token/RewardsGenerator.sol:RewardsGenerator",
        "label": "_global",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(GlobalState)15938_storage"
      },
      {
        "astId": 15953,
        "contract": "src/conquest_token/RewardsGenerator.sol:RewardsGenerator",
        "label": "_sharedRateRewardPerAccount",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(SharedRatePerAccount)15948_storage)"
      },
      {
        "astId": 15963,
        "contract": "src/conquest_token/RewardsGenerator.sol:RewardsGenerator",
        "label": "_fixedRateRewardPerAccount",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(FixedRate)15958_storage)"
      },
      {
        "astId": 15967,
        "contract": "src/conquest_token/RewardsGenerator.sol:RewardsGenerator",
        "label": "_games",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 15982,
        "contract": "src/conquest_token/RewardsGenerator.sol:RewardsGenerator",
        "label": "_init",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(FixedRate)15958_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RewardsGenerator.FixedRate)",
        "numberOfBytes": "32",
        "value": "t_struct(FixedRate)15958_storage"
      },
      "t_mapping(t_address,t_struct(SharedRatePerAccount)15948_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RewardsGenerator.SharedRatePerAccount)",
        "numberOfBytes": "32",
        "value": "t_struct(SharedRatePerAccount)15948_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(FixedRate)15958_storage": {
        "encoding": "inplace",
        "label": "struct RewardsGenerator.FixedRate",
        "members": [
          {
            "astId": 15955,
            "contract": "src/conquest_token/RewardsGenerator.sol:RewardsGenerator",
            "label": "toWithdraw",
            "offset": 0,
            "slot": "0",
            "type": "t_uint112"
          },
          {
            "astId": 15957,
            "contract": "src/conquest_token/RewardsGenerator.sol:RewardsGenerator",
            "label": "lastTime",
            "offset": 14,
            "slot": "0",
            "type": "t_uint40"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(GlobalState)15938_storage": {
        "encoding": "inplace",
        "label": "struct RewardsGenerator.GlobalState",
        "members": [
          {
            "astId": 15933,
            "contract": "src/conquest_token/RewardsGenerator.sol:RewardsGenerator",
            "label": "lastUpdateTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 15935,
            "contract": "src/conquest_token/RewardsGenerator.sol:RewardsGenerator",
            "label": "totalRewardPerPointAtLastUpdate",
            "offset": 5,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 15937,
            "contract": "src/conquest_token/RewardsGenerator.sol:RewardsGenerator",
            "label": "totalPoints",
            "offset": 18,
            "slot": "0",
            "type": "t_uint112"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(SharedRatePerAccount)15948_storage": {
        "encoding": "inplace",
        "label": "struct RewardsGenerator.SharedRatePerAccount",
        "members": [
          {
            "astId": 15943,
            "contract": "src/conquest_token/RewardsGenerator.sol:RewardsGenerator",
            "label": "points",
            "offset": 0,
            "slot": "0",
            "type": "t_uint112"
          },
          {
            "astId": 15945,
            "contract": "src/conquest_token/RewardsGenerator.sol:RewardsGenerator",
            "label": "totalRewardPerPointAccounted",
            "offset": 14,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 15947,
            "contract": "src/conquest_token/RewardsGenerator.sol:RewardsGenerator",
            "label": "rewardsToWithdraw",
            "offset": 0,
            "slot": "1",
            "type": "t_uint112"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint104": {
        "encoding": "inplace",
        "label": "uint104",
        "numberOfBytes": "13"
      },
      "t_uint112": {
        "encoding": "inplace",
        "label": "uint112",
        "numberOfBytes": "14"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      }
    }
  }
}