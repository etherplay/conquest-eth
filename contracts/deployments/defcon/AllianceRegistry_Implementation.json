{
  "address": "0xdE8F4A08689EFd9f55f707234cDe7FF17169F710",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IAlliance",
          "name": "alliance",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "joining",
          "type": "bool"
        }
      ],
      "name": "AllianceLink",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "nonce",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct AllianceRegistry.PlayerSubmission[]",
          "name": "playerSubmissions",
          "type": "tuple[]"
        }
      ],
      "name": "addMultiplePlayersToAlliance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "nonce",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "addPlayerToAlliance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "ejectPlayerFromAlliance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "contract IAlliance",
          "name": "alliance",
          "type": "address"
        }
      ],
      "name": "getAllianceData",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "joinTime",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "slot",
          "type": "uint8"
        }
      ],
      "name": "getAllianceDataAtSlot",
      "outputs": [
        {
          "internalType": "contract IAlliance",
          "name": "alliance",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "joinTime",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "player2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "havePlayersAnAllianceInCommon",
      "outputs": [
        {
          "internalType": "contract IAlliance",
          "name": "alliance",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "joinTime",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAlliance",
          "name": "alliance",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "joinAlliance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "joined",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAlliance",
          "name": "alliance",
          "type": "address"
        }
      ],
      "name": "leaveAlliance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xe21ce86288f810e4f61bbb5f856ccc406c9e30bde22747c131678aad26de1e70",
  "receipt": {
    "to": null,
    "from": "0xbE19B59E8C588d68f475A407C7BA5fE813AEb792",
    "contractAddress": "0xdE8F4A08689EFd9f55f707234cDe7FF17169F710",
    "transactionIndex": 1,
    "gasUsed": "2666464",
    "logsBloom": "0x
    "blockHash": "0x79027bfc2540093178b885e9919c253b86358e710f2a111b89998ac32d80221c",
    "transactionHash": "0xe21ce86288f810e4f61bbb5f856ccc406c9e30bde22747c131678aad26de1e70",
    "logs": [],
    "blockNumber": 21704727,
    "cumulativeGasUsed": "2858285",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "02da93cf1935fb9370486130b817da02",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IAlliance\",\"name\":\"alliance\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"joining\",\"type\":\"bool\"}],\"name\":\"AllianceLink\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct AllianceRegistry.PlayerSubmission[]\",\"name\":\"playerSubmissions\",\"type\":\"tuple[]\"}],\"name\":\"addMultiplePlayersToAlliance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"addPlayerToAlliance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"ejectPlayerFromAlliance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"contract IAlliance\",\"name\":\"alliance\",\"type\":\"address\"}],\"name\":\"getAllianceData\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"joinTime\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"name\":\"getAllianceDataAtSlot\",\"outputs\":[{\"internalType\":\"contract IAlliance\",\"name\":\"alliance\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"joinTime\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"havePlayersAnAllianceInCommon\",\"outputs\":[{\"internalType\":\"contract IAlliance\",\"name\":\"alliance\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"joinTime\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAlliance\",\"name\":\"alliance\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"joinAlliance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"joined\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAlliance\",\"name\":\"alliance\",\"type\":\"address\"}],\"name\":\"leaveAlliance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/alliances/AllianceRegistry.sol\":\"AllianceRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaceeafeeaf0d200ca3942d8bf14c1c4f787a77f79cc87c08bb668e65acdee29\",\"license\":\"MIT\"},\"src/alliances/AllianceRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\\\";\\nimport \\\"../interfaces/IAlliance.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract AllianceRegistry is Proxied {\\n    using ECDSA for bytes32;\\n\\n    uint8 internal constant MAX_NUM_ALLIANCES = 4;\\n\\n    mapping(address => mapping(IAlliance => uint256)) internal _allianceNonces;\\n    struct AllianceRow {\\n        IAlliance alliance;\\n        uint96 joinTime;\\n    }\\n    struct Alliances {\\n        AllianceRow alliance0;\\n        AllianceRow alliance1;\\n        AllianceRow alliance2;\\n        AllianceRow alliance3;\\n    }\\n    mapping(address => Alliances) internal _alliances;\\n\\n    event AllianceLink(IAlliance indexed alliance, address indexed player, bool joining);\\n\\n    function getAllianceDataAtSlot(address player, uint8 slot)\\n        external\\n        view\\n        returns (\\n            IAlliance alliance,\\n            uint96 joinTime,\\n            uint256 nonce\\n        )\\n    {\\n        Alliances storage alliances = _alliances[player];\\n        if (slot == 0) {\\n            alliance = alliances.alliance0.alliance;\\n            joinTime = alliances.alliance0.joinTime;\\n        } else if (slot == 1) {\\n            alliance = alliances.alliance1.alliance;\\n            joinTime = alliances.alliance1.joinTime;\\n        } else if (slot == 2) {\\n            alliance = alliances.alliance2.alliance;\\n            joinTime = alliances.alliance2.joinTime;\\n        } else if (slot == 3) {\\n            alliance = alliances.alliance3.alliance;\\n            joinTime = alliances.alliance3.joinTime;\\n        }\\n\\n        nonce = _allianceNonces[player][alliance];\\n    }\\n\\n    function getAllianceData(address player, IAlliance alliance) public view returns (uint96 joinTime, uint256 nonce) {\\n        nonce = _allianceNonces[player][alliance];\\n\\n        Alliances storage alliances = _alliances[player];\\n        if (alliances.alliance0.alliance == alliance) {\\n            joinTime = alliances.alliance0.joinTime;\\n        } else if (alliances.alliance1.alliance == alliance) {\\n            joinTime = alliances.alliance1.joinTime;\\n        } else if (alliances.alliance2.alliance == alliance) {\\n            joinTime = alliances.alliance2.joinTime;\\n        } else if (alliances.alliance3.alliance == alliance) {\\n            joinTime = alliances.alliance3.joinTime;\\n        }\\n    }\\n\\n    function havePlayersAnAllianceInCommon(\\n        address player1,\\n        address player2,\\n        uint256 timestamp\\n    ) external view returns (IAlliance alliance, uint96 joinTime) {\\n        Alliances storage p1Alliances = _alliances[player1];\\n        Alliances storage p2Alliances = _alliances[player2];\\n\\n        AllianceRow[4] memory player1Alliances;\\n        AllianceRow[4] memory player2Alliances;\\n        uint256 num1 = 0;\\n        uint256 num2 = 0;\\n\\n        for (uint256 i = 0; i < 4; i++) {\\n            if (i == num1) {\\n                AllianceRow memory allianceRow;\\n                if (i == 0) {\\n                    allianceRow = p1Alliances.alliance0;\\n                } else if (i == 1) {\\n                    allianceRow = p1Alliances.alliance1;\\n                } else if (i == 2) {\\n                    allianceRow = p1Alliances.alliance2;\\n                } else if (i == 3) {\\n                    allianceRow = p1Alliances.alliance3;\\n                }\\n                if (address(allianceRow.alliance) == address(0)) {\\n                    // console.log(\\\"p1 exhausted\\\");\\n                    return (alliance, joinTime); // the alliance leave ensure that there is no gap // TODO\\n                }\\n                player1Alliances[num1++] = allianceRow;\\n            }\\n            for (uint256 j = 0; j < 4; j++) {\\n                if (j == num2) {\\n                    AllianceRow memory allianceRow;\\n                    if (j == 0) {\\n                        allianceRow = p2Alliances.alliance0;\\n                    } else if (j == 1) {\\n                        allianceRow = p2Alliances.alliance1;\\n                    } else if (j == 2) {\\n                        allianceRow = p2Alliances.alliance2;\\n                    } else if (j == 3) {\\n                        allianceRow = p2Alliances.alliance3;\\n                    }\\n                    if (address(allianceRow.alliance) == address(0)) {\\n                        // console.log(\\\"p2 exhausted\\\");\\n                        // return (alliance, joinTime); // the alliance leave ensure that there is no gap // TODO\\n                        break;\\n                    }\\n                    player2Alliances[num2++] = allianceRow;\\n                }\\n\\n                if (player1Alliances[i].alliance == player2Alliances[j].alliance) {\\n                    if (player1Alliances[i].joinTime >= player2Alliances[j].joinTime) {\\n                        if (player1Alliances[i].joinTime < timestamp) {\\n                            return (player1Alliances[i].alliance, player1Alliances[i].joinTime);\\n                        } else {\\n                            // TODO check greater ?\\n                            alliance = player1Alliances[i].alliance;\\n                            joinTime = player1Alliances[i].joinTime;\\n                        }\\n                    } else {\\n                        if (player2Alliances[j].joinTime < timestamp) {\\n                            return (player2Alliances[j].alliance, player2Alliances[j].joinTime);\\n                        } else {\\n                            // TODO check greater ?\\n                            alliance = player2Alliances[j].alliance;\\n                            joinTime = player2Alliances[j].joinTime;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        // console.log(address(alliance));\\n        // console.log(joinTime);\\n    }\\n\\n    // -----------------------------------------------------------------------------------------------------\\n    // FROM PLAYER\\n    // -----------------------------------------------------------------------------------------------------\\n\\n    function joinAlliance(IAlliance alliance, bytes calldata data) external returns (bool joined) {\\n        Alliances storage alliances = _alliances[msg.sender];\\n        uint256 slot = 0;\\n        if (address(alliances.alliance0.alliance) != address(0)) {\\n            slot++;\\n        }\\n        if (address(alliances.alliance1.alliance) != address(0)) {\\n            slot++;\\n        }\\n        if (address(alliances.alliance2.alliance) != address(0)) {\\n            slot++;\\n        }\\n        require(address(alliances.alliance3.alliance) == address(0), \\\"MAX_NUM_ALLIANCES_REACHED\\\");\\n\\n        joined = alliance.requestToJoin(msg.sender, data);\\n        if (joined) {\\n            if (slot == 0) {\\n                alliances.alliance0.alliance = alliance;\\n                alliances.alliance0.joinTime = uint96(block.timestamp);\\n            } else if (slot == 1) {\\n                alliances.alliance1.alliance = alliance;\\n                alliances.alliance1.joinTime = uint96(block.timestamp);\\n            } else if (slot == 2) {\\n                alliances.alliance2.alliance = alliance;\\n                alliances.alliance2.joinTime = uint96(block.timestamp);\\n            } else if (slot == 3) {\\n                alliances.alliance3.alliance = alliance;\\n                alliances.alliance3.joinTime = uint96(block.timestamp);\\n            }\\n\\n            emit AllianceLink(alliance, msg.sender, true);\\n        }\\n    }\\n\\n    function leaveAlliance(IAlliance alliance) external {\\n        _leaveAlliance(msg.sender, alliance);\\n        try alliance.playerHasLeft(msg.sender) {} catch {}\\n        // TODO ensure callback not failed due to low gas (1/64 rule)\\n    }\\n\\n    // -----------------------------------------------------------------------------------------------------\\n    // FROM ALLIANCE\\n    // -----------------------------------------------------------------------------------------------------\\n\\n    function addPlayerToAlliance(\\n        address player,\\n        uint32 nonce,\\n        bytes calldata signature\\n    ) external {\\n        _addPlayerToAlliance(player, nonce, signature);\\n    }\\n\\n    struct PlayerSubmission {\\n        address addr;\\n        uint32 nonce;\\n        bytes signature;\\n    }\\n\\n    function addMultiplePlayersToAlliance(PlayerSubmission[] calldata playerSubmissions) external {\\n        for (uint256 i = 0; i < playerSubmissions.length; i++) {\\n            _addPlayerToAlliance(playerSubmissions[i].addr, playerSubmissions[i].nonce, playerSubmissions[i].signature);\\n        }\\n    }\\n\\n    function ejectPlayerFromAlliance(address player) external {\\n        _leaveAlliance(player, IAlliance(msg.sender));\\n    }\\n\\n    // -----------------------------------------------------------------------------------------------------\\n    // INTERNAL\\n    // -----------------------------------------------------------------------------------------------------\\n\\n    function _addPlayerToAlliance(\\n        address player,\\n        uint32 nonce,\\n        bytes calldata signature\\n    ) internal {\\n        IAlliance alliance = IAlliance(msg.sender);\\n\\n        Alliances storage alliances = _alliances[player];\\n        uint256 slot = 0;\\n        if (address(alliances.alliance0.alliance) != address(0)) {\\n            require(alliances.alliance0.alliance != alliance, \\\"ALREADY_JOINED\\\");\\n            slot++;\\n        }\\n        if (address(alliances.alliance1.alliance) != address(0)) {\\n            require(alliances.alliance1.alliance != alliance, \\\"ALREADY_JOINED\\\");\\n            slot++;\\n        }\\n        if (address(alliances.alliance2.alliance) != address(0)) {\\n            require(alliances.alliance2.alliance != alliance, \\\"ALREADY_JOINED\\\");\\n            slot++;\\n        }\\n        require(alliances.alliance3.alliance != alliance, \\\"ALREADY_JOINED\\\");\\n        require(address(alliances.alliance3.alliance) == address(0), \\\"MAX_NUM_ALLIANCES_REACHED\\\");\\n\\n        uint256 currentNonce = _allianceNonces[player][alliance];\\n        require(currentNonce == nonce, \\\"INVALID_NONCE\\\");\\n\\n        bytes memory message;\\n        if (nonce == 0) {\\n            message = abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n56\\\",\\n                \\\"Join Alliance 0x0000000000000000000000000000000000000000\\\"\\n            );\\n            _writeUintAsHex(message, 28 + 55, uint160(msg.sender));\\n        } else {\\n            message = abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n76\\\",\\n                \\\"Join Alliance 0x0000000000000000000000000000000000000000 (nonce:          0)\\\"\\n            );\\n            _writeUintAsHex(message, 28 + 55, uint160(msg.sender));\\n            _writeUintAsDecimal(message, 28 + 74, nonce);\\n        }\\n\\n        // console.log(string(message));\\n\\n        bytes32 digest = keccak256(message);\\n\\n        address signer = digest.recover(signature);\\n        require(player == signer, \\\"INVALID_SIGNATURE\\\");\\n\\n        if (slot == 0) {\\n            alliances.alliance0.alliance = alliance;\\n            alliances.alliance0.joinTime = uint96(block.timestamp);\\n        } else if (slot == 1) {\\n            alliances.alliance1.alliance = alliance;\\n            alliances.alliance1.joinTime = uint96(block.timestamp);\\n        } else if (slot == 2) {\\n            alliances.alliance2.alliance = alliance;\\n            alliances.alliance2.joinTime = uint96(block.timestamp);\\n        } else if (slot == 3) {\\n            alliances.alliance3.alliance = alliance;\\n            alliances.alliance3.joinTime = uint96(block.timestamp);\\n        }\\n        _allianceNonces[player][alliance] = nonce + 1;\\n\\n        emit AllianceLink(alliance, player, true);\\n\\n        _checkERC1155AndCallSafeTransfer(msg.sender, address(0), player, uint256(uint160(address(alliance))), 1);\\n        emit TransferSingle(msg.sender, address(0), player, uint256(uint160(address(alliance))), 1);\\n    }\\n\\n    bytes internal constant hexAlphabet = \\\"0123456789abcdef\\\";\\n    bytes internal constant decimalAlphabet = \\\"0123456789\\\";\\n\\n    function _writeUintAsHex(\\n        bytes memory data,\\n        uint256 endPos,\\n        uint256 num\\n    ) internal pure {\\n        while (num != 0) {\\n            data[endPos--] = bytes1(hexAlphabet[num % 16]);\\n            num /= 16;\\n        }\\n    }\\n\\n    function _writeUintAsDecimal(\\n        bytes memory data,\\n        uint256 endPos,\\n        uint256 num\\n    ) internal pure {\\n        while (num != 0) {\\n            data[endPos--] = bytes1(decimalAlphabet[num % 10]);\\n            num /= 10;\\n        }\\n    }\\n\\n    function _leaveAlliance(address player, IAlliance alliance) internal {\\n        Alliances storage alliances = _alliances[msg.sender];\\n\\n        IAlliance lastSlotAlliance;\\n        uint96 lastSlotJoinTime;\\n\\n        require(address(alliances.alliance0.alliance) != address(0), \\\"NOT_PART_OF_ANY_ALLIANCE\\\");\\n\\n        if (address(alliances.alliance1.alliance) == address(0)) {\\n            lastSlotAlliance = alliances.alliance0.alliance;\\n            lastSlotJoinTime = alliances.alliance0.joinTime;\\n            alliances.alliance0.alliance = IAlliance(address(0));\\n            alliances.alliance0.joinTime = 0;\\n        } else {\\n            if (address(alliances.alliance2.alliance) == address(0)) {\\n                lastSlotAlliance = alliances.alliance1.alliance;\\n                lastSlotJoinTime = alliances.alliance1.joinTime;\\n                alliances.alliance1.alliance = IAlliance(address(0));\\n                alliances.alliance1.joinTime = 0;\\n            } else {\\n                if (address(alliances.alliance3.alliance) == address(0)) {\\n                    lastSlotAlliance = alliances.alliance2.alliance;\\n                    lastSlotJoinTime = alliances.alliance2.joinTime;\\n                    alliances.alliance2.alliance = IAlliance(address(0));\\n                    alliances.alliance2.joinTime = 0;\\n                } else {\\n                    lastSlotAlliance = alliances.alliance3.alliance;\\n                    lastSlotJoinTime = alliances.alliance3.joinTime;\\n                    alliances.alliance3.alliance = IAlliance(address(0));\\n                    alliances.alliance3.joinTime = 0;\\n                }\\n            }\\n        }\\n\\n        if (alliance != lastSlotAlliance) {\\n            if (alliances.alliance0.alliance == alliance) {\\n                alliances.alliance0.alliance = lastSlotAlliance;\\n                alliances.alliance0.joinTime = lastSlotJoinTime;\\n            } else if (alliances.alliance1.alliance == alliance) {\\n                alliances.alliance1.alliance = lastSlotAlliance;\\n                alliances.alliance1.joinTime = lastSlotJoinTime;\\n            } else if (alliances.alliance2.alliance == alliance) {\\n                alliances.alliance2.alliance = lastSlotAlliance;\\n                alliances.alliance2.joinTime = lastSlotJoinTime;\\n            } else {\\n                revert(\\\"NOT_PART_OF_THE_ALLIANCE\\\");\\n            }\\n        }\\n\\n        emit AllianceLink(alliance, player, false);\\n        emit TransferSingle(msg.sender, player, address(0), uint256(uint160(address(alliance))), 1);\\n    }\\n\\n    function _msgSender() internal view returns (address) {\\n        return msg.sender; // TODO metatx\\n    }\\n\\n    // ---------------------------------------------------------------------\\n    // Support For ERC-1155\\n    // ---------------------------------------------------------------------\\n\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    function balanceOf(address owner, uint256 id) external view returns (uint256 balance) {\\n        require(id == uint160(id), \\\"INVALID_ID\\\");\\n        (uint96 joinTime, ) = getAllianceData(owner, IAlliance(address(uint160(id))));\\n        if (joinTime > 0) {\\n            return 1;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory balances)\\n    {\\n        balances = new uint256[](owners.length);\\n        for (uint256 i = 0; i < owners.length; i++) {\\n            require(ids[i] == uint160(ids[i]), \\\"INVALID_ID\\\");\\n            (uint96 joinTime, ) = getAllianceData(owners[i], IAlliance(address(uint160(ids[i]))));\\n            if (joinTime > 0) {\\n                balances[i] = 1;\\n            } else {\\n                balances[i] = 0;\\n            }\\n        }\\n    }\\n\\n    function isApprovedForAll(address, address) external pure returns (bool) {\\n        return false;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool) {\\n        return interfaceID == 0xd9b67a26 || interfaceID == 0x01ffc9a7;\\n    }\\n\\n    function _checkERC1155AndCallSafeTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value\\n    ) internal returns (bool) {\\n        if (!Address.isContract(to)) {\\n            return true;\\n        }\\n\\n        return ERC1155TokenReceiver(to).onERC1155Received(operator, from, id, value, \\\"\\\") == 0xf23a6e61;\\n    }\\n}\\n\\ninterface ERC1155TokenReceiver {\\n    function onERC1155Received(\\n        address _operator,\\n        address _from,\\n        uint256 _id,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xec19574b64bf1627a9d136cf98d2b9c23521d8dc2ea1aa1265b63635222f0253\",\"license\":\"AGPL-3.0\"},\"src/interfaces/IAlliance.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\ninterface IAlliance {\\n    function requestToJoin(address player, bytes calldata data) external returns (bool);\\n\\n    function playerHasLeft(address player) external;\\n}\\n\",\"keccak256\":\"0x56331cf35f0c52161d22a1094809e4e55b6be6dff3f7c18a3070b325e1afced8\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612fa3806100206000396000f3fe608060405234801561001057600080fd5b50600436106100d35760003560e01c80635f3f7a9a116100815780638efb75c31161005b5780638efb75c314610218578063df2c0f491461022b578063e985e9c51461027757600080fd5b80635f3f7a9a146101df5780636da06630146101f25780637a784cb41461020557600080fd5b806317e796ea116100b257806317e796ea146101735780634e1273f4146101885780634ed2986d146101a857600080fd5b8062fdd58e146100d857806301ffc9a7146100fe5780631376720214610121575b600080fd5b6100eb6100e63660046128d6565b61028d565b6040519081526020015b60405180910390f35b61011161010c366004612930565b61034c565b60405190151581526020016100f5565b61013461012f366004612954565b6103e1565b6040805173ffffffffffffffffffffffffffffffffffffffff90941684526bffffffffffffffffffffffff9092166020840152908201526060016100f5565b610186610181366004612993565b610598565b005b61019b6101963660046129f5565b6105a5565b6040516100f59190612a61565b6101bb6101b6366004612aa5565b610769565b604080516bffffffffffffffffffffffff90931683526020830191909152016100f5565b6101116101ed366004612b15565b6108ec565b610186610200366004612b83565b610c47565b610186610213366004612993565b610c59565b610186610226366004612bda565b610ce2565b61023e610239366004612c1c565b610da5565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683526bffffffffffffffffffffffff9091166020830152016100f5565b610111610285366004612aa5565b600092915050565b60008173ffffffffffffffffffffffffffffffffffffffff168214610313576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f494e56414c49445f49440000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600061031f8484610769565b5090506bffffffffffffffffffffffff811615610340576001915050610346565b60009150505b92915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614806103465750507fffffffff00000000000000000000000000000000000000000000000000000000167f01ffc9a7000000000000000000000000000000000000000000000000000000001490565b73ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604081208190819060ff851661045a57805473ffffffffffffffffffffffffffffffffffffffff811694507401000000000000000000000000000000000000000090046bffffffffffffffffffffffff16925061055b565b8460ff16600114156104b157600181015473ffffffffffffffffffffffffffffffffffffffff811694507401000000000000000000000000000000000000000090046bffffffffffffffffffffffff16925061055b565b8460ff166002141561050857600281015473ffffffffffffffffffffffffffffffffffffffff811694507401000000000000000000000000000000000000000090046bffffffffffffffffffffffff16925061055b565b8460ff166003141561055b57600381015473ffffffffffffffffffffffffffffffffffffffff811694507401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1692505b505073ffffffffffffffffffffffffffffffffffffffff938416600090815260208181526040808320968516835295905293909320549093909150565b6105a281336113f9565b50565b60608367ffffffffffffffff8111156105c0576105c0612c5d565b6040519080825280602002602001820160405280156105e9578160200160208202803683370190505b50905060005b848110156107605783838281811061060957610609612c8c565b9050602002013573ffffffffffffffffffffffffffffffffffffffff1684848381811061063857610638612c8c565b90506020020135146106a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f494e56414c49445f494400000000000000000000000000000000000000000000604482015260640161030a565b60006106f08787848181106106bd576106bd612c8c565b90506020020160208101906106d29190612993565b8686858181106106e4576106e4612c8c565b90506020020135610769565b5090506bffffffffffffffffffffffff81161561072c57600183838151811061071b5761071b612c8c565b60200260200101818152505061074d565b600083838151811061074057610740612c8c565b6020026020010181815250505b508061075881612cea565b9150506105ef565b50949350505050565b73ffffffffffffffffffffffffffffffffffffffff80831660008181526020818152604080832086861680855290835281842054948452600190925282208054929490921614156107e35780547401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1692506108e4565b600181015473ffffffffffffffffffffffffffffffffffffffff8581169116141561083a5760018101547401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1692506108e4565b600281015473ffffffffffffffffffffffffffffffffffffffff858116911614156108915760028101547401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1692506108e4565b600381015473ffffffffffffffffffffffffffffffffffffffff858116911614156108e45760038101547401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1692505b509250929050565b3360009081526001602052604081208054829073ffffffffffffffffffffffffffffffffffffffff1615610928578061092481612cea565b9150505b600182015473ffffffffffffffffffffffffffffffffffffffff1615610956578061095281612cea565b9150505b600282015473ffffffffffffffffffffffffffffffffffffffff1615610984578061098081612cea565b9150505b600382015473ffffffffffffffffffffffffffffffffffffffff1615610a06576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4d41585f4e554d5f414c4c49414e4345535f5245414348454400000000000000604482015260640161030a565b6040517f1d99b55400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff871690631d99b55490610a5c90339089908990600401612d23565b602060405180830381600087803b158015610a7657600080fd5b505af1158015610a8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aae9190612d8d565b92508215610c3e5780610b00576bffffffffffffffffffffffff4216740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff8716178255610bef565b8060011415610b51576bffffffffffffffffffffffff4216740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff8716176001830155610bef565b8060021415610ba2576bffffffffffffffffffffffff4216740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff8716176002830155610bef565b8060031415610bef576bffffffffffffffffffffffff4216740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff87161760038301555b60405160018152339073ffffffffffffffffffffffffffffffffffffffff8816907f5e60402083b3427099886174996f295e5e29d12bbe871aef1041e9a4324cdb099060200160405180910390a35b50509392505050565b610c53848484846118bf565b50505050565b610c6333826113f9565b6040517f9192e30200000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff821690639192e30290602401600060405180830381600087803b158015610cca57600080fd5b505af1925050508015610cdb575060015b6105a25750565b60005b81811015610da057610d8e838383818110610d0257610d02612c8c565b9050602002810190610d149190612daf565b610d22906020810190612993565b848484818110610d3457610d34612c8c565b9050602002810190610d469190612daf565b610d57906040810190602001612ded565b858585818110610d6957610d69612c8c565b9050602002810190610d7b9190612daf565b610d89906040810190612e08565b6118bf565b80610d9881612cea565b915050610ce5565b505050565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152600160205260408082209285168252812090918291610ddf61287b565b610de761287b565b60008060005b60048110156113e95782811415610fdd57604080518082019091526000808252602082015281610e6d575060408051808201909152875473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff166020820152610f8f565b8160011415610ecf575060408051808201909152600188015473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff166020820152610f8f565b8160021415610f31575060408051808201909152600288015473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff166020820152610f8f565b8160031415610f8f575060408051808201909152600388015473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1660208201525b805173ffffffffffffffffffffffffffffffffffffffff16610fb85750505050505050506113f1565b808685610fc481612cea565b965060048110610fd657610fd6612c8c565b6020020152505b60005b60048110156113d657828114156111c957604080518082019091526000808252602082015281611060575060408051808201909152875473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff166020820152611182565b81600114156110c2575060408051808201909152600188015473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff166020820152611182565b8160021415611124575060408051808201909152600288015473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff166020820152611182565b8160031415611182575060408051808201909152600388015473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1660208201525b805173ffffffffffffffffffffffffffffffffffffffff166111a457506113d6565b8086856111b081612cea565b9650600481106111c2576111c2612c8c565b6020020152505b8481600481106111db576111db612c8c565b60200201515173ffffffffffffffffffffffffffffffffffffffff1686836004811061120957611209612c8c565b60200201515173ffffffffffffffffffffffffffffffffffffffff1614156113c45784816004811061123d5761123d612c8c565b6020020151602001516bffffffffffffffffffffffff1686836004811061126657611266612c8c565b6020020151602001516bffffffffffffffffffffffff1610611332578a86836004811061129557611295612c8c565b6020020151602001516bffffffffffffffffffffffff1610156112f6578582600481106112c4576112c4612c8c565b6020020151518683600481106112dc576112dc612c8c565b6020020151602001519950995050505050505050506113f1565b85826004811061130857611308612c8c565b602002015151995085826004811061132257611322612c8c565b60200201516020015198506113c4565b8a85826004811061134557611345612c8c565b6020020151602001516bffffffffffffffffffffffff16101561138c5784816004811061137457611374612c8c565b6020020151518582600481106112dc576112dc612c8c565b84816004811061139e5761139e612c8c565b60200201515199508481600481106113b8576113b8612c8c565b60200201516020015198505b806113ce81612cea565b915050610fe0565b50806113e181612cea565b915050610ded565b505050505050505b935093915050565b3360009081526001602052604081208054909190819073ffffffffffffffffffffffffffffffffffffffff1661148b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e4f545f504152545f4f465f414e595f414c4c49414e43450000000000000000604482015260640161030a565b600183015473ffffffffffffffffffffffffffffffffffffffff166114f557505080546000825573ffffffffffffffffffffffffffffffffffffffff8116907401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1661161f565b600283015473ffffffffffffffffffffffffffffffffffffffff16611564575050600181018054600090915573ffffffffffffffffffffffffffffffffffffffff8116907401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1661161f565b600383015473ffffffffffffffffffffffffffffffffffffffff166115d3575050600281018054600090915573ffffffffffffffffffffffffffffffffffffffff8116907401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1661161f565b5050600381018054600090915573ffffffffffffffffffffffffffffffffffffffff8116907401000000000000000000000000000000000000000090046bffffffffffffffffffffffff165b8173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146117f557825473ffffffffffffffffffffffffffffffffffffffff858116911614156116b9576bffffffffffffffffffffffff8116740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff83161783556117f5565b600183015473ffffffffffffffffffffffffffffffffffffffff85811691161415611726576bffffffffffffffffffffffff8116740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff83161760018401556117f5565b600283015473ffffffffffffffffffffffffffffffffffffffff85811691161415611793576bffffffffffffffffffffffff8116740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff83161760028401556117f5565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e4f545f504152545f4f465f5448455f414c4c49414e43450000000000000000604482015260640161030a565b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f5e60402083b3427099886174996f295e5e29d12bbe871aef1041e9a4324cdb096000604051611857911515815260200190565b60405180910390a36040805173ffffffffffffffffffffffffffffffffffffffff8681168252600160208301526000929088169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260016020526040812080543393919291161561198457815473ffffffffffffffffffffffffffffffffffffffff84811691161415611976576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f414c52454144595f4a4f494e4544000000000000000000000000000000000000604482015260640161030a565b8061198081612cea565b9150505b600182015473ffffffffffffffffffffffffffffffffffffffff1615611a3957600182015473ffffffffffffffffffffffffffffffffffffffff84811691161415611a2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f414c52454144595f4a4f494e4544000000000000000000000000000000000000604482015260640161030a565b80611a3581612cea565b9150505b600282015473ffffffffffffffffffffffffffffffffffffffff1615611aee57600282015473ffffffffffffffffffffffffffffffffffffffff84811691161415611ae0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f414c52454144595f4a4f494e4544000000000000000000000000000000000000604482015260640161030a565b80611aea81612cea565b9150505b600382015473ffffffffffffffffffffffffffffffffffffffff84811691161415611b75576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f414c52454144595f4a4f494e4544000000000000000000000000000000000000604482015260640161030a565b600382015473ffffffffffffffffffffffffffffffffffffffff1615611bf7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4d41585f4e554d5f414c4c49414e4345535f5245414348454400000000000000604482015260640161030a565b73ffffffffffffffffffffffffffffffffffffffff8088166000908152602081815260408083209387168352929052205463ffffffff87168114611c97576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f494e56414c49445f4e4f4e434500000000000000000000000000000000000000604482015260640161030a565b606063ffffffff8816611d5d576040517f19457468657265756d205369676e6564204d6573736167653a0a35360000000060208201527f4a6f696e20416c6c69616e636520307830303030303030303030303030303030603c8201527f3030303030303030303030303030303030303030303030300000000000000000605c820152607401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190529050611d5881605333612171565b611e49565b6040517f19457468657265756d205369676e6564204d6573736167653a0a37360000000060208201527f4a6f696e20416c6c69616e636520307830303030303030303030303030303030603c8201527f30303030303030303030303030303030303030303030303020286e6f6e63653a605c8201527f2020202020202020202030290000000000000000000000000000000000000000607c820152608801604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190529050611e3781605333612171565b611e498160668a63ffffffff1661224b565b6000818051906020012090506000611e9989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525086939250506123259050565b90508073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff1614611f30576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f5349474e4154555245000000000000000000000000000000604482015260640161030a565b84611f7a576bffffffffffffffffffffffff4216740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff8816178655612069565b8460011415611fcb576bffffffffffffffffffffffff4216740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff8816176001870155612069565b846002141561201c576bffffffffffffffffffffffff4216740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff8816176002870155612069565b8460031415612069576bffffffffffffffffffffffff4216740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff88161760038701555b6120748a6001612e6d565b73ffffffffffffffffffffffffffffffffffffffff8c8116600081815260208181526040808320948d168084529482529182902063ffffffff95909516909455516001815290927f5e60402083b3427099886174996f295e5e29d12bbe871aef1041e9a4324cdb09910160405180910390a361210b3360008d8a73ffffffffffffffffffffffffffffffffffffffff166001612349565b506040805173ffffffffffffffffffffffffffffffffffffffff8981168252600160208301528d169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050505050505050565b8015610da0576040805180820190915260108082527f303132333435363738396162636465660000000000000000000000000000000060208301526121b69083612ec4565b815181106121c6576121c6612c8c565b01602001517fff000000000000000000000000000000000000000000000000000000000000001683836121f881612ed8565b94508151811061220a5761220a612c8c565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612244601082612f0d565b9050612171565b8015610da05760408051808201909152600a8082527f303132333435363738390000000000000000000000000000000000000000000060208301526122909083612ec4565b815181106122a0576122a0612c8c565b01602001517fff000000000000000000000000000000000000000000000000000000000000001683836122d281612ed8565b9450815181106122e4576122e4612c8c565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061231e600a82612f0d565b905061224b565b60008060006123348585612452565b91509150612341816124c2565b509392505050565b6000833b61235957506001612449565b6040517ff23a6e6100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301528681166024830152604482018590526064820184905260a06084830152600060a483015285169063f23a6e619060c401602060405180830381600087803b1580156123e657600080fd5b505af11580156123fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241e9190612f21565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191663f23a6e6160e01b1490505b95945050505050565b6000808251604114156124895760208301516040840151606085015160001a61247d8782858561271b565b945094505050506124bb565b8251604014156124b357602083015160408401516124a8868383612833565b9350935050506124bb565b506000905060025b9250929050565b60008160048111156124d6576124d6612f3e565b14156124df5750565b60018160048111156124f3576124f3612f3e565b141561255b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161030a565b600281600481111561256f5761256f612f3e565b14156125d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161030a565b60038160048111156125eb576125eb612f3e565b1415612679576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f7565000000000000000000000000000000000000000000000000000000000000606482015260840161030a565b600481600481111561268d5761268d612f3e565b14156105a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f7565000000000000000000000000000000000000000000000000000000000000606482015260840161030a565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612752575060009050600361282a565b8460ff16601b1415801561276a57508460ff16601c14155b1561277b575060009050600461282a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156127cf573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166128235760006001925092505061282a565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831660ff84901c601b0161286d8782888561271b565b935093505050935093915050565b60405180608001604052806004905b604080518082019091526000808252602082015281526020019060019003908161288a5790505090565b73ffffffffffffffffffffffffffffffffffffffff811681146105a257600080fd5b600080604083850312156128e957600080fd5b82356128f4816128b4565b946020939093013593505050565b7fffffffff00000000000000000000000000000000000000000000000000000000811681146105a257600080fd5b60006020828403121561294257600080fd5b813561294d81612902565b9392505050565b6000806040838503121561296757600080fd5b8235612972816128b4565b9150602083013560ff8116811461298857600080fd5b809150509250929050565b6000602082840312156129a557600080fd5b813561294d816128b4565b60008083601f8401126129c257600080fd5b50813567ffffffffffffffff8111156129da57600080fd5b6020830191508360208260051b85010111156124bb57600080fd5b60008060008060408587031215612a0b57600080fd5b843567ffffffffffffffff80821115612a2357600080fd5b612a2f888389016129b0565b90965094506020870135915080821115612a4857600080fd5b50612a55878288016129b0565b95989497509550505050565b6020808252825182820181905260009190848201906040850190845b81811015612a9957835183529284019291840191600101612a7d565b50909695505050505050565b60008060408385031215612ab857600080fd5b8235612ac3816128b4565b91506020830135612988816128b4565b60008083601f840112612ae557600080fd5b50813567ffffffffffffffff811115612afd57600080fd5b6020830191508360208285010111156124bb57600080fd5b600080600060408486031215612b2a57600080fd5b8335612b35816128b4565b9250602084013567ffffffffffffffff811115612b5157600080fd5b612b5d86828701612ad3565b9497909650939450505050565b803563ffffffff81168114612b7e57600080fd5b919050565b60008060008060608587031215612b9957600080fd5b8435612ba4816128b4565b9350612bb260208601612b6a565b9250604085013567ffffffffffffffff811115612bce57600080fd5b612a5587828801612ad3565b60008060208385031215612bed57600080fd5b823567ffffffffffffffff811115612c0457600080fd5b612c10858286016129b0565b90969095509350505050565b600080600060608486031215612c3157600080fd5b8335612c3c816128b4565b92506020840135612c4c816128b4565b929592945050506040919091013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612d1c57612d1c612cbb565b5060010190565b73ffffffffffffffffffffffffffffffffffffffff8416815260406020820152816040820152818360608301376000818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b600060208284031215612d9f57600080fd5b8151801515811461294d57600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa1833603018112612de357600080fd5b9190910192915050565b600060208284031215612dff57600080fd5b61294d82612b6a565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612e3d57600080fd5b83018035915067ffffffffffffffff821115612e5857600080fd5b6020019150368190038213156124bb57600080fd5b600063ffffffff808316818516808303821115612e8c57612e8c612cbb565b01949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082612ed357612ed3612e95565b500690565b600081612ee757612ee7612cbb565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b600082612f1c57612f1c612e95565b500490565b600060208284031215612f3357600080fd5b815161294d81612902565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220ca027cf64c491993690ad3b41f4745ffd0fa0db1cc494c9663d48a4034d55d8c64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d35760003560e01c80635f3f7a9a116100815780638efb75c31161005b5780638efb75c314610218578063df2c0f491461022b578063e985e9c51461027757600080fd5b80635f3f7a9a146101df5780636da06630146101f25780637a784cb41461020557600080fd5b806317e796ea116100b257806317e796ea146101735780634e1273f4146101885780634ed2986d146101a857600080fd5b8062fdd58e146100d857806301ffc9a7146100fe5780631376720214610121575b600080fd5b6100eb6100e63660046128d6565b61028d565b6040519081526020015b60405180910390f35b61011161010c366004612930565b61034c565b60405190151581526020016100f5565b61013461012f366004612954565b6103e1565b6040805173ffffffffffffffffffffffffffffffffffffffff90941684526bffffffffffffffffffffffff9092166020840152908201526060016100f5565b610186610181366004612993565b610598565b005b61019b6101963660046129f5565b6105a5565b6040516100f59190612a61565b6101bb6101b6366004612aa5565b610769565b604080516bffffffffffffffffffffffff90931683526020830191909152016100f5565b6101116101ed366004612b15565b6108ec565b610186610200366004612b83565b610c47565b610186610213366004612993565b610c59565b610186610226366004612bda565b610ce2565b61023e610239366004612c1c565b610da5565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683526bffffffffffffffffffffffff9091166020830152016100f5565b610111610285366004612aa5565b600092915050565b60008173ffffffffffffffffffffffffffffffffffffffff168214610313576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f494e56414c49445f49440000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600061031f8484610769565b5090506bffffffffffffffffffffffff811615610340576001915050610346565b60009150505b92915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614806103465750507fffffffff00000000000000000000000000000000000000000000000000000000167f01ffc9a7000000000000000000000000000000000000000000000000000000001490565b73ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604081208190819060ff851661045a57805473ffffffffffffffffffffffffffffffffffffffff811694507401000000000000000000000000000000000000000090046bffffffffffffffffffffffff16925061055b565b8460ff16600114156104b157600181015473ffffffffffffffffffffffffffffffffffffffff811694507401000000000000000000000000000000000000000090046bffffffffffffffffffffffff16925061055b565b8460ff166002141561050857600281015473ffffffffffffffffffffffffffffffffffffffff811694507401000000000000000000000000000000000000000090046bffffffffffffffffffffffff16925061055b565b8460ff166003141561055b57600381015473ffffffffffffffffffffffffffffffffffffffff811694507401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1692505b505073ffffffffffffffffffffffffffffffffffffffff938416600090815260208181526040808320968516835295905293909320549093909150565b6105a281336113f9565b50565b60608367ffffffffffffffff8111156105c0576105c0612c5d565b6040519080825280602002602001820160405280156105e9578160200160208202803683370190505b50905060005b848110156107605783838281811061060957610609612c8c565b9050602002013573ffffffffffffffffffffffffffffffffffffffff1684848381811061063857610638612c8c565b90506020020135146106a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f494e56414c49445f494400000000000000000000000000000000000000000000604482015260640161030a565b60006106f08787848181106106bd576106bd612c8c565b90506020020160208101906106d29190612993565b8686858181106106e4576106e4612c8c565b90506020020135610769565b5090506bffffffffffffffffffffffff81161561072c57600183838151811061071b5761071b612c8c565b60200260200101818152505061074d565b600083838151811061074057610740612c8c565b6020026020010181815250505b508061075881612cea565b9150506105ef565b50949350505050565b73ffffffffffffffffffffffffffffffffffffffff80831660008181526020818152604080832086861680855290835281842054948452600190925282208054929490921614156107e35780547401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1692506108e4565b600181015473ffffffffffffffffffffffffffffffffffffffff8581169116141561083a5760018101547401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1692506108e4565b600281015473ffffffffffffffffffffffffffffffffffffffff858116911614156108915760028101547401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1692506108e4565b600381015473ffffffffffffffffffffffffffffffffffffffff858116911614156108e45760038101547401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1692505b509250929050565b3360009081526001602052604081208054829073ffffffffffffffffffffffffffffffffffffffff1615610928578061092481612cea565b9150505b600182015473ffffffffffffffffffffffffffffffffffffffff1615610956578061095281612cea565b9150505b600282015473ffffffffffffffffffffffffffffffffffffffff1615610984578061098081612cea565b9150505b600382015473ffffffffffffffffffffffffffffffffffffffff1615610a06576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4d41585f4e554d5f414c4c49414e4345535f5245414348454400000000000000604482015260640161030a565b6040517f1d99b55400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff871690631d99b55490610a5c90339089908990600401612d23565b602060405180830381600087803b158015610a7657600080fd5b505af1158015610a8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aae9190612d8d565b92508215610c3e5780610b00576bffffffffffffffffffffffff4216740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff8716178255610bef565b8060011415610b51576bffffffffffffffffffffffff4216740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff8716176001830155610bef565b8060021415610ba2576bffffffffffffffffffffffff4216740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff8716176002830155610bef565b8060031415610bef576bffffffffffffffffffffffff4216740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff87161760038301555b60405160018152339073ffffffffffffffffffffffffffffffffffffffff8816907f5e60402083b3427099886174996f295e5e29d12bbe871aef1041e9a4324cdb099060200160405180910390a35b50509392505050565b610c53848484846118bf565b50505050565b610c6333826113f9565b6040517f9192e30200000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff821690639192e30290602401600060405180830381600087803b158015610cca57600080fd5b505af1925050508015610cdb575060015b6105a25750565b60005b81811015610da057610d8e838383818110610d0257610d02612c8c565b9050602002810190610d149190612daf565b610d22906020810190612993565b848484818110610d3457610d34612c8c565b9050602002810190610d469190612daf565b610d57906040810190602001612ded565b858585818110610d6957610d69612c8c565b9050602002810190610d7b9190612daf565b610d89906040810190612e08565b6118bf565b80610d9881612cea565b915050610ce5565b505050565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152600160205260408082209285168252812090918291610ddf61287b565b610de761287b565b60008060005b60048110156113e95782811415610fdd57604080518082019091526000808252602082015281610e6d575060408051808201909152875473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff166020820152610f8f565b8160011415610ecf575060408051808201909152600188015473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff166020820152610f8f565b8160021415610f31575060408051808201909152600288015473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff166020820152610f8f565b8160031415610f8f575060408051808201909152600388015473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1660208201525b805173ffffffffffffffffffffffffffffffffffffffff16610fb85750505050505050506113f1565b808685610fc481612cea565b965060048110610fd657610fd6612c8c565b6020020152505b60005b60048110156113d657828114156111c957604080518082019091526000808252602082015281611060575060408051808201909152875473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff166020820152611182565b81600114156110c2575060408051808201909152600188015473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff166020820152611182565b8160021415611124575060408051808201909152600288015473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff166020820152611182565b8160031415611182575060408051808201909152600388015473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1660208201525b805173ffffffffffffffffffffffffffffffffffffffff166111a457506113d6565b8086856111b081612cea565b9650600481106111c2576111c2612c8c565b6020020152505b8481600481106111db576111db612c8c565b60200201515173ffffffffffffffffffffffffffffffffffffffff1686836004811061120957611209612c8c565b60200201515173ffffffffffffffffffffffffffffffffffffffff1614156113c45784816004811061123d5761123d612c8c565b6020020151602001516bffffffffffffffffffffffff1686836004811061126657611266612c8c565b6020020151602001516bffffffffffffffffffffffff1610611332578a86836004811061129557611295612c8c565b6020020151602001516bffffffffffffffffffffffff1610156112f6578582600481106112c4576112c4612c8c565b6020020151518683600481106112dc576112dc612c8c565b6020020151602001519950995050505050505050506113f1565b85826004811061130857611308612c8c565b602002015151995085826004811061132257611322612c8c565b60200201516020015198506113c4565b8a85826004811061134557611345612c8c565b6020020151602001516bffffffffffffffffffffffff16101561138c5784816004811061137457611374612c8c565b6020020151518582600481106112dc576112dc612c8c565b84816004811061139e5761139e612c8c565b60200201515199508481600481106113b8576113b8612c8c565b60200201516020015198505b806113ce81612cea565b915050610fe0565b50806113e181612cea565b915050610ded565b505050505050505b935093915050565b3360009081526001602052604081208054909190819073ffffffffffffffffffffffffffffffffffffffff1661148b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e4f545f504152545f4f465f414e595f414c4c49414e43450000000000000000604482015260640161030a565b600183015473ffffffffffffffffffffffffffffffffffffffff166114f557505080546000825573ffffffffffffffffffffffffffffffffffffffff8116907401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1661161f565b600283015473ffffffffffffffffffffffffffffffffffffffff16611564575050600181018054600090915573ffffffffffffffffffffffffffffffffffffffff8116907401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1661161f565b600383015473ffffffffffffffffffffffffffffffffffffffff166115d3575050600281018054600090915573ffffffffffffffffffffffffffffffffffffffff8116907401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1661161f565b5050600381018054600090915573ffffffffffffffffffffffffffffffffffffffff8116907401000000000000000000000000000000000000000090046bffffffffffffffffffffffff165b8173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146117f557825473ffffffffffffffffffffffffffffffffffffffff858116911614156116b9576bffffffffffffffffffffffff8116740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff83161783556117f5565b600183015473ffffffffffffffffffffffffffffffffffffffff85811691161415611726576bffffffffffffffffffffffff8116740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff83161760018401556117f5565b600283015473ffffffffffffffffffffffffffffffffffffffff85811691161415611793576bffffffffffffffffffffffff8116740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff83161760028401556117f5565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e4f545f504152545f4f465f5448455f414c4c49414e43450000000000000000604482015260640161030a565b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f5e60402083b3427099886174996f295e5e29d12bbe871aef1041e9a4324cdb096000604051611857911515815260200190565b60405180910390a36040805173ffffffffffffffffffffffffffffffffffffffff8681168252600160208301526000929088169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260016020526040812080543393919291161561198457815473ffffffffffffffffffffffffffffffffffffffff84811691161415611976576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f414c52454144595f4a4f494e4544000000000000000000000000000000000000604482015260640161030a565b8061198081612cea565b9150505b600182015473ffffffffffffffffffffffffffffffffffffffff1615611a3957600182015473ffffffffffffffffffffffffffffffffffffffff84811691161415611a2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f414c52454144595f4a4f494e4544000000000000000000000000000000000000604482015260640161030a565b80611a3581612cea565b9150505b600282015473ffffffffffffffffffffffffffffffffffffffff1615611aee57600282015473ffffffffffffffffffffffffffffffffffffffff84811691161415611ae0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f414c52454144595f4a4f494e4544000000000000000000000000000000000000604482015260640161030a565b80611aea81612cea565b9150505b600382015473ffffffffffffffffffffffffffffffffffffffff84811691161415611b75576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f414c52454144595f4a4f494e4544000000000000000000000000000000000000604482015260640161030a565b600382015473ffffffffffffffffffffffffffffffffffffffff1615611bf7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4d41585f4e554d5f414c4c49414e4345535f5245414348454400000000000000604482015260640161030a565b73ffffffffffffffffffffffffffffffffffffffff8088166000908152602081815260408083209387168352929052205463ffffffff87168114611c97576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f494e56414c49445f4e4f4e434500000000000000000000000000000000000000604482015260640161030a565b606063ffffffff8816611d5d576040517f19457468657265756d205369676e6564204d6573736167653a0a35360000000060208201527f4a6f696e20416c6c69616e636520307830303030303030303030303030303030603c8201527f3030303030303030303030303030303030303030303030300000000000000000605c820152607401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190529050611d5881605333612171565b611e49565b6040517f19457468657265756d205369676e6564204d6573736167653a0a37360000000060208201527f4a6f696e20416c6c69616e636520307830303030303030303030303030303030603c8201527f30303030303030303030303030303030303030303030303020286e6f6e63653a605c8201527f2020202020202020202030290000000000000000000000000000000000000000607c820152608801604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190529050611e3781605333612171565b611e498160668a63ffffffff1661224b565b6000818051906020012090506000611e9989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525086939250506123259050565b90508073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff1614611f30576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f5349474e4154555245000000000000000000000000000000604482015260640161030a565b84611f7a576bffffffffffffffffffffffff4216740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff8816178655612069565b8460011415611fcb576bffffffffffffffffffffffff4216740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff8816176001870155612069565b846002141561201c576bffffffffffffffffffffffff4216740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff8816176002870155612069565b8460031415612069576bffffffffffffffffffffffff4216740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff88161760038701555b6120748a6001612e6d565b73ffffffffffffffffffffffffffffffffffffffff8c8116600081815260208181526040808320948d168084529482529182902063ffffffff95909516909455516001815290927f5e60402083b3427099886174996f295e5e29d12bbe871aef1041e9a4324cdb09910160405180910390a361210b3360008d8a73ffffffffffffffffffffffffffffffffffffffff166001612349565b506040805173ffffffffffffffffffffffffffffffffffffffff8981168252600160208301528d169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050505050505050565b8015610da0576040805180820190915260108082527f303132333435363738396162636465660000000000000000000000000000000060208301526121b69083612ec4565b815181106121c6576121c6612c8c565b01602001517fff000000000000000000000000000000000000000000000000000000000000001683836121f881612ed8565b94508151811061220a5761220a612c8c565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612244601082612f0d565b9050612171565b8015610da05760408051808201909152600a8082527f303132333435363738390000000000000000000000000000000000000000000060208301526122909083612ec4565b815181106122a0576122a0612c8c565b01602001517fff000000000000000000000000000000000000000000000000000000000000001683836122d281612ed8565b9450815181106122e4576122e4612c8c565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061231e600a82612f0d565b905061224b565b60008060006123348585612452565b91509150612341816124c2565b509392505050565b6000833b61235957506001612449565b6040517ff23a6e6100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301528681166024830152604482018590526064820184905260a06084830152600060a483015285169063f23a6e619060c401602060405180830381600087803b1580156123e657600080fd5b505af11580156123fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241e9190612f21565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191663f23a6e6160e01b1490505b95945050505050565b6000808251604114156124895760208301516040840151606085015160001a61247d8782858561271b565b945094505050506124bb565b8251604014156124b357602083015160408401516124a8868383612833565b9350935050506124bb565b506000905060025b9250929050565b60008160048111156124d6576124d6612f3e565b14156124df5750565b60018160048111156124f3576124f3612f3e565b141561255b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161030a565b600281600481111561256f5761256f612f3e565b14156125d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161030a565b60038160048111156125eb576125eb612f3e565b1415612679576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f7565000000000000000000000000000000000000000000000000000000000000606482015260840161030a565b600481600481111561268d5761268d612f3e565b14156105a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f7565000000000000000000000000000000000000000000000000000000000000606482015260840161030a565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612752575060009050600361282a565b8460ff16601b1415801561276a57508460ff16601c14155b1561277b575060009050600461282a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156127cf573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166128235760006001925092505061282a565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831660ff84901c601b0161286d8782888561271b565b935093505050935093915050565b60405180608001604052806004905b604080518082019091526000808252602082015281526020019060019003908161288a5790505090565b73ffffffffffffffffffffffffffffffffffffffff811681146105a257600080fd5b600080604083850312156128e957600080fd5b82356128f4816128b4565b946020939093013593505050565b7fffffffff00000000000000000000000000000000000000000000000000000000811681146105a257600080fd5b60006020828403121561294257600080fd5b813561294d81612902565b9392505050565b6000806040838503121561296757600080fd5b8235612972816128b4565b9150602083013560ff8116811461298857600080fd5b809150509250929050565b6000602082840312156129a557600080fd5b813561294d816128b4565b60008083601f8401126129c257600080fd5b50813567ffffffffffffffff8111156129da57600080fd5b6020830191508360208260051b85010111156124bb57600080fd5b60008060008060408587031215612a0b57600080fd5b843567ffffffffffffffff80821115612a2357600080fd5b612a2f888389016129b0565b90965094506020870135915080821115612a4857600080fd5b50612a55878288016129b0565b95989497509550505050565b6020808252825182820181905260009190848201906040850190845b81811015612a9957835183529284019291840191600101612a7d565b50909695505050505050565b60008060408385031215612ab857600080fd5b8235612ac3816128b4565b91506020830135612988816128b4565b60008083601f840112612ae557600080fd5b50813567ffffffffffffffff811115612afd57600080fd5b6020830191508360208285010111156124bb57600080fd5b600080600060408486031215612b2a57600080fd5b8335612b35816128b4565b9250602084013567ffffffffffffffff811115612b5157600080fd5b612b5d86828701612ad3565b9497909650939450505050565b803563ffffffff81168114612b7e57600080fd5b919050565b60008060008060608587031215612b9957600080fd5b8435612ba4816128b4565b9350612bb260208601612b6a565b9250604085013567ffffffffffffffff811115612bce57600080fd5b612a5587828801612ad3565b60008060208385031215612bed57600080fd5b823567ffffffffffffffff811115612c0457600080fd5b612c10858286016129b0565b90969095509350505050565b600080600060608486031215612c3157600080fd5b8335612c3c816128b4565b92506020840135612c4c816128b4565b929592945050506040919091013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612d1c57612d1c612cbb565b5060010190565b73ffffffffffffffffffffffffffffffffffffffff8416815260406020820152816040820152818360608301376000818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b600060208284031215612d9f57600080fd5b8151801515811461294d57600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa1833603018112612de357600080fd5b9190910192915050565b600060208284031215612dff57600080fd5b61294d82612b6a565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612e3d57600080fd5b83018035915067ffffffffffffffff821115612e5857600080fd5b6020019150368190038213156124bb57600080fd5b600063ffffffff808316818516808303821115612e8c57612e8c612cbb565b01949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082612ed357612ed3612e95565b500690565b600081612ee757612ee7612cbb565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b600082612f1c57612f1c612e95565b500490565b600060208284031215612f3357600080fd5b815161294d81612902565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220ca027cf64c491993690ad3b41f4745ffd0fa0db1cc494c9663d48a4034d55d8c64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10779,
        "contract": "src/alliances/AllianceRegistry.sol:AllianceRegistry",
        "label": "_allianceNonces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_contract(IAlliance)16131,t_uint256))"
      },
      {
        "astId": 10803,
        "contract": "src/alliances/AllianceRegistry.sol:AllianceRegistry",
        "label": "_alliances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Alliances)10798_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IAlliance)16131": {
        "encoding": "inplace",
        "label": "contract IAlliance",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_contract(IAlliance)16131,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(contract IAlliance => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IAlliance)16131,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Alliances)10798_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AllianceRegistry.Alliances)",
        "numberOfBytes": "32",
        "value": "t_struct(Alliances)10798_storage"
      },
      "t_mapping(t_contract(IAlliance)16131,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IAlliance)16131",
        "label": "mapping(contract IAlliance => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AllianceRow)10785_storage": {
        "encoding": "inplace",
        "label": "struct AllianceRegistry.AllianceRow",
        "members": [
          {
            "astId": 10782,
            "contract": "src/alliances/AllianceRegistry.sol:AllianceRegistry",
            "label": "alliance",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IAlliance)16131"
          },
          {
            "astId": 10784,
            "contract": "src/alliances/AllianceRegistry.sol:AllianceRegistry",
            "label": "joinTime",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Alliances)10798_storage": {
        "encoding": "inplace",
        "label": "struct AllianceRegistry.Alliances",
        "members": [
          {
            "astId": 10788,
            "contract": "src/alliances/AllianceRegistry.sol:AllianceRegistry",
            "label": "alliance0",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AllianceRow)10785_storage"
          },
          {
            "astId": 10791,
            "contract": "src/alliances/AllianceRegistry.sol:AllianceRegistry",
            "label": "alliance1",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(AllianceRow)10785_storage"
          },
          {
            "astId": 10794,
            "contract": "src/alliances/AllianceRegistry.sol:AllianceRegistry",
            "label": "alliance2",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(AllianceRow)10785_storage"
          },
          {
            "astId": 10797,
            "contract": "src/alliances/AllianceRegistry.sol:AllianceRegistry",
            "label": "alliance3",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(AllianceRow)10785_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}