{
  "address": "0x43253e135EEf26aC7C9D4158EBda5f2dC536A7E8",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC721",
              "name": "tokenContract",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "tokens",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct ERC721TransferGateway.TransfersPerContract[]",
          "name": "tokenTransfers",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        }
      ],
      "name": "forward",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC721",
              "name": "tokenContract",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "tokens",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct ERC721TransferGateway.TransfersPerContract[]",
          "name": "tokenTransfers",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        }
      ],
      "name": "transferAndCall",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "args": [],
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC721\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ERC721TransferGateway.TransfersPerContract[]\",\"name\":\"tokenTransfers\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"forward\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC721\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ERC721TransferGateway.TransfersPerContract[]\",\"name\":\"tokenTransfers\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"forward((address,uint256[])[],address,bytes)\":{\"notice\":\"This functions is special in that it need to be called atomatically after the transfers are done. The transfers are made to the gateway itself before hand. The gateway will then forward them to the destination. This allows the gateway to proceed without being approved first at the cost of extra gas. For the receiver, it behaves exactly like `transferAndCall`. And so the information (sender, tokenTransfers) is appended to the function call the same way.\"},\"transferAndCall((address,uint256[])[],address,bytes)\":{\"notice\":\"this transfers the tokens to the destination and call the function (callData). The information (sender, tokenTransfers) is appended to the function call. This allows the recipient contract to keep using normal solidity functions (abi-encoded).\"}},\"notice\":\"Gateway that forwward erc721 token transfers to the destination and call it. This allow the receiver to know the sender and tokens received. As the gateway append data to the call, contracts can continue using normal solidity functions (abi-encoded). The Gateway need to be approved for each token contract. For new contracts, they could be pre-approved it globally.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.7/ERC721TransferGateway.sol\":\"ERC721TransferGateway\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"_lib/openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d\",\"license\":\"MIT\"},\"_lib/openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x5fd853592d6a9a1d1fdd6bd258098fb0f4632a32ea90f565661c9ba3191b5a1e\",\"license\":\"MIT\"},\"_lib/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x698f929f1097637d051976b322a2d532c27df022b09010e8d091e2888a5ebdf8\",\"license\":\"MIT\"},\"src/solc_0.7/ERC721TransferGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.3;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../_lib/openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"../../_lib/openzeppelin/contracts/utils/Address.sol\\\";\\n\\n///@notice Gateway that forwward erc721 token transfers to the destination and call it.\\n/// This allow the receiver to know the sender and tokens received.\\n/// As the gateway append data to the call, contracts can continue using normal solidity functions (abi-encoded).\\n/// The Gateway need to be approved for each token contract.\\n/// For new contracts, they could be pre-approved it globally.\\ncontract ERC721TransferGateway {\\n    using Address for address;\\n\\n    struct TransfersPerContract {\\n        IERC721 tokenContract;\\n        uint256[] tokens;\\n    }\\n\\n    ///@notice this transfers the tokens to the destination and call the function (callData).\\n    /// The information (sender, tokenTransfers) is appended to the function call.\\n    /// This allows the recipient contract to keep using normal solidity functions (abi-encoded).\\n    function transferAndCall(\\n        TransfersPerContract[] memory tokenTransfers, // TODO solidity upgrade to use calldata instead of memory\\n        address to,\\n        bytes calldata callData\\n    ) external payable returns (bytes memory) {\\n        address sender = _msgSender();\\n        for (uint256 i = 0; i < tokenTransfers.length; i++) {\\n            for (uint256 j = 0; j < tokenTransfers[i].tokens.length; j++) {\\n                tokenTransfers[i].tokenContract.transferFrom(sender, to, tokenTransfers[i].tokens[j]);\\n            }\\n        }\\n        return _call(sender, tokenTransfers, to, callData);\\n    }\\n\\n    ///@notice This functions is special in that it need to be called atomatically after the transfers are done.\\n    /// The transfers are made to the gateway itself before hand. The gateway will then forward them to the destination.\\n    /// This allows the gateway to proceed without being approved first at the cost of extra gas.\\n    /// For the receiver, it behaves exactly like `transferAndCall`.\\n    /// And so the information (sender, tokenTransfers) is appended to the function call the same way.\\n    function forward(\\n        TransfersPerContract[] memory tokenTransfers, // TODO solidity upgrade to use calldata instead of memory\\n        address to,\\n        bytes calldata callData\\n    ) external payable returns (bytes memory) {\\n        address sender = _msgSender();\\n        for (uint256 i = 0; i < tokenTransfers.length; i++) {\\n            for (uint256 j = 0; j < tokenTransfers[i].tokens.length; j++) {\\n                tokenTransfers[i].tokenContract.transferFrom(address(this), to, tokenTransfers[i].tokens[j]);\\n            }\\n        }\\n        return _call(sender, tokenTransfers, to, callData);\\n    }\\n\\n    // -------------------------------\\n    // INTERNAL\\n    // -------------------------------\\n\\n    function _call(\\n        address sender,\\n        TransfersPerContract[] memory tokenTransfers,\\n        address to,\\n        bytes calldata callData\\n    ) internal returns (bytes memory) {\\n        bytes memory data = abi.encodePacked(callData, abi.encode(tokenTransfers, sender));\\n        return to.functionCallWithValue(data, msg.value);\\n    }\\n\\n    function _msgSender() internal view returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\",\"keccak256\":\"0x55b0edf07cc03d1922846ce0a54ccc33fca9dee5a2c88f2b34f52eb4643951e8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506109ad806100206000396000f3fe6080604052600436106100295760003560e01c8063d7a8d3c71461002e578063e91ecd0814610057575b600080fd5b61004161003c3660046104c3565b61006a565b60405161004e9190610809565b60405180910390f35b6100416100653660046104c3565b610186565b60606000610076610288565b905060005b865181101561016c5760005b87828151811061009357fe5b60200260200101516020015151811015610163578782815181106100b357fe5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff166323b872dd84898b86815181106100e857fe5b60200260200101516020015185815181106100ff57fe5b60200260200101516040518463ffffffff1660e01b8152600401610125939291906106f8565b600060405180830381600087803b15801561013f57600080fd5b505af1158015610153573d6000803e3d6000fd5b5050600190920191506100879050565b5060010161007b565b5061017a818787878761028c565b9150505b949350505050565b60606000610192610288565b905060005b865181101561016c5760005b8782815181106101af57fe5b6020026020010151602001515181101561027f578782815181106101cf57fe5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff166323b872dd30898b868151811061020457fe5b602002602001015160200151858151811061021b57fe5b60200260200101516040518463ffffffff1660e01b8152600401610241939291906106f8565b600060405180830381600087803b15801561025b57600080fd5b505af115801561026f573d6000803e3d6000fd5b5050600190920191506101a39050565b50600101610197565b3390565b606080838387896040516020016102a4929190610729565b60408051601f19818403018152908290526102c39392916020016106b6565b60408051601f1981840301815291905290506102f673ffffffffffffffffffffffffffffffffffffffff86168234610301565b979650505050505050565b606061017e84848460405180606001604052806029815260200161094f6029913960608247101561034d5760405162461bcd60e51b815260040161034490610823565b60405180910390fd5b61035985858585610362565b95945050505050565b606061036d85610433565b6103895760405162461bcd60e51b815260040161034490610880565b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040516103b391906106dc565b60006040518083038185875af1925050503d80600081146103f0576040519150601f19603f3d011682016040523d82523d6000602084013e6103f5565b606091505b5091509150811561040957915061017e9050565b8051156104195780518082602001fd5b8360405162461bcd60e51b81526004016103449190610809565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061046757508115155b925050505b919050565b803561046c81610929565b60008083601f84011261048d578182fd5b50813567ffffffffffffffff8111156104a4578182fd5b6020830191508360208285010111156104bc57600080fd5b9250929050565b600080600080606085870312156104d8578384fd5b67ffffffffffffffff853511156104ed578384fd5b8435850186601f8201126104ff578485fd5b61051161050c82356108db565b6108b7565b81358152602080820191908301875b843581101561062757813585016040601f19828e0301121561054057898afd5b60405180604082011067ffffffffffffffff6040830111171561055f57fe5b604081016040526105736020830135610929565b6020820135815267ffffffffffffffff60408301351115610592578a8bfd5b6040820135820191508c603f8301126105a9578a8bfd5b6105b961050c60208401356108db565b8060208401358252602082019150604084018f60406020808801350287010111156105e2578d8efd5b8d5b60208601358110156106065781358452602093840193909101906001016105e4565b50506020838101919091529187525094850194929092019150600101610520565b505080965050505061063b60208601610471565b925067ffffffffffffffff60408601351115610655578182fd5b610665866040870135870161047c565b949793965094505050565b73ffffffffffffffffffffffffffffffffffffffff169052565b600081518084526106a28160208601602086016108f9565b601f01601f19169290920160200192915050565b60008385833783820181815283516106d28183602088016108f9565b0195945050505050565b600082516106ee8184602087016108f9565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b604080825283518282018190526000919060609081850190602080820287018401818a01875b848110156107eb578983037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa00186528151805173ffffffffffffffffffffffffffffffffffffffff1684528401518484018990528051898501819052908501908a90898601905b808310156107d657835182529287019260019290920191908701906107b6565b5097860197945050509083019060010161074f565b5050809650506107fd81880189610670565b50505050509392505050565b60006020825261081c602083018461068a565b9392505050565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60405181810167ffffffffffffffff811182821017156108d357fe5b604052919050565b600067ffffffffffffffff8211156108ef57fe5b5060209081020190565b60005b838110156109145781810151838201526020016108fc565b83811115610923576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461094b57600080fd5b5056fe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a2646970667358221220a21605b4c3edc360c38fb7deba610a79211098d051432903a0e2442b846985c364736f6c63430007030033",
  "deployedBytecode": "0x6080604052600436106100295760003560e01c8063d7a8d3c71461002e578063e91ecd0814610057575b600080fd5b61004161003c3660046104c3565b61006a565b60405161004e9190610809565b60405180910390f35b6100416100653660046104c3565b610186565b60606000610076610288565b905060005b865181101561016c5760005b87828151811061009357fe5b60200260200101516020015151811015610163578782815181106100b357fe5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff166323b872dd84898b86815181106100e857fe5b60200260200101516020015185815181106100ff57fe5b60200260200101516040518463ffffffff1660e01b8152600401610125939291906106f8565b600060405180830381600087803b15801561013f57600080fd5b505af1158015610153573d6000803e3d6000fd5b5050600190920191506100879050565b5060010161007b565b5061017a818787878761028c565b9150505b949350505050565b60606000610192610288565b905060005b865181101561016c5760005b8782815181106101af57fe5b6020026020010151602001515181101561027f578782815181106101cf57fe5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff166323b872dd30898b868151811061020457fe5b602002602001015160200151858151811061021b57fe5b60200260200101516040518463ffffffff1660e01b8152600401610241939291906106f8565b600060405180830381600087803b15801561025b57600080fd5b505af115801561026f573d6000803e3d6000fd5b5050600190920191506101a39050565b50600101610197565b3390565b606080838387896040516020016102a4929190610729565b60408051601f19818403018152908290526102c39392916020016106b6565b60408051601f1981840301815291905290506102f673ffffffffffffffffffffffffffffffffffffffff86168234610301565b979650505050505050565b606061017e84848460405180606001604052806029815260200161094f6029913960608247101561034d5760405162461bcd60e51b815260040161034490610823565b60405180910390fd5b61035985858585610362565b95945050505050565b606061036d85610433565b6103895760405162461bcd60e51b815260040161034490610880565b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040516103b391906106dc565b60006040518083038185875af1925050503d80600081146103f0576040519150601f19603f3d011682016040523d82523d6000602084013e6103f5565b606091505b5091509150811561040957915061017e9050565b8051156104195780518082602001fd5b8360405162461bcd60e51b81526004016103449190610809565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061046757508115155b925050505b919050565b803561046c81610929565b60008083601f84011261048d578182fd5b50813567ffffffffffffffff8111156104a4578182fd5b6020830191508360208285010111156104bc57600080fd5b9250929050565b600080600080606085870312156104d8578384fd5b67ffffffffffffffff853511156104ed578384fd5b8435850186601f8201126104ff578485fd5b61051161050c82356108db565b6108b7565b81358152602080820191908301875b843581101561062757813585016040601f19828e0301121561054057898afd5b60405180604082011067ffffffffffffffff6040830111171561055f57fe5b604081016040526105736020830135610929565b6020820135815267ffffffffffffffff60408301351115610592578a8bfd5b6040820135820191508c603f8301126105a9578a8bfd5b6105b961050c60208401356108db565b8060208401358252602082019150604084018f60406020808801350287010111156105e2578d8efd5b8d5b60208601358110156106065781358452602093840193909101906001016105e4565b50506020838101919091529187525094850194929092019150600101610520565b505080965050505061063b60208601610471565b925067ffffffffffffffff60408601351115610655578182fd5b610665866040870135870161047c565b949793965094505050565b73ffffffffffffffffffffffffffffffffffffffff169052565b600081518084526106a28160208601602086016108f9565b601f01601f19169290920160200192915050565b60008385833783820181815283516106d28183602088016108f9565b0195945050505050565b600082516106ee8184602087016108f9565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b604080825283518282018190526000919060609081850190602080820287018401818a01875b848110156107eb578983037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa00186528151805173ffffffffffffffffffffffffffffffffffffffff1684528401518484018990528051898501819052908501908a90898601905b808310156107d657835182529287019260019290920191908701906107b6565b5097860197945050509083019060010161074f565b5050809650506107fd81880189610670565b50505050509392505050565b60006020825261081c602083018461068a565b9392505050565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60405181810167ffffffffffffffff811182821017156108d357fe5b604052919050565b600067ffffffffffffffff8211156108ef57fe5b5060209081020190565b60005b838110156109145781810151838201526020016108fc565b83811115610923576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461094b57600080fd5b5056fe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a2646970667358221220a21605b4c3edc360c38fb7deba610a79211098d051432903a0e2442b846985c364736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "forward((address,uint256[])[],address,bytes)": {
        "notice": "This functions is special in that it need to be called atomatically after the transfers are done. The transfers are made to the gateway itself before hand. The gateway will then forward them to the destination. This allows the gateway to proceed without being approved first at the cost of extra gas. For the receiver, it behaves exactly like `transferAndCall`. And so the information (sender, tokenTransfers) is appended to the function call the same way."
      },
      "transferAndCall((address,uint256[])[],address,bytes)": {
        "notice": "this transfers the tokens to the destination and call the function (callData). The information (sender, tokenTransfers) is appended to the function call. This allows the recipient contract to keep using normal solidity functions (abi-encoded)."
      }
    },
    "notice": "Gateway that forwward erc721 token transfers to the destination and call it. This allow the receiver to know the sender and tokens received. As the gateway append data to the call, contracts can continue using normal solidity functions (abi-encoded). The Gateway need to be approved for each token contract. For new contracts, they could be pre-approved it globally.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}