{
  "address": "0x8B8A1A6b88095ACCff5c5A8b68e99604D155CE58",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        },
        {
          "internalType": "contract RewardsGenerator",
          "name": "initialGenerator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract RewardsGenerator",
          "name": "newGenerator",
          "type": "address"
        }
      ],
      "name": "changegGenerator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claimFixedRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claimSharedPoolRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "generator",
      "outputs": [
        {
          "internalType": "contract RewardsGenerator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7518d3a61954fd2d808b38f1092a4369daa7843c0446ef47ca5d07d2aff6363c",
  "receipt": {
    "to": null,
    "from": "0x2aE1389b686404959Eb61205c78e1103b85F157f",
    "contractAddress": "0x8B8A1A6b88095ACCff5c5A8b68e99604D155CE58",
    "transactionIndex": 0,
    "gasUsed": "510664",
    "logsBloom": "0x
    "blockHash": "0xad568a6581d026e6ad6e8cb79dc7bd9a6444c752d09cf874c49ee08e28b6f5f6",
    "transactionHash": "0x7518d3a61954fd2d808b38f1092a4369daa7843c0446ef47ca5d07d2aff6363c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8078401,
        "transactionHash": "0x7518d3a61954fd2d808b38f1092a4369daa7843c0446ef47ca5d07d2aff6363c",
        "address": "0x8B8A1A6b88095ACCff5c5A8b68e99604D155CE58",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002ae1389b686404959eb61205c78e1103b85f157f"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0xad568a6581d026e6ad6e8cb79dc7bd9a6444c752d09cf874c49ee08e28b6f5f6"
      }
    ],
    "blockNumber": 8078401,
    "cumulativeGasUsed": "823808",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2aE1389b686404959Eb61205c78e1103b85F157f",
    "0x7B0bF316e96431b5f30d2DF37db854B04929FE46"
  ],
  "numDeployments": 1,
  "solcInputHash": "af21df80883fa8437198488cd32852da",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"contract RewardsGenerator\",\"name\":\"initialGenerator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract RewardsGenerator\",\"name\":\"newGenerator\",\"type\":\"address\"}],\"name\":\"changegGenerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimFixedRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimSharedPoolRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generator\",\"outputs\":[{\"internalType\":\"contract RewardsGenerator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/etherplay/BrainLess.sol\":\"BrainLess\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaceeafeeaf0d200ca3942d8bf14c1c4f787a77f79cc87c08bb668e65acdee29\",\"license\":\"MIT\"},\"src/base/utils/UsingOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../interfaces/IERC165.sol\\\";\\n\\ncontract UsingOwner is IERC165 {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    address public owner;\\n\\n    constructor(address _owner) {\\n        _transferOwnership(_owner);\\n    }\\n\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) external pure virtual override returns (bool) {\\n        return interfaceID == 0x7f5828d0 || interfaceID == 0x01ffc9a7;\\n    }\\n\\n    function _transferOwnership(address newOwner) internal {\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x91cf6d246ec85f9b6083d73c27b7efe7805f7b772ae7e8a30eb831339c5c014e\",\"license\":\"MIT\"},\"src/conquest_token/IReward.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\ninterface IReward {\\n    function reward(address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x2ccdc4c0f0a5f63526316f0f0bc316aa5d9f1e59e8574a66e43e3f5a81e233f4\",\"license\":\"AGPL-3.0\"},\"src/conquest_token/RewardsGenerator.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\\\";\\nimport \\\"../outerspace/interfaces/IOnStakeChange.sol\\\";\\nimport \\\"./IReward.sol\\\";\\n\\ncontract RewardsGenerator is IERC20, Proxied, IOnStakeChange {\\n    uint256 internal constant PRECISION = 1e24;\\n    uint256 internal constant DECIMALS_18_MILLIONTH = 1000000000000; // 1 millionth of a token so that it matches with REWARD_RATE_millionth\\n\\n    uint256 internal immutable REWARD_RATE_millionth;\\n    uint256 internal immutable FIXED_REWARD_RATE_thousands_millionth;\\n\\n    event GameEnabled(address indexed game, uint256 weight, uint256 timestamp);\\n\\n    struct GlobalState {\\n        uint40 lastUpdateTime;\\n        uint104 totalRewardPerPointAtLastUpdate; // PRECISION = 1e24\\n        uint112 totalPoints;\\n    }\\n    GlobalState _global;\\n\\n    struct SharedRatePerAccount {\\n        uint112 points;\\n        uint104 totalRewardPerPointAccounted; // PRECISION = 1e24\\n        // we do not pack here as we want to keep precision\\n        uint112 rewardsToWithdraw;\\n    }\\n\\n    mapping(address => SharedRatePerAccount) _sharedRateRewardPerAccount;\\n\\n    struct FixedRate {\\n        uint112 toWithdraw;\\n        uint40 lastTime;\\n    }\\n    mapping(address => FixedRate) internal _fixedRateRewardPerAccount;\\n\\n    mapping(address => uint256) internal _games;\\n\\n    IReward public immutable reward;\\n\\n    struct Config {\\n        uint256 rewardRateMillionth;\\n        uint256 fixedRewardRateThousandsMillionth;\\n    }\\n\\n    struct InitialAccount {\\n        address account;\\n        uint256 amount;\\n    }\\n\\n    bool internal _init;\\n\\n    constructor(\\n        IReward rewardAddress,\\n        Config memory config,\\n        address[] memory initialGames,\\n        InitialAccount[] memory initialAccounts\\n    ) {\\n        reward = rewardAddress;\\n        REWARD_RATE_millionth = config.rewardRateMillionth;\\n        FIXED_REWARD_RATE_thousands_millionth = config.fixedRewardRateThousandsMillionth;\\n\\n        _postUpgrade(rewardAddress, config, initialGames, initialAccounts);\\n    }\\n\\n    function postUpgrade(\\n        IReward rewardAddress,\\n        Config memory config,\\n        address[] memory initialGames,\\n        InitialAccount[] memory initialAccounts\\n    ) external onlyProxyAdmin {\\n        _postUpgrade(rewardAddress, config, initialGames, initialAccounts);\\n    }\\n\\n    function _postUpgrade(\\n        IReward,\\n        Config memory,\\n        address[] memory initialGames,\\n        InitialAccount[] memory initialAccounts\\n    ) internal {\\n        if (!_init) {\\n            for (uint256 i = 0; i < initialGames.length; i++) {\\n                _enableGame(initialGames[i], 1000000000000000000);\\n            }\\n            for (uint256 i = 0; i < initialAccounts.length; i++) {\\n                _add(initialAccounts[i].account, initialAccounts[i].amount);\\n            }\\n            _init = true;\\n        }\\n    }\\n\\n    string public constant symbol = \\\"POINT\\\";\\n\\n    function name() public pure returns (string memory) {\\n        return \\\"Conquest v0 Points\\\";\\n    }\\n\\n    function enableGame(address game, uint256 weight) external onlyProxyAdmin {\\n        _enableGame(game, weight);\\n    }\\n\\n    function _enableGame(address game, uint256 weight) internal {\\n        _games[game] = weight;\\n        emit GameEnabled(game, weight, block.timestamp);\\n    }\\n\\n    /// @inheritdoc IOnStakeChange\\n    function add(address account, uint256 amount) external override onlyGames {\\n        _add(account, amount);\\n    }\\n\\n    function _add(address account, uint256 amount) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        (uint256 totalPointsSoFar, uint256 accountPointsSoFar) = _update(account);\\n\\n        unchecked {\\n            // update total points and the account's point, their reward will be counted on next interaction.\\n            _global.totalPoints = uint112(totalPointsSoFar + amount);\\n            _sharedRateRewardPerAccount[account].points = uint112(accountPointsSoFar + amount);\\n        }\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /// @inheritdoc IOnStakeChange\\n    function remove(address account, uint256 amount) external override onlyGames {\\n        _remove(account, amount);\\n    }\\n\\n    function _remove(address account, uint256 amount) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        // update the amount generated, store it in\\n        (uint256 totalPointsSoFar, uint256 accountPointsSoFar) = _update(account);\\n\\n        unchecked {\\n            // update total points and the account's point, their reward will be counted on next interaction.\\n            _global.totalPoints = uint112(totalPointsSoFar - amount);\\n            _sharedRateRewardPerAccount[account].points = uint112(accountPointsSoFar - amount);\\n        }\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /// @inheritdoc IOnStakeChange\\n    function move(address from, address to, uint256 amount) external override onlyGames {\\n        _remove(from, amount);\\n        _add(to, amount);\\n    }\\n\\n    function totalSupply() external view override returns (uint256) {\\n        return _global.totalPoints;\\n    }\\n\\n    function balanceOf(address owner) external view override returns (uint256) {\\n        return _sharedRateRewardPerAccount[owner].points;\\n    }\\n\\n    function allowance(address, address) external pure override returns (uint256) {\\n        return 0;\\n    }\\n\\n    function decimals() external pure virtual returns (uint8) {\\n        return uint8(18);\\n    }\\n\\n    function transfer(address, uint256) external returns (bool) {\\n        revert(\\\"NON_TRANSFERABLE\\\");\\n    }\\n\\n    function approve(address, uint256) external returns (bool) {\\n        revert(\\\"NON_TRANSFERABLE\\\");\\n    }\\n\\n    function transferFrom(address, address, uint256) external returns (bool) {\\n        revert(\\\"NON_TRANSFERABLE\\\");\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // For Accounts\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    /// @notice claim the rewards earned so far in the shared pool\\n    function claimSharedPoolRewards(address to) external {\\n        address account = msg.sender;\\n        uint256 accountPointsSoFar = _sharedRateRewardPerAccount[account].points;\\n\\n        (, uint256 totalRewardPerPoint) = _updateGlobal();\\n        uint256 amount = _computeRewardsEarned(\\n            _sharedRateRewardPerAccount[account].totalRewardPerPointAccounted,\\n            accountPointsSoFar,\\n            totalRewardPerPoint,\\n            _sharedRateRewardPerAccount[account].rewardsToWithdraw\\n        );\\n        _sharedRateRewardPerAccount[account].totalRewardPerPointAccounted = uint104(totalRewardPerPoint);\\n\\n        if (amount > 0) {\\n            _sharedRateRewardPerAccount[account].rewardsToWithdraw = 0;\\n            reward.reward(to, amount);\\n        }\\n    }\\n\\n    /// @notice claim the rewards earned so far using a fixed rate per point\\n    function claimFixedRewards(address to) external {\\n        address account = msg.sender;\\n        uint256 amount = earnedFromFixedRate(account);\\n        if (amount > 0) {\\n            _fixedRateRewardPerAccount[account].lastTime = uint40(block.timestamp);\\n            _fixedRateRewardPerAccount[account].toWithdraw = 0;\\n            reward.reward(to, amount);\\n        }\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // Getters\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    /// @notice The amount of reward each point has earned so far\\n    function getTotalRewardPerPointWithPrecision24() external view returns (uint256) {\\n        return\\n            _global.totalRewardPerPointAtLastUpdate +\\n            _computeExtraTotalRewardPerPointSinceLastTime(\\n                _global.totalPoints,\\n                REWARD_RATE_millionth,\\n                _global.lastUpdateTime\\n            );\\n    }\\n\\n    /// @notice The amount of reward an account has accrued so far. Does not include already withdrawn rewards.\\n    function earnedFromPoolRate(address account) external view returns (uint256) {\\n        return\\n            _computeRewardsEarned(\\n                _sharedRateRewardPerAccount[account].totalRewardPerPointAccounted,\\n                _sharedRateRewardPerAccount[account].points,\\n                _global.totalRewardPerPointAtLastUpdate +\\n                    _computeExtraTotalRewardPerPointSinceLastTime(\\n                        _global.totalPoints,\\n                        REWARD_RATE_millionth,\\n                        _global.lastUpdateTime\\n                    ),\\n                _sharedRateRewardPerAccount[account].rewardsToWithdraw\\n            );\\n    }\\n\\n    /// @notice The amount of reward an account has accrued so far. Does not include already withdrawn rewards.\\n    function earnedFromFixedRate(address account) public view returns (uint256) {\\n        uint256 extraFixed = ((block.timestamp - _fixedRateRewardPerAccount[account].lastTime) *\\n            _sharedRateRewardPerAccount[account].points *\\n            FIXED_REWARD_RATE_thousands_millionth) / 1000000000;\\n        return extraFixed + _fixedRateRewardPerAccount[account].toWithdraw;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // Internal\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    function _computeRewardsEarned(\\n        uint256 totalRewardPerPointAccountedSoFar,\\n        uint256 accountPoints,\\n        uint256 currentTotalRewardPerPoint,\\n        uint256 accountRewardsSoFar\\n    ) internal pure returns (uint256) {\\n        return\\n            accountRewardsSoFar +\\n            (((accountPoints * (currentTotalRewardPerPoint - totalRewardPerPointAccountedSoFar)) *\\n                DECIMALS_18_MILLIONTH) / PRECISION);\\n    }\\n\\n    function _computeExtraTotalRewardPerPointSinceLastTime(\\n        uint256 totalPoints,\\n        uint256 rewardRateMillionth,\\n        uint256 lastUpdateTime\\n    ) internal view returns (uint256) {\\n        if (totalPoints == 0) {\\n            return 0;\\n        }\\n        return ((block.timestamp - lastUpdateTime) * rewardRateMillionth * PRECISION) / totalPoints;\\n    }\\n\\n    function _updateGlobal() internal returns (uint256 totalPointsSoFar, uint256 totalRewardPerPointAllocatedSoFar) {\\n        totalPointsSoFar = _global.totalPoints;\\n\\n        uint256 extraTotalRewardPerPoint = _computeExtraTotalRewardPerPointSinceLastTime(\\n            totalPointsSoFar,\\n            REWARD_RATE_millionth,\\n            _global.lastUpdateTime\\n        );\\n\\n        totalRewardPerPointAllocatedSoFar = _global.totalRewardPerPointAtLastUpdate + extraTotalRewardPerPoint;\\n\\n        _global.totalRewardPerPointAtLastUpdate = uint104(totalRewardPerPointAllocatedSoFar);\\n        _global.lastUpdateTime = uint40(block.timestamp);\\n    }\\n\\n    function _updateAccount(\\n        address account,\\n        uint256 totalRewardPerPointAllocatedSoFar\\n    ) internal returns (uint256 accountPointsSoFar) {\\n        accountPointsSoFar = _sharedRateRewardPerAccount[account].points;\\n\\n        // update the reward that can be withdrawn, catching up account state to global\\n        _sharedRateRewardPerAccount[account].rewardsToWithdraw = uint112(\\n            _computeRewardsEarned(\\n                // last checkpoint : when was the account last updated\\n                _sharedRateRewardPerAccount[account].totalRewardPerPointAccounted,\\n                accountPointsSoFar,\\n                totalRewardPerPointAllocatedSoFar,\\n                // rewards already registered\\n                _sharedRateRewardPerAccount[account].rewardsToWithdraw\\n            )\\n        );\\n        _sharedRateRewardPerAccount[account].totalRewardPerPointAccounted = uint104(totalRewardPerPointAllocatedSoFar);\\n\\n        uint256 extraFixed = ((block.timestamp - _fixedRateRewardPerAccount[account].lastTime) *\\n            accountPointsSoFar *\\n            FIXED_REWARD_RATE_thousands_millionth) / 1000000000;\\n        _fixedRateRewardPerAccount[account].lastTime = uint40(block.timestamp);\\n        _fixedRateRewardPerAccount[account].toWithdraw += uint112(extraFixed);\\n    }\\n\\n    function _update(address account) internal returns (uint256, uint256) {\\n        (uint256 totalPointsSoFar, uint256 totalRewardPerPointAllocatedSoFar) = _updateGlobal();\\n        uint256 accountPointsSoFar = _updateAccount(account, totalRewardPerPointAllocatedSoFar);\\n        return (totalPointsSoFar, accountPointsSoFar);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // Modifiers\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    modifier onlyGames() {\\n        require(_games[msg.sender] > 0, \\\"NOT_AUTHORIZED_GAME\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xe3f3081f2d457a80423999489af4af6a1f8e71486c6fde8949172658fcb461e7\",\"license\":\"AGPL-3.0\"},\"src/etherplay/BrainLess.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"../base/utils/UsingOwner.sol\\\";\\nimport \\\"../conquest_token/RewardsGenerator.sol\\\";\\n\\ninterface IClaim {\\n    function claim(address to) external;\\n}\\n\\ncontract BrainLess is UsingOwner {\\n    RewardsGenerator public generator;\\n\\n    constructor(address initialOwner, RewardsGenerator initialGenerator) UsingOwner(initialOwner) {\\n        generator = initialGenerator;\\n    }\\n\\n    function claimSharedPoolRewards(address to) external onlyOwner {\\n        generator.claimSharedPoolRewards(to);\\n    }\\n\\n    function claimFixedRewards(address to) external onlyOwner {\\n        generator.claimFixedRewards(to);\\n    }\\n\\n    function claim(address to) external onlyOwner {\\n        IClaim(address(generator)).claim(to);\\n    }\\n\\n    function changegGenerator(RewardsGenerator newGenerator) external onlyOwner {\\n        generator = newGenerator;\\n    }\\n}\\n\",\"keccak256\":\"0xd5eae258cd93dfc1df2fa0f158af3a0f86cea2b0113cb7bcc8e665b7b607ff84\",\"license\":\"AGPL-3.0\"},\"src/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc8ed57515045cd0041bc5bf2feb54ba346bd6a24cc054ffa48fb522751778ce7\",\"license\":\"MIT\"},\"src/outerspace/interfaces/IOnStakeChange.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\ninterface IOnStakeChange {\\n    function add(address account, uint256 amount) external;\\n\\n    function remove(address account, uint256 amount) external;\\n\\n    function move(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xeb5f9874b6b35990ada4462b815e369b00969e2a3338741f79e9d88037bdf6fa\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161089138038061089183398101604081905261002f916100d3565b8161003981610060565b50600180546001600160a01b0319166001600160a01b03929092169190911790555061010d565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03811681146100d057600080fd5b50565b600080604083850312156100e657600080fd5b82516100f1816100bb565b6020840151909250610102816100bb565b809150509250929050565b6107758061011c6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80637afa1eed1161005b5780637afa1eed146100f05780638da5cb5b14610135578063f2fde38b14610155578063ff1e03e91461016857600080fd5b806301ffc9a71461008d578063066112f9146100b55780631da51124146100ca5780631e83409a146100dd575b600080fd5b6100a061009b3660046106b7565b61017b565b60405190151581526020015b60405180910390f35b6100c86100c3366004610722565b610214565b005b6100c86100d8366004610722565b610323565b6100c86100eb366004610722565b6103eb565b6001546101109073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ac565b6000546101109073ffffffffffffffffffffffffffffffffffffffff1681565b6100c8610163366004610722565b6104c4565b6100c8610176366004610722565b610551565b60007f7f5828d0000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316148061020e57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461029a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a454400000000000000000000000000000000000060448201526064015b60405180910390fd5b6001546040517f066112f900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301529091169063066112f9906024015b600060405180830381600087803b15801561030857600080fd5b505af115801561031c573d6000803e3d6000fd5b5050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610291565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff16331461046c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610291565b6001546040517f1e83409a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015290911690631e83409a906024016102ee565b60005473ffffffffffffffffffffffffffffffffffffffff163314610545576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610291565b61054e8161062a565b50565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610291565b6001546040517fff1e03e900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301529091169063ff1e03e9906024016102ee565b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000602082840312156106c957600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146106f957600080fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461054e57600080fd5b60006020828403121561073457600080fd5b81356106f98161070056fea264697066735822122094966ed3cd0c001f0b0b0695f76bfb5bb4f0c92e7ae2cf607841b758f07312b264736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80637afa1eed1161005b5780637afa1eed146100f05780638da5cb5b14610135578063f2fde38b14610155578063ff1e03e91461016857600080fd5b806301ffc9a71461008d578063066112f9146100b55780631da51124146100ca5780631e83409a146100dd575b600080fd5b6100a061009b3660046106b7565b61017b565b60405190151581526020015b60405180910390f35b6100c86100c3366004610722565b610214565b005b6100c86100d8366004610722565b610323565b6100c86100eb366004610722565b6103eb565b6001546101109073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ac565b6000546101109073ffffffffffffffffffffffffffffffffffffffff1681565b6100c8610163366004610722565b6104c4565b6100c8610176366004610722565b610551565b60007f7f5828d0000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316148061020e57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461029a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a454400000000000000000000000000000000000060448201526064015b60405180910390fd5b6001546040517f066112f900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301529091169063066112f9906024015b600060405180830381600087803b15801561030857600080fd5b505af115801561031c573d6000803e3d6000fd5b5050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610291565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff16331461046c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610291565b6001546040517f1e83409a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015290911690631e83409a906024016102ee565b60005473ffffffffffffffffffffffffffffffffffffffff163314610545576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610291565b61054e8161062a565b50565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610291565b6001546040517fff1e03e900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301529091169063ff1e03e9906024016102ee565b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000602082840312156106c957600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146106f957600080fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461054e57600080fd5b60006020828403121561073457600080fd5b81356106f98161070056fea264697066735822122094966ed3cd0c001f0b0b0695f76bfb5bb4f0c92e7ae2cf607841b758f07312b264736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14408,
        "contract": "src/etherplay/BrainLess.sol:BrainLess",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17246,
        "contract": "src/etherplay/BrainLess.sol:BrainLess",
        "label": "generator",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(RewardsGenerator)16928"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(RewardsGenerator)16928": {
        "encoding": "inplace",
        "label": "contract RewardsGenerator",
        "numberOfBytes": "20"
      }
    }
  }
}